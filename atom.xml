<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yayiyo</title>
  
  <subtitle>迷途知返</subtitle>
  <link href="https://www.yayiyo.cn/atom.xml" rel="self"/>
  
  <link href="https://www.yayiyo.cn/"/>
  <updated>2023-12-05T02:02:03.966Z</updated>
  <id>https://www.yayiyo.cn/</id>
  
  <author>
    <name>Jack Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux下Docker安装SonarQube（PostgreSQL）</title>
    <link href="https://www.yayiyo.cn/2021/07/02/linux-xia-docker-an-zhuang-sonarqube-postgresql/"/>
    <id>https://www.yayiyo.cn/2021/07/02/linux-xia-docker-an-zhuang-sonarqube-postgresql/</id>
    <published>2021-07-02T04:13:21.000Z</published>
    <updated>2023-12-05T02:02:03.966Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><a href="http://www.sonarqube.org/"><em>SonarQube</em></a>是一种自动代码审查工具，用于检测代码中的错误、漏洞和代码异味。 它可以与现有的工作流程集成，以支持跨项目分支和拉取请求的持续代码检查。</p><p>本文基于_Linux_操作系统，在_Docker_容器中部署_SonarQube_服务，并进行简单的配置和使用。_SonarQube_在<code>7.8</code>版本之后不再支持_Mysql_数据库，教程选用的是最新版本的<a href="https://www.postgresql.org/"><em>Postgresql</em></a>数据库，_SonarQube_使用的版本是_8.8-community_。</p><h4 id="1-安装Postgresql"><a href="#1-安装Postgresql" class="headerlink" title="1.安装Postgresql"></a>1.安装Postgresql</h4><h5 id="1-1-下载-PostgreSQL镜像"><a href="#1-1-下载-PostgreSQL镜像" class="headerlink" title="1.1 下载 PostgreSQL镜像"></a>1.1 下载 <a href="https://hub.docker.com/_/postgres">PostgreSQL镜像</a></h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull postgres</code></pre><h5 id="1-2-启动容器"><a href="#1-2-启动容器" class="headerlink" title="1.2 启动容器"></a>1.2 启动容器</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -p <span class="token number">5432</span>:5432 -v /data/postgres:/var/lib/postgresql/data -e <span class="token assign-left variable">POSTGRES_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> -e <span class="token assign-left variable">ALLOW_IP_RANGE</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0/0 --name postgres postgres</code></pre><p>参数说明：</p><p>POSTGRES_PASSWORD 是数据库初始密码</p><p>ALLOW_IP_RANGE=0.0.0.0/0 允许任何主机访问</p><h5 id="1-3-进入postgres容器"><a href="#1-3-进入postgres容器" class="headerlink" title="1.3 进入postgres容器"></a>1.3 进入postgres容器</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it postgres <span class="token function">bash</span></code></pre><p><code>注意:</code> 这里的<code>postgres</code>是<code>1.2</code>中<code>--name</code>的参数</p><h5 id="1-4-使用默认用户postgres创建SonarQube数据库"><a href="#1-4-使用默认用户postgres创建SonarQube数据库" class="headerlink" title="1.4 使用默认用户postgres创建SonarQube数据库"></a>1.4 使用默认用户<code>postgres</code>创建<code>SonarQube</code>数据库</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换postgres用户</span><span class="token function">su</span> postgres<span class="token comment"># 进入数据库</span>psql<span class="token comment"># 创建sonar数据库</span>CREATE DATABASE sonar<span class="token punctuation">;</span><span class="token comment"># 退出数据库</span><span class="token punctuation">\</span>q<span class="token comment"># 退出postgres用户</span><span class="token builtin class-name">exit</span><span class="token comment"># 退出容器</span><span class="token builtin class-name">exit</span></code></pre><h4 id="2-部署SonarQube"><a href="#2-部署SonarQube" class="headerlink" title="2. 部署SonarQube"></a>2. 部署SonarQube</h4><h5 id="2-1-下载SonarQube镜像"><a href="#2-1-下载SonarQube镜像" class="headerlink" title="2.1 下载SonarQube镜像"></a>2.1 下载<a href="https://hub.docker.com/_/sonarqube">SonarQube镜像</a></h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull sonarqube:8.8-community</code></pre><h5 id="2-2-创建Volume-可忽略此步骤"><a href="#2-2-创建Volume-可忽略此步骤" class="headerlink" title="2.2 创建Volume(可忽略此步骤)"></a>2.2 创建Volume(可忽略此步骤)</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume create --name sonarqube_data<span class="token function">docker</span> volume create --name sonarqube_logs<span class="token function">docker</span> volume create --name sonarqube_extensions<span class="token function">docker</span> volume create --name sonarqube_conf</code></pre><h5 id="2-3-启动容器"><a href="#2-3-启动容器" class="headerlink" title="2.3 启动容器"></a>2.3 启动容器</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d --name sonarqube <span class="token punctuation">\</span>    -p <span class="token number">9000</span>:9000 <span class="token punctuation">\</span>    -e <span class="token assign-left variable">SONAR_JDBC_URL</span><span class="token operator">=</span>jdbc:postgresql://192.168.14.5:5432/sonar <span class="token punctuation">\</span>    -e <span class="token assign-left variable">SONAR_JDBC_USERNAME</span><span class="token operator">=</span>postgres <span class="token punctuation">\</span>    -e <span class="token assign-left variable">SONAR_JDBC_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span>    -v sonarqube_data:/opt/sonarqube/data <span class="token punctuation">\</span>    -v sonarqube_extensions:/opt/sonarqube/extensions <span class="token punctuation">\</span>    -v sonarqube_logs:/opt/sonarqube/logs <span class="token punctuation">\</span>    -v sonarqube_conf:/opt/sonarqube/conf <span class="token punctuation">\</span>    sonarqube:8.8-community</code></pre><p><code>docker logs \-f sonarqube</code> 查看日志发现报错</p><p><img src="https://img-blog.csdnimg.cn/20210702112812512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="错误日志"></p><p>修改配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysctl.conf</code></pre><p>最后一行添加<code>vm.max_map_count=262144</code>，保存退出<br>加载使其生效</p><pre class="language-bash" data-language="bash"><code class="language-bash">sysctl -p</code></pre><p>重新启动容器</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start sonarqube</code></pre><p>浏览器访问<code>http://主机IP:9000</code>,使用默认账号(admin)密码(admin)登录，根据提示修改原始密码</p><h4 id="3-配置SonalQube"><a href="#3-配置SonalQube" class="headerlink" title="3.配置SonalQube"></a>3.配置SonalQube</h4><h5 id="3-1-生成密钥"><a href="#3-1-生成密钥" class="headerlink" title="3.1 生成密钥"></a>3.1 生成密钥</h5><p>_Administration &gt; Security &gt; Users_，选择用户_Tokens_一栏，根据提示在_Generate Tokens_输入框中输入Token名称，点击_Generate_生成Token，点击_Copy_复制保存。</p><p><img src="https://img-blog.csdnimg.cn/20210702113013570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="找到Token生成"><br><img src="https://img-blog.csdnimg.cn/2021070211310418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="生成Token"></p><p>**<code>注意</code>**：这里的复制_Token_界面一旦关闭，无法再次查看_Token_内容，请妥善保存</p><h5 id="3-2-用户Token"><a href="#3-2-用户Token" class="headerlink" title="3.2 用户Token"></a>3.2 用户Token</h5><p>_Token_可以调用_SonarQube_相关API，以进行调试及开发。</p><h6 id="3-2-1-代码调试（以GO为例）"><a href="#3-2-1-代码调试（以GO为例）" class="headerlink" title="3.2.1 代码调试（以GO为例）"></a>3.2.1 代码调试（以GO为例）</h6><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"net/http"</span><span class="token string">"net/url"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">var</span> createPro <span class="token operator">=</span> <span class="token string">"http://192.168.14.5:9000/api/projects/create"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>v <span class="token operator">:=</span> url<span class="token punctuation">.</span>Values<span class="token punctuation">{</span><span class="token punctuation">}</span>v<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"project"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"visibility"</span><span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> createPro<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// 这里的username可直接使用生成的Token，无需密码；或直接用账号密码进行验证</span>req<span class="token punctuation">.</span><span class="token function">SetBasicAuth</span><span class="token punctuation">(</span><span class="token string">"3cf069236f72e95a64aad2b5714fb717ca080249"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span>DefaultClient<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span>data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h6 id="3-2-2-Postman调试"><a href="#3-2-2-Postman调试" class="headerlink" title="3.2.2 Postman调试"></a>3.2.2 Postman调试</h6><ol><li><p>填写请求路径</p></li><li><p>点击_Authorization_，Type选择_Basic Auth_，在_username_中填写刚才生成的_Token_<img src="https://img-blog.csdnimg.cn/20210702113243936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="Authorization"></p></li><li><p>点击_Body_，选择_x-www-form-urlencoded_，填写所需_Key-Value_参数</p></li><li><p>发送请求<br><img src="https://img-blog.csdnimg.cn/20210702113328298.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="发送请求"></p></li></ol><h5 id="3-2-汉化-可选"><a href="#3-2-汉化-可选" class="headerlink" title="3.2 汉化(可选)"></a>3.2 汉化(可选)</h5><p><em>Administration &gt; Marketplace &gt; Plugins</em>,搜索_Chinese_，选择对应插件安装，稍等片刻即可安装成功，页面上方会出现_重启服务_和_重置_选择按钮，按需选择就行了，个人觉得英文界面好用一些<br><img src="https://img-blog.csdnimg.cn/20210702113350625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="汉化"></p><h4 id="4-SonarQube的使用"><a href="#4-SonarQube的使用" class="headerlink" title="4.SonarQube的使用"></a>4.SonarQube的使用</h4><h5 id="4-1-安装SonarScanner-其他安装方式请参照官方文档"><a href="#4-1-安装SonarScanner-其他安装方式请参照官方文档" class="headerlink" title="4.1 安装SonarScanner(其他安装方式请参照官方文档)"></a>4.1 安装SonarScanner(其他安装方式请参照<a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/"><em>官方文档</em></a>)</h5><h6 id="4-1-1-下载二进制安装包"><a href="#4-1-1-下载二进制安装包" class="headerlink" title="4.1.1 下载二进制安装包"></a>4.1.1 下载二进制安装包</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip</code></pre><h6 id="4-1-2-解压"><a href="#4-1-2-解压" class="headerlink" title="4.1.2 解压"></a>4.1.2 解压</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> sonar-scanner-cli-4.6.2.2472-linux.zip -d /usr/local/</code></pre><h6 id="4-1-3-添加到PATH（建立软连接）"><a href="#4-1-3-添加到PATH（建立软连接）" class="headerlink" title="4.1.3 添加到PATH（建立软连接）"></a>4.1.3 添加到PATH（建立软连接）</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s /usr/local/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner /usr/bin/<span class="token function">ln</span> -s /usr/local/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner-debug /usr/bin/</code></pre><p>测试安装是否成功</p><pre class="language-bash" data-language="bash"><code class="language-bash">sonar-scanner -h</code></pre><p>输出如下信息，证明安装无误</p><pre class="language-bash" data-language="bash"><code class="language-bash">INFO: INFO: usage: sonar-scanner <span class="token punctuation">[</span>options<span class="token punctuation">]</span>INFO: INFO: Options:INFO:  -D,--define <span class="token operator">&lt;</span>arg<span class="token operator">&gt;</span>     Define propertyINFO:  -h,--help             Display <span class="token builtin class-name">help</span> informationINFO:  -v,--version          Display version informationINFO:  -X,--debug            Produce execution debug output</code></pre><h5 id="4-2-生成扫描代码"><a href="#4-2-生成扫描代码" class="headerlink" title="4.2 生成扫描代码"></a>4.2 生成扫描代码</h5><h6 id="4-2-1-创建项目"><a href="#4-2-1-创建项目" class="headerlink" title="4.2.1 创建项目"></a>4.2.1 创建项目</h6><ol><li><p>登录_SonarQube_服务界面，点击_Create new project &gt; Manually_或右上角_Add project &gt; Manually_</p></li><li><p>输入合法的_Project key_和_Display name_，点击_Set up_<img src="https://img-blog.csdnimg.cn/20210702113628479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="create project"></p></li><li><p>填写一个_Token_名称生成新的_Token_，或使用上面生成的_Token_，点击_Continue_继续下一步<img src="https://img-blog.csdnimg.cn/20210702113707751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="填写Token"></p></li><li><p>选择合适选项，生成如下扫描代码(因为之前已经安装好_SonarScanner_，故忽略_Download_步骤)</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210702113834576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="生成扫描代码"></p><pre class="language-bash" data-language="bash"><code class="language-bash">sonar-scanner <span class="token punctuation">\</span>  -Dsonar.projectKey<span class="token operator">=</span>test <span class="token punctuation">\</span>  -Dsonar.sources<span class="token operator">=</span>. <span class="token punctuation">\</span>  -Dsonar.host.url<span class="token operator">=</span>http://192.168.14.5:9000 <span class="token punctuation">\</span>  -Dsonar.login<span class="token operator">=</span>3cf069236f72e95a64aad2b5714fb717ca080249</code></pre><p>如果你想获取更详细的_Debug_信息，可在命令后面添加以下任一参数</p><pre class="language-bash" data-language="bash"><code class="language-bash">-X，--verbose, -Dsonar.verbose<span class="token operator">=</span>true</code></pre><p>更多参数请参照<a href="https://docs.sonarqube.org/latest/analysis/analysis-parameters/"><em>官方文档</em></a></p><p>参数解析：</p><pre class="language-bash" data-language="bash"><code class="language-bash">-Dsonar.projectKey 项目名称，扫描完毕后会将数据发送给对应的项目-Dsonar.sources 代码目录，默认值是<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">.</span><span class="token variable">`</span></span>，表示当前目录，故该命令应在代码根目录下执行-Dsonar.host.url 服务器地址-Dsonar.login 登录Token</code></pre><h5 id="4-3-执行扫描"><a href="#4-3-执行扫描" class="headerlink" title="4.3 执行扫描"></a>4.3 执行扫描</h5><p>点击_Copy_复制扫描代码，在已安装_SonarScanner_的服务上的代码根目录执行<br>出现如下日志说明扫描完毕，此时可刷新管理界面或直接访问日志中的_<a href="http://192.168.14.5:9000/dashboard/?id=test">http://192.168.14.5:9000/dashboard\?id=test</a>_ 查看扫描结果</p><pre class="language-bash" data-language="bash"><code class="language-bash">INFO: Analysis report generated <span class="token keyword">in</span> 114ms, <span class="token function">dir</span> <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">156</span> KBINFO: Analysis report compressed <span class="token keyword">in</span> 299ms, <span class="token function">zip</span> <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">81</span> KBINFO: Analysis report uploaded <span class="token keyword">in</span> 174msINFO: ANALYSIS SUCCESSFUL, you can browse http://192.168.14.5:9000/dashboard?id<span class="token operator">=</span>testINFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis reportINFO: More about the report processing at http://192.168.14.5:9000/api/ce/task?id<span class="token operator">=</span>AXplL1OzMN_oVHnT4W6tINFO: Analysis total time: <span class="token number">8.154</span> sINFO: ------------------------------------------------------------------------INFO: EXECUTION SUCCESSINFO: ------------------------------------------------------------------------INFO: Total time: <span class="token number">13</span>.451sINFO: Final Memory: 13M/47MINFO: ------------------------------------------------------------------------</code></pre><p><em>本文是根据学习笔记整理而成，如有错误或不当之处，望各位读者海涵，同时欢迎各位留言或<a href="mailto:luckydog612@163.com">Email</a>批评指正，不胜感激。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sonarqube.org/&quot;&gt;&lt;em&gt;SonarQube&lt;/em&gt;&lt;/a&gt;是一种自动代码审查工具，用于检测代码中的错误、漏洞和代码异味。 它可以与现有的工作流程集成，以支持跨项目分支</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.yayiyo.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux linux docker postgresql SonarQube" scheme="https://www.yayiyo.cn/tags/Linux-linux-docker-postgresql-SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装MySQL5.7（详细而简单）</title>
    <link href="https://www.yayiyo.cn/2020/07/19/linux-an-zhuang-mysql5.7-xiang-xi-er-jian-dan/"/>
    <id>https://www.yayiyo.cn/2020/07/19/linux-an-zhuang-mysql5.7-xiang-xi-er-jian-dan/</id>
    <published>2020-07-18T22:32:20.000Z</published>
    <updated>2023-12-05T02:02:03.967Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/yum.repos.d/mysql-community.repo</code></pre><p><em>将以下代码复制进去</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Enable to use MySQL 5.7</span><span class="token punctuation">[</span>mysql57-community<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>MySQL <span class="token number">5.7</span> Community Server<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://repo.mysql.com/yum/mysql-5.7-community/el/7/<span class="token variable">$basearch</span>/<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</code></pre><p><em>安装</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> mysql-community-server</code></pre><p><em>权限设置</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> mysql:mysql -R /var/lib/mysql</code></pre><p><em>初始化</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">mysqld --initialize</code></pre><p><em>启动</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld</code></pre><p>如果报错：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Job <span class="token keyword">for</span> mysqld.service failed because the control process exited with error code. See <span class="token string">"systemctl status mysqld.service"</span> and <span class="token string">"journalctl -xe"</span> <span class="token keyword">for</span> details.</code></pre><p><em><code>Do this and star mysql again</code></em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf /var/lib/mysql</code></pre><p><em>查看运行状态</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl status mysqld</code></pre><p><em>获取默认密码并登陆MySQL</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.logmysql -uroot -puse mysql<span class="token punctuation">;</span>   <span class="token comment">#这一步如果报错，类似于下面这样，直接跳转下一步</span>ERROR <span class="token number">1820</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: You must reset your password using ALTER <span class="token environment constant">USER</span> statement before executing this statement.</code></pre><p><em>重置密码（<code>密码尽量包含大小写以及数字，否则可能设置不成功，切记：复杂</code>）</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'Abc123'</span><span class="token punctuation">;</span></code></pre><p><em>开启远程登录(如果需要远程连接的话)</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">select</span> user,host from user<span class="token punctuation">;</span></code></pre><p><em><code>修改前</code></em></p><table><thead><tr><th>user</th><th>host</th></tr></thead><tbody><tr><td>mysql.session</td><td>localhost</td></tr><tr><td>mysql.sys</td><td>localhost</td></tr><tr><td>root</td><td>localhost</td></tr></tbody></table><pre class="language-bash" data-language="bash"><code class="language-bash">update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">'%'</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span></code></pre><p><em><code>修改后</code></em></p><table><thead><tr><th>user</th><th>host</th></tr></thead><tbody><tr><td>mysql.session</td><td>localhost</td></tr><tr><td>mysql.sys</td><td>localhost</td></tr><tr><td>root</td><td>%</td></tr></tbody></table><p><em>刷新权限</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">flush privileges<span class="token punctuation">;</span></code></pre><p><em><code>其他参考命令</code></em></p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld.service                              <span class="token comment">#停止firewall</span>systemctl disable firewalld.service                           <span class="token comment">#禁止firewall开机启动</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp --permanent    <span class="token comment">#开放端口 </span>firewall-cmd --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">3306</span>/tcp --permanent <span class="token comment">#关闭端口</span>firewall-cmd --reload                                         <span class="token comment">#重新载入以生效</span>firewall-cmd --list-ports                                     <span class="token comment">#查看开放端口列表</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.yayiyo.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据库 mysql linux centos 数据库" scheme="https://www.yayiyo.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-mysql-linux-centos-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ的安装和使用（Linux）</title>
    <link href="https://www.yayiyo.cn/2020/07/19/rabbitmq-de-an-zhuang-he-shi-yong-linux/"/>
    <id>https://www.yayiyo.cn/2020/07/19/rabbitmq-de-an-zhuang-he-shi-yong-linux/</id>
    <published>2020-07-18T16:45:57.000Z</published>
    <updated>2023-12-05T02:02:03.969Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="1-安装相关依赖"><a href="#1-安装相关依赖" class="headerlink" title="1. 安装相关依赖"></a>1. 安装相关依赖</h3><pre class="language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">make</span> gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</code></pre><p><code>注意：进行下面步骤之前一定要做的事情</code></p><p>登陆<a href="https://www.rabbitmq.com/which-erlang.html">RabbitMQ官网</a>查询erlang与rabbitmq匹配版本</p><blockquote><p><code>版本一定要匹配！！！</code><br><code>版本一定要匹配！！！</code><br><code>版本一定要匹配！！！</code></p></blockquote><h3 id="2-安装Erlang"><a href="#2-安装Erlang" class="headerlink" title="2. 安装Erlang"></a>2. 安装Erlang</h3><p><em>下载</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://erlang.org/download/otp_src_21.3.tar.gz  </code></pre><p><em>解压</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -xzvf otp_src_21.3.tar.gz </code></pre><p><em>配置</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">./configure</code></pre><p><em>安装</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span></code></pre><p><em>验证</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">erl</code></pre><p><code>出现类似以下提示表明安装成功!(可按Ctrl + C退出，一次不行多来几次)</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">Erlang/OTP <span class="token number">21</span> <span class="token punctuation">[</span>erts-10.3<span class="token punctuation">]</span> <span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">64</span>-bit<span class="token punctuation">]</span> <span class="token punctuation">[</span>smp:32:32<span class="token punctuation">]</span> <span class="token punctuation">[</span>ds:32:32:10<span class="token punctuation">]</span> <span class="token punctuation">[</span>async-threads:1<span class="token punctuation">]</span> <span class="token punctuation">[</span>hipe<span class="token punctuation">]</span>Eshell V10.3  <span class="token punctuation">(</span>abort with ^G<span class="token punctuation">)</span><span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> </code></pre><h3 id="3-安装RabbitMQ"><a href="#3-安装RabbitMQ" class="headerlink" title="3. 安装RabbitMQ"></a>3. 安装RabbitMQ</h3><p><em>下载</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.2/rabbitmq-server-generic-unix-3.8.2.tar.xz</code></pre><p><em>解压</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">xz -d rabbitmq-server-generic-unix-3.8.2.tar.xz   -- 这一步解压出rabbitmq-server-generic-unix-3.8.2.tar文件 继续解压<span class="token function">tar</span> -xvf rabbitmq-server-generic-unix-3.8.2.tar   -- 这一步解压出rabbitmq-server-generic-unix-3.8.2.tar</code></pre><p><code>无需编译安装</code></p><p><em>移动</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> -r rabbitmq_server-3.8.2 /usr/local/rabbitmq</code></pre><p><em>配置</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/rabbitmq/sbin:<span class="token environment constant">$PATH</span>     -- 将此句加在文末 保存退出<span class="token builtin class-name">source</span> /etc/profile                            -- 使新配置生效</code></pre><h3 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h3><p><em>启用Web管理控制台</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management</code></pre><p><em>后台启动</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">rabbitmq-server -detached</code></pre><p><em><code>以下操作可选</code></em></p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start firewalld                                        -- 启动防火墙firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">15672</span>/tcp --permanent      -- 开放15672端口firewall-cmd --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">15762</span>/tcp --permanent   -- 关闭端口<span class="token punctuation">(</span>此句可忽略，笔记<span class="token punctuation">)</span>firewall-cmd --reload                                            -- 开放或关闭端口都需要执行以使操作生效firewall-cmd --list-ports                                        -- 查看已经开放的端口</code></pre><h3 id="5-使用RabbitMQ"><a href="#5-使用RabbitMQ" class="headerlink" title="5. 使用RabbitMQ"></a>5. 使用RabbitMQ</h3><p><em><code>以下操作需要切换目录到/usr/local/rabbitmq/sbin/ 或在RabbitMQ命令前加上此目录</code></em></p><p><em>创建用户(权限不够可在命令前加<code>sudo</code>)</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">rabbitmqctl add_user js <span class="token number">123456</span>                      -- 添加用户rabbitmqctl set_user_tags js administrator          -- 设置用户身份rabbitmqctl set_permissions -p / js <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span>  -- 设置权限</code></pre><p><em>下载队列管理命令</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://raw.githubusercontent.com/rabbitmq/rabbitmq-management/v3.8.2/bin/rabbitmqadmin  或者<span class="token function">wget</span> http://127.0.0.1:15672/cli/rabbitmqadmin</code></pre><p><em>赋予权限</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x  rabbitmqadmin</code></pre><p><em>查询队列</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">python rabbitmqadmin --vhost<span class="token operator">=</span>vhost --username<span class="token operator">=</span>username --password<span class="token operator">=</span>password list queues例如：python rabbitmqadmin --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>js --password<span class="token operator">=</span><span class="token number">123456</span> list queues</code></pre><p><em>创建队列</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">python rabbitmqadmin --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>username --password<span class="token operator">=</span>password  <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>队列名称 或者python rabbitmqadmin <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>队列名称 <span class="token assign-left variable">auto_delete</span><span class="token operator">=</span>false <span class="token assign-left variable">durable</span><span class="token operator">=</span>true --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>username --password<span class="token operator">=</span>password例如：python rabbitmqadmin <span class="token assign-left variable">auto_delete</span><span class="token operator">=</span>false <span class="token assign-left variable">durable</span><span class="token operator">=</span>true --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>js --password<span class="token operator">=</span><span class="token number">123456</span> <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>csdn</code></pre><p><em>删除队列</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">python rabbitmqadmin --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>username --password<span class="token operator">=</span>password  delete queue <span class="token assign-left variable">name</span><span class="token operator">=</span>队列名称例如：python rabbitmqadmin --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>js --password<span class="token operator">=</span><span class="token number">123456</span>  delete queue <span class="token assign-left variable">name</span><span class="token operator">=</span>队列名称</code></pre><p><em><code>作者：本文力致于整理一篇比较完整的RabbitMQ的安装和使用教程，此文基于本人多次部署服务器整理而成，以避免每次部署服务器重新搜罗资料，有任何问题或需要补充的请留言，诚与各位交流学习！</code></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;1-安装相关依赖&quot;&gt;&lt;a href=&quot;#1-安装相关依赖&quot; class=&quot;headerlink&quot; title=&quot;1. 安装相关依赖&quot;&gt;&lt;/a&gt;1. 安装相关依赖&lt;/h3&gt;&lt;pre class=&quot;language-b</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.yayiyo.cn/categories/Linux/"/>
    
    
    <category term="学习笔记 rabbitmq linux" scheme="https://www.yayiyo.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-rabbitmq-linux/"/>
    
  </entry>
  
  <entry>
    <title>打印从1到最大的n位数(Golang)《剑指offer》</title>
    <link href="https://www.yayiyo.cn/2019/09/22/da-yin-cong-1-dao-zui-da-de-n-wei-shu-golang-jian-zhi-offer/"/>
    <id>https://www.yayiyo.cn/2019/09/22/da-yin-cong-1-dao-zui-da-de-n-wei-shu-golang-jian-zhi-offer/</id>
    <published>2019-09-22T11:59:17.000Z</published>
    <updated>2023-12-05T02:02:03.977Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>题目：输入数字n，按顺序打印从1到最大的n位十进制数。比如输入3，则打印出1,2,3一直到最大的3位数999。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Print1ToMaxOfDigits</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>number <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token function">print1ToMaxOfDigitsRecursively</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">print1ToMaxOfDigitsRecursively</span><span class="token punctuation">(</span>number <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> length <span class="token builtin">int</span><span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> index <span class="token operator">==</span> length<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token function">printNumber</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>number<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token function">print1ToMaxOfDigitsRecursively</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> length<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printNumber</span><span class="token punctuation">(</span>number <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> isBeginning0 <span class="token operator">=</span> <span class="token boolean">true</span>length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> isBeginning0 <span class="token operator">&amp;&amp;</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>isBeginning0 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token operator">!</span>isBeginning0 <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> i <span class="token operator">==</span> length<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Github: <a href="https://github.com/echaser/algorithm">https://github.com/echaser/algorithm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;题目：输入数字n，按顺序打印从1到最大的n位十进制数。比如输入3，则打印出</summary>
      
    
    
    
    <category term="算法" scheme="https://www.yayiyo.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="剑指offer golang Go" scheme="https://www.yayiyo.cn/tags/%E5%89%91%E6%8C%87offer-golang-Go/"/>
    
  </entry>
  
  <entry>
    <title>旋转数组的最小数字(Golang)《剑指offer》</title>
    <link href="https://www.yayiyo.cn/2019/08/02/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-golang-jian-zhi-offer/"/>
    <id>https://www.yayiyo.cn/2019/08/02/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-golang-jian-zhi-offer/</id>
    <published>2019-08-02T09:33:43.000Z</published>
    <updated>2023-12-05T02:02:03.978Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如：数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。</p><pre class="language-none"><code class="language-none">注意：本题中应充分考虑特殊情况</code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">finMinNum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>start <span class="token operator">:=</span> <span class="token number">0</span>end <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>mid <span class="token operator">:=</span> start <span class="token comment">// 如果第一个数字小于最后一个数字，那就说明该数组是有序的，直接返回第一个数字</span><span class="token keyword">for</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> end<span class="token operator">-</span>start <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>mid <span class="token operator">=</span> end<span class="token keyword">break</span><span class="token punctuation">}</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token comment">// 如果第一个、最后一个和中间的数字都相等，那么只能按照顺序查找</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">finMinInOrder</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token punctuation">{</span>start <span class="token operator">=</span> mid<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token punctuation">{</span>end <span class="token operator">=</span> mid<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h6 id="完整代码请参考-https-github-com-echaser-algorithm"><a href="#完整代码请参考-https-github-com-echaser-algorithm" class="headerlink" title="完整代码请参考:https://github.com/echaser/algorithm"></a>完整代码请参考:<a href="https://github.com/echaser/algorithm">https://github.com/echaser/algorithm</a></h6>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h3&gt;&lt;p&gt;题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的</summary>
      
    
    
    
    <category term="算法" scheme="https://www.yayiyo.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法 数组" scheme="https://www.yayiyo.cn/tags/%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>重建二叉树(Golang)《剑指offer》</title>
    <link href="https://www.yayiyo.cn/2019/07/20/chong-jian-er-cha-shu-golang-jian-zhi-offer/"/>
    <id>https://www.yayiyo.cn/2019/07/20/chong-jian-er-cha-shu-golang-jian-zhi-offer/</id>
    <published>2019-07-20T10:32:06.000Z</published>
    <updated>2023-12-05T02:02:03.980Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>输入某个二叉树的前序遍历和中序遍历的结果，请重建该二叉树。<br>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如：输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建如图所示的二叉树并输出它的头节点。</p><p><img src="https://img-blog.csdnimg.cn/20190720180751920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="题目"></p><h4 id="主要代码如下："><a href="#主要代码如下：" class="headerlink" title="主要代码如下："></a>主要代码如下：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> BinaryTreeNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>Value     <span class="token builtin">int</span>LeftNode  <span class="token operator">*</span>BinaryTreeNodeRightNode <span class="token operator">*</span>BinaryTreeNode<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewBinaryTreeNode</span><span class="token punctuation">(</span>value <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>BinaryTreeNode <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>BinaryTreeNode<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">CreateTreeConstruct</span><span class="token punctuation">(</span>preorder <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> inorder <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>BinaryTreeNode <span class="token punctuation">{</span><span class="token keyword">if</span> preorder <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> inorder <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">createTreeConstruct</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>preorder<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>inorder<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 参数：前序遍历数组，前序起始位置，中序遍历数组，中序起始位置</span><span class="token keyword">func</span> <span class="token function">createTreeConstruct</span><span class="token punctuation">(</span>preorder <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> preStart <span class="token builtin">int</span><span class="token punctuation">,</span> preEnd <span class="token builtin">int</span><span class="token punctuation">,</span> inorder <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> inStart <span class="token builtin">int</span><span class="token punctuation">,</span> inEnd <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>BinaryTreeNode <span class="token punctuation">{</span><span class="token keyword">if</span> preStart <span class="token operator">&gt;</span> preEnd <span class="token operator">||</span> inStart <span class="token operator">&gt;</span> inEnd <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// 前序遍历序列的第一个数字是根节点的值</span>root <span class="token operator">:=</span> <span class="token function">NewBinaryTreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 找到中序遍历数组中根节点的位置</span><span class="token keyword">var</span> rootIndex <span class="token builtin">int</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>inorder<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> root<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>rootIndex <span class="token operator">=</span> i<span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 计算左子树和右子树的节点数</span>leftCount <span class="token operator">:=</span> rootIndex <span class="token operator">-</span> inStart<span class="token comment">//rightCount := inEnd - rootIndex</span><span class="token comment">// 左子树递归</span>root<span class="token punctuation">.</span>LeftNode <span class="token operator">=</span> <span class="token function">createTreeConstruct</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> preStart<span class="token operator">+</span>leftCount<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inStart<span class="token punctuation">,</span> rootIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>RightNode <span class="token operator">=</span> <span class="token function">createTreeConstruct</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart<span class="token operator">+</span>leftCount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> preEnd<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> rootIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> inEnd<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">}</span><span class="token comment">// 前序遍历</span><span class="token keyword">func</span> <span class="token function">printPreOrder</span><span class="token punctuation">(</span>root <span class="token operator">*</span>BinaryTreeNode<span class="token punctuation">,</span> order <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>order <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> root<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token keyword">if</span> root<span class="token punctuation">.</span>LeftNode <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>order <span class="token operator">=</span> <span class="token function">printPreOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>LeftNode<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> root<span class="token punctuation">.</span>RightNode <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>order <span class="token operator">=</span> <span class="token function">printPreOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>RightNode<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> order<span class="token punctuation">}</span><span class="token comment">// 中序遍历</span><span class="token keyword">func</span> <span class="token function">printInOrder</span><span class="token punctuation">(</span>root <span class="token operator">*</span>BinaryTreeNode<span class="token punctuation">,</span> order <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">if</span> root<span class="token punctuation">.</span>LeftNode <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>order <span class="token operator">=</span> <span class="token function">printInOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>LeftNode<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">}</span>order <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> root<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token keyword">if</span> root<span class="token punctuation">.</span>RightNode <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>order <span class="token operator">=</span> <span class="token function">printInOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>RightNode<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> order<span class="token punctuation">}</span></code></pre><p>写完代码之后又写了前序遍历和中序遍历自己测试了一下，结果是对的。分析过程就不写了，那本书上写的很详细，如果还是不懂的可以评论联系我。</p><pre class="language-bash" data-language="bash"><code class="language-bash">说明：前序遍历的数组中第一个位置是根节点，中序遍历数组中根节点的左边第左子树，右边是右子树。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h4 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h4&gt;&lt;p&gt;输入某个二叉树的前序遍历和中序遍历的结果，请重建该二叉树。&lt;br&gt;</summary>
      
    
    
    
    <category term="算法" scheme="https://www.yayiyo.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://www.yayiyo.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 128. 最长连续序列(Golang)</title>
    <link href="https://www.yayiyo.cn/2019/07/11/leetcode-128.zui-chang-lian-xu-xu-lie-golang/"/>
    <id>https://www.yayiyo.cn/2019/07/11/leetcode-128.zui-chang-lian-xu-xu-lie-golang/</id>
    <published>2019-07-11T02:42:57.000Z</published>
    <updated>2023-12-05T02:02:03.965Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 O(n)。</p><p>示例:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">100</span>, <span class="token number">4</span>, <span class="token number">200</span>, <span class="token number">1</span>, <span class="token number">3</span>, <span class="token number">2</span><span class="token punctuation">]</span>输出: <span class="token number">4</span></code></pre><p>解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">}</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>length <span class="token operator">:=</span> <span class="token number">1</span>leng <span class="token operator">:=</span> <span class="token number">1</span>first <span class="token operator">:=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> first <span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> first<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">{</span>first <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>leng<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span> leng <span class="token operator">&gt;</span> length <span class="token punctuation">{</span>length <span class="token operator">=</span> leng<span class="token punctuation">}</span>first <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>leng <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>leng<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个未排序的整数数组，找出最长连续序列的长度。&lt;/p&gt;
&lt;p&gt;要求算法的时间复杂度为 O(n)。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>EKT搭建私链</title>
    <link href="https://www.yayiyo.cn/2019/01/02/ekt-da-jian-si-lian/"/>
    <id>https://www.yayiyo.cn/2019/01/02/ekt-da-jian-si-lian/</id>
    <published>2019-01-02T14:41:09.000Z</published>
    <updated>2023-12-05T02:02:03.955Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h5 id="1-首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令会编译EKT项目cmd包下的两个main-go文件"><a href="#1-首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令会编译EKT项目cmd包下的两个main-go文件" class="headerlink" title="1.首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令会编译EKT项目cmd包下的两个main.go文件"></a>1.首先，打开终端，将目录切换到<code>EKT</code>路径下，输入命令<code>make</code>，此命令会编译<code>EKT</code>项目<code>cmd</code>包下的两个<code>main.go</code>文件</h5><h5 id="2-编译完成之后，会在EKT目录下产生一个bin目录，将路径切换到bin目录中，新建一个创世区块文件genesis-json，内容类似下面这样"><a href="#2-编译完成之后，会在EKT目录下产生一个bin目录，将路径切换到bin目录中，新建一个创世区块文件genesis-json，内容类似下面这样" class="headerlink" title="2.编译完成之后，会在EKT目录下产生一个bin目录，将路径切换到bin目录中，新建一个创世区块文件genesis.json，内容类似下面这样"></a>2.编译完成之后，会在<code>EKT</code>目录下产生一个<code>bin</code>目录，将路径切换到<code>bin</code>目录中，新建一个创世区块文件<code>genesis.json</code>，内容类似下面这样</h5><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"v2.0"</span><span class="token punctuation">,</span>  <span class="token comment">//版本号</span>    <span class="token property">"dbPath"</span><span class="token operator">:</span> <span class="token string">"db/"</span><span class="token punctuation">,</span>    <span class="token comment">//数据库路径</span>    <span class="token property">"logPath"</span><span class="token operator">:</span> <span class="token string">"log/ekt8.log"</span><span class="token punctuation">,</span> <span class="token comment">// 日志路径</span>    <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//是否开启debug模式</span>    <span class="token property">"env"</span><span class="token operator">:</span> <span class="token string">"localnet"</span><span class="token punctuation">,</span> <span class="token comment">//网络配置</span>    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 本地节点</span>        <span class="token property">"account"</span><span class="token operator">:</span> <span class="token string">"56b92dfdbfbd7d32ea5deb6ca05ea8d695ed727c9d9a7536e345646608e339dc"</span><span class="token punctuation">,</span>        <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>        <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">19951</span><span class="token punctuation">,</span>        <span class="token property">"addressVersion"</span><span class="token operator">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 下面是创世区块中的账户信息，设为自己的节点账号</span>    <span class="token property">"privateKey"</span><span class="token operator">:</span> <span class="token string">"a9bdb75fa6f706e3b95d7b5c01bc9b4a546392782d2cf593e04c13d1faa9f01e"</span><span class="token punctuation">,</span>    <span class="token property">"genesisBlock"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"56b92dfdbfbd7d32ea5deb6ca05ea8d695ed727c9d9a7536e345646608e339dc"</span><span class="token punctuation">,</span>            <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">50000000000000000</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h5 id="3-同样在bin目录下创建一个localnet-json，内容如下"><a href="#3-同样在bin目录下创建一个localnet-json，内容如下" class="headerlink" title="3.同样在bin目录下创建一个localnet.json，内容如下"></a>3.同样在<code>bin</code>目录下创建一个<code>localnet.json</code>，内容如下</h5><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"56b92dfdbfbd7d32ea5deb6ca05ea8d695ed727c9d9a7536e345646608e339dc"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">19951</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h5 id="4-我们会发现bin目录下还有两个文件，一个是ecli，另外一个是enode，这两个都是可执行文件，可以用-ecli-account-new命令来创建账号"><a href="#4-我们会发现bin目录下还有两个文件，一个是ecli，另外一个是enode，这两个都是可执行文件，可以用-ecli-account-new命令来创建账号" class="headerlink" title="4.我们会发现bin目录下还有两个文件，一个是ecli，另外一个是enode，这两个都是可执行文件，可以用./ecli account new命令来创建账号"></a>4.我们会发现<code>bin</code>目录下还有两个文件，一个是<code>ecli</code>，另外一个是<code>enode</code>，这两个都是可执行文件，可以用<code>./ecli account new</code>命令来创建账号</h5><p><img src="https://img-blog.csdnimg.cn/20181221193946715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="创建账号"></p><h5 id="5-接下来启动EKT：在终端输入-enode，EKT私链搭建完成-当前窗口不要关闭，进行转账等其他命令时，要新建一个终端"><a href="#5-接下来启动EKT：在终端输入-enode，EKT私链搭建完成-当前窗口不要关闭，进行转账等其他命令时，要新建一个终端" class="headerlink" title="5.接下来启动EKT：在终端输入./enode，EKT私链搭建完成(当前窗口不要关闭，进行转账等其他命令时，要新建一个终端)"></a>5.接下来启动<code>EKT</code>：在终端输入<code>./enode</code>，<code>EKT</code>私链搭建完成(当前窗口不要关闭，进行转账等其他命令时，要新建一个终端)</h5><p><img src="https://img-blog.csdnimg.cn/20181221194028266.png" alt="启动EKT"><br>EKT还有一些命令：</p><h4 id="ecli相关"><a href="#ecli相关" class="headerlink" title="ecli相关"></a>ecli相关</h4><p>转账交易：<code>./ecli transaction send</code><br>1.输入私钥<br>2.输入币种，可不输入，默认<code>EKT</code><br>3.输入转账金额，注意这里说的金额以最小值为单位的，比如你要转<code>10</code>个<code>EKT</code>，需要输入1000000000(后面有<code>8</code>个<code>0</code>)<br>4.输入收款方地址<br>5.输入转账备注内容<br>终端会输出一个<code>json</code>字符串，复制<code>result</code>后面的字符串(交易地址)，打开浏览器，输入<code>http://localhost:19951/db/api/getByHex?hash=txId(刚才复制的内容)</code>即可查询交易详情<br><img src="https://img-blog.csdnimg.cn/20181221194558492.png" alt="转账"><br><img src="https://img-blog.csdnimg.cn/20181221194058732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="交易详情"></p><h4 id="enode相关"><a href="#enode相关" class="headerlink" title="enode相关"></a>enode相关</h4><pre class="language-bash" data-language="bash"><code class="language-bash">./enode -h 帮助./enode -v 输出版本并退出./enode -m 同步模式：<span class="token variable"><span class="token variable">`</span>full <span class="token function">sync</span><span class="token variable">`</span></span>,<span class="token variable"><span class="token variable">`</span>fast <span class="token function">sync</span><span class="token variable">`</span></span>或者<span class="token variable"><span class="token variable">`</span>delegate<span class="token variable">`</span></span>，默认<span class="token variable"><span class="token variable">`</span>adaptive<span class="token variable">`</span></span>./enode -c 设置<span class="token variable"><span class="token variable">`</span>genesis.json<span class="token variable">`</span></span>并启动，默认当前目录下的<span class="token variable"><span class="token variable">`</span>genesis.json<span class="token variable">`</span></span></code></pre><p>EKT官网：<a href="https://ekt8.io/">https://ekt8.io/</a><br>源码地址：<a href="https://github.com/EducationEKT/EKT">https://github.com/EducationEKT/EKT</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h5 id=&quot;1-首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令会编译EKT项目cmd包下的两个main-go文件&quot;&gt;&lt;a href=&quot;#1-首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令</summary>
      
    
    
    
    <category term="区块链" scheme="https://www.yayiyo.cn/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="区块链 EKT" scheme="https://www.yayiyo.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE-EKT/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 234. 回文链表(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/11/06/leetcode-234.hui-wen-lian-biao-golang/"/>
    <id>https://www.yayiyo.cn/2018/11/06/leetcode-234.hui-wen-lian-biao-golang/</id>
    <published>2018-11-06T14:10:48.000Z</published>
    <updated>2023-12-05T02:02:03.966Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>请判断一个链表是否为回文链表。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>输出: <span class="token boolean">false</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">1</span>输出: <span class="token boolean">true</span></code></pre><p>进阶：<br>你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><p>思路：遍历链表，将所有节点按顺序存储到<code>map</code>集合中，通过<code>map</code>的键从两头开始遍历对比，值不相等返回<code>false</code>。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>ListNode<span class="token punctuation">)</span>i <span class="token operator">:=</span> <span class="token number">0</span>m <span class="token operator">=</span> <span class="token function">TraverListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span>start <span class="token operator">:=</span> <span class="token number">0</span>end <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">for</span> start <span class="token operator">&lt;=</span> end <span class="token punctuation">{</span><span class="token keyword">if</span> m<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">.</span>Val <span class="token operator">!=</span> m<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>Val <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>start<span class="token operator">++</span>end<span class="token operator">--</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TraverListNode</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>ListNode<span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>ListNode <span class="token punctuation">{</span><span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m<span class="token punctuation">}</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> headi<span class="token operator">++</span><span class="token keyword">return</span> <span class="token function">TraverListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>Next<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;请判断一个链表是否为回文链表。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;输入:</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 17. 电话号码的字母组合(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/10/29/leetcode-17.dian-hua-hao-ma-de-zi-mu-zu-he-golang/"/>
    <id>https://www.yayiyo.cn/2018/10/29/leetcode-17.dian-hua-hao-ma-de-zi-mu-zu-he-golang/</id>
    <published>2018-10-29T14:02:53.000Z</published>
    <updated>2023-12-05T02:02:03.965Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://img-blog.csdnimg.cn/20181029220141185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>示例:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入：“23”  输出：<span class="token punctuation">[</span>“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”<span class="token punctuation">]</span>.</code></pre><p><strong>说明:</strong><br>尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>digits <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">byte</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token char">'2'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'3'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'4'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'5'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'6'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'7'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'8'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'9'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>s <span class="token operator">:=</span> m<span class="token punctuation">[</span>digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>temp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">{</span>temp <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>s <span class="token operator">=</span> temp<span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。&lt;/p&gt;
&lt;p&gt;给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.c</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 11. 盛最多水的容器(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/10/29/leetcode-11.sheng-zui-duo-shui-de-rong-qi-golang/"/>
    <id>https://www.yayiyo.cn/2018/10/29/leetcode-11.sheng-zui-duo-shui-de-rong-qi-golang/</id>
    <published>2018-10-29T14:00:13.000Z</published>
    <updated>2023-12-05T02:02:03.965Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定 n 个非负整数<code>a1，a2，...，an</code>，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p><strong>说明</strong>：你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="https://img-blog.csdnimg.cn/20181029215852968.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p>示例:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">1,8</span>,6,2,5,4,8,3,7<span class="token punctuation">]</span>输出: <span class="token number">49</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">&lt;</span> j <span class="token punctuation">{</span>area <span class="token operator">:=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">minNum</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> area<span class="token operator">&gt;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> area                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">minNum</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">&gt;</span> j <span class="token punctuation">{</span><span class="token keyword">return</span> j<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定 n 个非负整数&lt;code&gt;a1，a2，...，an&lt;/code&gt;，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 8. 字符串转整数 (atoi)(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/10/29/leetcode-8.zi-fu-chuan-zhuan-zheng-shu-atoi-golang/"/>
    <id>https://www.yayiyo.cn/2018/10/29/leetcode-8.zi-fu-chuan-zhuan-zheng-shu-atoi-golang/</id>
    <published>2018-10-29T13:56:19.000Z</published>
    <updated>2023-12-05T02:02:03.966Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>实现 <code>atoi</code>，将字符串转为整数。</p><p>该函数首先根据需要丢弃任意多的空格字符，直到找到第一个非空格字符为止。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。</p><p>当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。</p><p>若函数不能执行有效的转换，返回 0。</p><p>说明：</p><p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。如果数值超过可表示的范围，则返回 INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"42"</span>输出: <span class="token number">42</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"   -42"</span>输出: -42解释: 第一个非空白字符为 <span class="token string">'-'</span>, 它是一个负号。     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</code></pre><p>示例 3:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"4193 with words"</span>输出: <span class="token number">4193</span>解释: 转换截止于数字 <span class="token string">'3'</span> ，因为它的下一个字符不为数字。</code></pre><p>示例 4:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"words and 987"</span>输出: <span class="token number">0</span>解释: 第一个非空字符是 <span class="token string">'w'</span>, 但它不是数字或正、负号。     因此无法执行有效的转换。</code></pre><p>示例 5:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"-91283472332"</span>输出: -2147483648解释: 数字 <span class="token string">"-91283472332"</span> 超过 <span class="token number">32</span> 位有符号整数范围。      因此返回 INT_MIN <span class="token punctuation">(</span>−231<span class="token punctuation">)</span> 。</code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>num <span class="token operator">:=</span> <span class="token number">0</span>s <span class="token operator">:=</span> <span class="token string">""</span>flag <span class="token operator">:=</span> <span class="token boolean">false</span>str <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token keyword">if</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">{</span><span class="token keyword">if</span> flag <span class="token operator">||</span>s <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token punctuation">{</span><span class="token keyword">if</span> flag <span class="token operator">||</span> s <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span>flag <span class="token operator">=</span> <span class="token boolean">true</span>s <span class="token operator">+=</span> <span class="token string">"-"</span><span class="token keyword">continue</span><span class="token punctuation">}</span>s <span class="token operator">+=</span> <span class="token function">string</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>num<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">&gt;</span> math<span class="token punctuation">.</span>MaxInt32 <span class="token punctuation">{</span><span class="token keyword">return</span> math<span class="token punctuation">.</span>MaxInt32<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> num <span class="token operator">&lt;</span> math<span class="token punctuation">.</span>MinInt32 <span class="token punctuation">{</span><span class="token keyword">return</span> math<span class="token punctuation">.</span>MinInt32<span class="token punctuation">}</span><span class="token keyword">return</span> num<span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;实现 &lt;code&gt;atoi&lt;/code&gt;，将字符串转为整数。&lt;/p&gt;
&lt;p&gt;该函数首先根据需要丢弃任意多的空格字符，直到找到第一个非空格字符为止。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode  628. 三个数的最大乘积(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/10/22/leetcode-628.san-ge-shu-de-zui-da-cheng-ji-golang/"/>
    <id>https://www.yayiyo.cn/2018/10/22/leetcode-628.san-ge-shu-de-zui-da-cheng-ji-golang/</id>
    <published>2018-10-22T13:41:16.000Z</published>
    <updated>2023-12-05T02:02:03.963Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">1,2</span>,3<span class="token punctuation">]</span>输出: <span class="token number">6</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span>输出: <span class="token number">24</span></code></pre><p>注意:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.给定的整型数组长度范围是<span class="token punctuation">[</span><span class="token number">3,104</span><span class="token punctuation">]</span>，数组中所有的元素范围是<span class="token punctuation">[</span>-1000, <span class="token number">1000</span><span class="token punctuation">]</span>。<span class="token number">2</span>.输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。</code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maximumProduct</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>a <span class="token operator">:=</span> nums<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">:=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode  441. 排列硬币(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/10/22/leetcode-441.pai-lie-ying-bi-golang/"/>
    <id>https://www.yayiyo.cn/2018/10/22/leetcode-441.pai-lie-ying-bi-golang/</id>
    <published>2018-10-22T13:37:36.000Z</published>
    <updated>2023-12-05T02:02:03.963Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。</p><p>给定一个数字 n，找出可形成完整阶梯行的总行数。</p><p>n 是一个非负整数，并且在32位有符号整型的范围内。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">n <span class="token operator">=</span> <span class="token number">5</span>硬币可排列成以下几行:¤¤ ¤¤ ¤因为第三行不完整，所以返回2.</code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">n <span class="token operator">=</span> <span class="token number">8</span>硬币可排列成以下几行:¤¤ ¤¤ ¤ ¤¤ ¤因为第四行不完整，所以返回3.</code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">arrangeCoins</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> n <span class="token operator">==</span> i <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n <span class="token operator">&lt;</span> i <span class="token punctuation">{</span><span class="token keyword">return</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>n <span class="token operator">=</span> n <span class="token operator">-</span> i<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。&lt;/p&gt;
&lt;p&gt;给定一个数字 n，找出可形成完整阶梯行的总行数。&lt;/p&gt;
&lt;p&gt;n 是一个非负整数，并且在32位有符号整型的范围内。&lt;/</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode  258. 各位相加(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/10/22/leetcode-258.ge-wei-xiang-jia-golang/"/>
    <id>https://www.yayiyo.cn/2018/10/22/leetcode-258.ge-wei-xiang-jia-golang/</id>
    <published>2018-10-22T13:34:00.000Z</published>
    <updated>2023-12-05T02:02:03.962Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。</p><p>示例:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">38</span>输出: <span class="token number">2</span> 解释: 各位相加的过程为：3 + <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">11</span>, <span class="token number">1</span> + <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span>。 由于 <span class="token number">2</span> 是一位数，所以返回 <span class="token number">2</span>。</code></pre><p>进阶:<br>你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">addDigits</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">for</span> num <span class="token operator">&gt;</span> <span class="token number">9</span> <span class="token punctuation">{</span>str <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">{</span>j<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>num <span class="token operator">+=</span> j<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> num<span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  19. 删除链表的倒数第N个节点(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/10/15/leetcode-19.shan-chu-lian-biao-de-dao-shu-di-n-ge-jie-dian-golang/"/>
    <id>https://www.yayiyo.cn/2018/10/15/leetcode-19.shan-chu-lian-biao-de-dao-shu-di-n-ge-jie-dian-golang/</id>
    <published>2018-10-15T11:16:48.000Z</published>
    <updated>2023-12-05T02:02:03.961Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash">给定一个链表: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span>-<span class="token operator">&gt;</span><span class="token number">4</span>-<span class="token operator">&gt;</span><span class="token number">5</span>, 和 n <span class="token operator">=</span> <span class="token number">2</span>.当删除了倒数第二个节点后，链表变为 <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span>-<span class="token operator">&gt;</span><span class="token number">5</span>.</code></pre><p>说明：</p><p>给定的 n 保证是有效的。</p><p>进阶：</p><p>你能尝试使用一趟扫描实现吗？</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head    <span class="token punctuation">}</span>    fast <span class="token operator">:=</span> head    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> fast <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>        <span class="token keyword">if</span> fast <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>            slow <span class="token operator">:=</span> head    <span class="token keyword">for</span> fast<span class="token punctuation">.</span>Next <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>Next        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>    slow<span class="token punctuation">.</span>Next <span class="token operator">=</span> slow<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next    <span class="token keyword">return</span> head<span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;la</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  414. 第三大的数(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/10/13/leetcode-414.di-san-da-de-shu-golang/"/>
    <id>https://www.yayiyo.cn/2018/10/13/leetcode-414.di-san-da-de-shu-golang/</id>
    <published>2018-10-13T10:26:50.000Z</published>
    <updated>2023-12-05T02:02:03.963Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">2</span>, <span class="token number">1</span><span class="token punctuation">]</span>输出: <span class="token number">1</span>解释: 第三大的数是 <span class="token number">1</span>.</code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">]</span>输出: <span class="token number">2</span>解释: 第三大的数不存在, 所以返回最大的数 <span class="token number">2</span> <span class="token builtin class-name">.</span></code></pre><p>示例 3:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">1</span><span class="token punctuation">]</span>输出: <span class="token number">1</span>解释: 注意，要求返回第三大的数，是指第三大且唯一出现的数。存在两个值为2的数，它们都排第二。</code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">thirdMax</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    n <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>i <span class="token operator">:=</span> <span class="token number">0</span>n <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>n <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>i<span class="token operator">++</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>ln <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">if</span> ln <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token punctuation">{</span><span class="token keyword">return</span> n<span class="token punctuation">[</span>ln<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">return</span> n<span class="token punctuation">[</span>ln<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-languag</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode Golang" scheme="https://www.yayiyo.cn/tags/LeetCode-Golang/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  338. 比特位计数(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/10/11/leetcode-338.bi-te-wei-ji-shu-golang/"/>
    <id>https://www.yayiyo.cn/2018/10/11/leetcode-338.bi-te-wei-ji-shu-golang/</id>
    <published>2018-10-11T15:13:05.000Z</published>
    <updated>2023-12-05T02:02:03.963Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">2</span>输出: <span class="token punctuation">[</span><span class="token number">0,1</span>,1<span class="token punctuation">]</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">5</span>输出: <span class="token punctuation">[</span><span class="token number">0,1</span>,1,2,1,2<span class="token punctuation">]</span></code></pre><p><strong>进阶:</strong></p><ul><li>给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？</li><li>要求算法的空间复杂度为O(n)。</li><li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">countBits</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">&lt;=</span> num <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token punctuation">{</span>b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>count <span class="token operator">:=</span> <span class="token number">0</span>by <span class="token operator">:=</span> <span class="token function">dtob</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> by <span class="token punctuation">{</span><span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>count<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span>b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">}</span>i<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">return</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">dtob</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> num <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>i <span class="token operator">:=</span> num <span class="token operator">%</span> <span class="token number">2</span>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">)</span>num <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">return</span> a<span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; d</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode Golang" scheme="https://www.yayiyo.cn/tags/LeetCode-Golang/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  104. 二叉树的最大深度(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/10/11/leetcode-104.er-cha-shu-de-zui-da-shen-du-golang/"/>
    <id>https://www.yayiyo.cn/2018/10/11/leetcode-104.er-cha-shu-de-zui-da-shen-du-golang/</id>
    <published>2018-10-11T15:07:22.000Z</published>
    <updated>2023-12-05T02:02:03.961Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p><pre class="language-bash" data-language="bash"><code class="language-bash">  <span class="token number">3</span> / <span class="token punctuation">\</span><span class="token number">9</span>  <span class="token number">20</span>  /  <span class="token punctuation">\</span> <span class="token number">15</span>   <span class="token number">7</span></code></pre><p>返回它的最大深度 3 。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for a binary tree node. * type TreeNode struct { *     Val int *     Left *TreeNode *     Right *TreeNode * } */</span><span class="token keyword">func</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    i <span class="token operator">:=</span> <span class="token number">0</span>j <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span>i <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>j <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">if</span> i <span class="token operator">&lt;</span> j <span class="token punctuation">{</span>i<span class="token punctuation">,</span> j <span class="token operator">=</span> j<span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token keyword">return</span> i<span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个二叉树，找出其最大深度。&lt;/p&gt;
&lt;p&gt;二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。&lt;/p&gt;
&lt;p&gt;说明: 叶子节点是指没有子节点的节点。&lt;/p&gt;
&lt;p&gt;示例：&lt;br&gt;给定二叉树 [3,9,20,null</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode Golang" scheme="https://www.yayiyo.cn/tags/LeetCode-Golang/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  83. 删除排序链表中的重复元素(Golang)</title>
    <link href="https://www.yayiyo.cn/2018/10/11/leetcode-83.shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su-golang/"/>
    <id>https://www.yayiyo.cn/2018/10/11/leetcode-83.shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su-golang/</id>
    <published>2018-10-11T15:05:13.000Z</published>
    <updated>2023-12-05T02:02:03.964Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>输出: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span>-<span class="token operator">&gt;</span><span class="token number">3</span>输出: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    curr <span class="token operator">:=</span> head<span class="token keyword">for</span> curr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> curr<span class="token punctuation">.</span>Next <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">if</span> curr<span class="token punctuation">.</span>Val <span class="token operator">==</span> curr<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>curr<span class="token punctuation">.</span>Next <span class="token operator">=</span> curr<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>Next<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> head<span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;la</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.yayiyo.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode Golang" scheme="https://www.yayiyo.cn/tags/LeetCode-Golang/"/>
    
  </entry>
  
</feed>
