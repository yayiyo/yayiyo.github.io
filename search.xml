<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux下Docker安装SonarQube（PostgreSQL）</title>
      <link href="/2021/07/02/linux-xia-docker-an-zhuang-sonarqube-postgresql/"/>
      <url>/2021/07/02/linux-xia-docker-an-zhuang-sonarqube-postgresql/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="http://www.sonarqube.org/"><em>SonarQube</em></a>是一种自动代码审查工具，用于检测代码中的错误、漏洞和代码异味。 它可以与现有的工作流程集成，以支持跨项目分支和拉取请求的持续代码检查。</p><p>本文基于_Linux_操作系统，在_Docker_容器中部署_SonarQube_服务，并进行简单的配置和使用。_SonarQube_在<code>7.8</code>版本之后不再支持_Mysql_数据库，教程选用的是最新版本的<a href="https://www.postgresql.org/"><em>Postgresql</em></a>数据库，_SonarQube_使用的版本是_8.8-community_。</p><h4 id="1-安装Postgresql"><a href="#1-安装Postgresql" class="headerlink" title="1.安装Postgresql"></a>1.安装Postgresql</h4><h5 id="1-1-下载-PostgreSQL镜像"><a href="#1-1-下载-PostgreSQL镜像" class="headerlink" title="1.1 下载 PostgreSQL镜像"></a>1.1 下载 <a href="https://hub.docker.com/_/postgres">PostgreSQL镜像</a></h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull postgres</code></pre><h5 id="1-2-启动容器"><a href="#1-2-启动容器" class="headerlink" title="1.2 启动容器"></a>1.2 启动容器</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -p <span class="token number">5432</span>:5432 -v /data/postgres:/var/lib/postgresql/data -e <span class="token assign-left variable">POSTGRES_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> -e <span class="token assign-left variable">ALLOW_IP_RANGE</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0/0 --name postgres postgres</code></pre><p>参数说明：</p><p>POSTGRES_PASSWORD 是数据库初始密码</p><p>ALLOW_IP_RANGE=0.0.0.0/0 允许任何主机访问</p><h5 id="1-3-进入postgres容器"><a href="#1-3-进入postgres容器" class="headerlink" title="1.3 进入postgres容器"></a>1.3 进入postgres容器</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it postgres <span class="token function">bash</span></code></pre><p><code>注意:</code> 这里的<code>postgres</code>是<code>1.2</code>中<code>--name</code>的参数</p><h5 id="1-4-使用默认用户postgres创建SonarQube数据库"><a href="#1-4-使用默认用户postgres创建SonarQube数据库" class="headerlink" title="1.4 使用默认用户postgres创建SonarQube数据库"></a>1.4 使用默认用户<code>postgres</code>创建<code>SonarQube</code>数据库</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换postgres用户</span><span class="token function">su</span> postgres<span class="token comment"># 进入数据库</span>psql<span class="token comment"># 创建sonar数据库</span>CREATE DATABASE sonar<span class="token punctuation">;</span><span class="token comment"># 退出数据库</span><span class="token punctuation">\</span>q<span class="token comment"># 退出postgres用户</span><span class="token builtin class-name">exit</span><span class="token comment"># 退出容器</span><span class="token builtin class-name">exit</span></code></pre><h4 id="2-部署SonarQube"><a href="#2-部署SonarQube" class="headerlink" title="2. 部署SonarQube"></a>2. 部署SonarQube</h4><h5 id="2-1-下载SonarQube镜像"><a href="#2-1-下载SonarQube镜像" class="headerlink" title="2.1 下载SonarQube镜像"></a>2.1 下载<a href="https://hub.docker.com/_/sonarqube">SonarQube镜像</a></h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull sonarqube:8.8-community</code></pre><h5 id="2-2-创建Volume-可忽略此步骤"><a href="#2-2-创建Volume-可忽略此步骤" class="headerlink" title="2.2 创建Volume(可忽略此步骤)"></a>2.2 创建Volume(可忽略此步骤)</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume create --name sonarqube_data<span class="token function">docker</span> volume create --name sonarqube_logs<span class="token function">docker</span> volume create --name sonarqube_extensions<span class="token function">docker</span> volume create --name sonarqube_conf</code></pre><h5 id="2-3-启动容器"><a href="#2-3-启动容器" class="headerlink" title="2.3 启动容器"></a>2.3 启动容器</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d --name sonarqube <span class="token punctuation">\</span>    -p <span class="token number">9000</span>:9000 <span class="token punctuation">\</span>    -e <span class="token assign-left variable">SONAR_JDBC_URL</span><span class="token operator">=</span>jdbc:postgresql://192.168.14.5:5432/sonar <span class="token punctuation">\</span>    -e <span class="token assign-left variable">SONAR_JDBC_USERNAME</span><span class="token operator">=</span>postgres <span class="token punctuation">\</span>    -e <span class="token assign-left variable">SONAR_JDBC_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span>    -v sonarqube_data:/opt/sonarqube/data <span class="token punctuation">\</span>    -v sonarqube_extensions:/opt/sonarqube/extensions <span class="token punctuation">\</span>    -v sonarqube_logs:/opt/sonarqube/logs <span class="token punctuation">\</span>    -v sonarqube_conf:/opt/sonarqube/conf <span class="token punctuation">\</span>    sonarqube:8.8-community</code></pre><p><code>docker logs \-f sonarqube</code> 查看日志发现报错</p><p><img src="https://img-blog.csdnimg.cn/20210702112812512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="错误日志"></p><p>修改配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysctl.conf</code></pre><p>最后一行添加<code>vm.max_map_count=262144</code>，保存退出<br>加载使其生效</p><pre class="language-bash" data-language="bash"><code class="language-bash">sysctl -p</code></pre><p>重新启动容器</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start sonarqube</code></pre><p>浏览器访问<code>http://主机IP:9000</code>,使用默认账号(admin)密码(admin)登录，根据提示修改原始密码</p><h4 id="3-配置SonalQube"><a href="#3-配置SonalQube" class="headerlink" title="3.配置SonalQube"></a>3.配置SonalQube</h4><h5 id="3-1-生成密钥"><a href="#3-1-生成密钥" class="headerlink" title="3.1 生成密钥"></a>3.1 生成密钥</h5><p>_Administration &gt; Security &gt; Users_，选择用户_Tokens_一栏，根据提示在_Generate Tokens_输入框中输入Token名称，点击_Generate_生成Token，点击_Copy_复制保存。</p><p><img src="https://img-blog.csdnimg.cn/20210702113013570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="找到Token生成"><br><img src="https://img-blog.csdnimg.cn/2021070211310418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="生成Token"></p><p>**<code>注意</code>**：这里的复制_Token_界面一旦关闭，无法再次查看_Token_内容，请妥善保存</p><h5 id="3-2-用户Token"><a href="#3-2-用户Token" class="headerlink" title="3.2 用户Token"></a>3.2 用户Token</h5><p>_Token_可以调用_SonarQube_相关API，以进行调试及开发。</p><h6 id="3-2-1-代码调试（以GO为例）"><a href="#3-2-1-代码调试（以GO为例）" class="headerlink" title="3.2.1 代码调试（以GO为例）"></a>3.2.1 代码调试（以GO为例）</h6><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"net/http"</span><span class="token string">"net/url"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">var</span> createPro <span class="token operator">=</span> <span class="token string">"http://192.168.14.5:9000/api/projects/create"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>v <span class="token operator">:=</span> url<span class="token punctuation">.</span>Values<span class="token punctuation">{</span><span class="token punctuation">}</span>v<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"project"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"visibility"</span><span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> createPro<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// 这里的username可直接使用生成的Token，无需密码；或直接用账号密码进行验证</span>req<span class="token punctuation">.</span><span class="token function">SetBasicAuth</span><span class="token punctuation">(</span><span class="token string">"3cf069236f72e95a64aad2b5714fb717ca080249"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span>DefaultClient<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span>data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h6 id="3-2-2-Postman调试"><a href="#3-2-2-Postman调试" class="headerlink" title="3.2.2 Postman调试"></a>3.2.2 Postman调试</h6><ol><li><p>填写请求路径</p></li><li><p>点击_Authorization_，Type选择_Basic Auth_，在_username_中填写刚才生成的_Token_<img src="https://img-blog.csdnimg.cn/20210702113243936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="Authorization"></p></li><li><p>点击_Body_，选择_x-www-form-urlencoded_，填写所需_Key-Value_参数</p></li><li><p>发送请求<br><img src="https://img-blog.csdnimg.cn/20210702113328298.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="发送请求"></p></li></ol><h5 id="3-2-汉化-可选"><a href="#3-2-汉化-可选" class="headerlink" title="3.2 汉化(可选)"></a>3.2 汉化(可选)</h5><p><em>Administration &gt; Marketplace &gt; Plugins</em>,搜索_Chinese_，选择对应插件安装，稍等片刻即可安装成功，页面上方会出现_重启服务_和_重置_选择按钮，按需选择就行了，个人觉得英文界面好用一些<br><img src="https://img-blog.csdnimg.cn/20210702113350625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="汉化"></p><h4 id="4-SonarQube的使用"><a href="#4-SonarQube的使用" class="headerlink" title="4.SonarQube的使用"></a>4.SonarQube的使用</h4><h5 id="4-1-安装SonarScanner-其他安装方式请参照官方文档"><a href="#4-1-安装SonarScanner-其他安装方式请参照官方文档" class="headerlink" title="4.1 安装SonarScanner(其他安装方式请参照官方文档)"></a>4.1 安装SonarScanner(其他安装方式请参照<a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/"><em>官方文档</em></a>)</h5><h6 id="4-1-1-下载二进制安装包"><a href="#4-1-1-下载二进制安装包" class="headerlink" title="4.1.1 下载二进制安装包"></a>4.1.1 下载二进制安装包</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip</code></pre><h6 id="4-1-2-解压"><a href="#4-1-2-解压" class="headerlink" title="4.1.2 解压"></a>4.1.2 解压</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> sonar-scanner-cli-4.6.2.2472-linux.zip -d /usr/local/</code></pre><h6 id="4-1-3-添加到PATH（建立软连接）"><a href="#4-1-3-添加到PATH（建立软连接）" class="headerlink" title="4.1.3 添加到PATH（建立软连接）"></a>4.1.3 添加到PATH（建立软连接）</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s /usr/local/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner /usr/bin/<span class="token function">ln</span> -s /usr/local/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner-debug /usr/bin/</code></pre><p>测试安装是否成功</p><pre class="language-bash" data-language="bash"><code class="language-bash">sonar-scanner -h</code></pre><p>输出如下信息，证明安装无误</p><pre class="language-bash" data-language="bash"><code class="language-bash">INFO: INFO: usage: sonar-scanner <span class="token punctuation">[</span>options<span class="token punctuation">]</span>INFO: INFO: Options:INFO:  -D,--define <span class="token operator">&lt;</span>arg<span class="token operator">&gt;</span>     Define propertyINFO:  -h,--help             Display <span class="token builtin class-name">help</span> informationINFO:  -v,--version          Display version informationINFO:  -X,--debug            Produce execution debug output</code></pre><h5 id="4-2-生成扫描代码"><a href="#4-2-生成扫描代码" class="headerlink" title="4.2 生成扫描代码"></a>4.2 生成扫描代码</h5><h6 id="4-2-1-创建项目"><a href="#4-2-1-创建项目" class="headerlink" title="4.2.1 创建项目"></a>4.2.1 创建项目</h6><ol><li><p>登录_SonarQube_服务界面，点击_Create new project &gt; Manually_或右上角_Add project &gt; Manually_</p></li><li><p>输入合法的_Project key_和_Display name_，点击_Set up_<img src="https://img-blog.csdnimg.cn/20210702113628479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="create project"></p></li><li><p>填写一个_Token_名称生成新的_Token_，或使用上面生成的_Token_，点击_Continue_继续下一步<img src="https://img-blog.csdnimg.cn/20210702113707751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="填写Token"></p></li><li><p>选择合适选项，生成如下扫描代码(因为之前已经安装好_SonarScanner_，故忽略_Download_步骤)</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210702113834576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="生成扫描代码"></p><pre class="language-bash" data-language="bash"><code class="language-bash">sonar-scanner <span class="token punctuation">\</span>  -Dsonar.projectKey<span class="token operator">=</span>test <span class="token punctuation">\</span>  -Dsonar.sources<span class="token operator">=</span>. <span class="token punctuation">\</span>  -Dsonar.host.url<span class="token operator">=</span>http://192.168.14.5:9000 <span class="token punctuation">\</span>  -Dsonar.login<span class="token operator">=</span>3cf069236f72e95a64aad2b5714fb717ca080249</code></pre><p>如果你想获取更详细的_Debug_信息，可在命令后面添加以下任一参数</p><pre class="language-bash" data-language="bash"><code class="language-bash">-X，--verbose, -Dsonar.verbose<span class="token operator">=</span>true</code></pre><p>更多参数请参照<a href="https://docs.sonarqube.org/latest/analysis/analysis-parameters/"><em>官方文档</em></a></p><p>参数解析：</p><pre class="language-bash" data-language="bash"><code class="language-bash">-Dsonar.projectKey 项目名称，扫描完毕后会将数据发送给对应的项目-Dsonar.sources 代码目录，默认值是<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">.</span><span class="token variable">`</span></span>，表示当前目录，故该命令应在代码根目录下执行-Dsonar.host.url 服务器地址-Dsonar.login 登录Token</code></pre><h5 id="4-3-执行扫描"><a href="#4-3-执行扫描" class="headerlink" title="4.3 执行扫描"></a>4.3 执行扫描</h5><p>点击_Copy_复制扫描代码，在已安装_SonarScanner_的服务上的代码根目录执行<br>出现如下日志说明扫描完毕，此时可刷新管理界面或直接访问日志中的_<a href="http://192.168.14.5:9000/dashboard/?id=test">http://192.168.14.5:9000/dashboard\?id=test</a>_ 查看扫描结果</p><pre class="language-bash" data-language="bash"><code class="language-bash">INFO: Analysis report generated <span class="token keyword">in</span> 114ms, <span class="token function">dir</span> <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">156</span> KBINFO: Analysis report compressed <span class="token keyword">in</span> 299ms, <span class="token function">zip</span> <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">81</span> KBINFO: Analysis report uploaded <span class="token keyword">in</span> 174msINFO: ANALYSIS SUCCESSFUL, you can browse http://192.168.14.5:9000/dashboard?id<span class="token operator">=</span>testINFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis reportINFO: More about the report processing at http://192.168.14.5:9000/api/ce/task?id<span class="token operator">=</span>AXplL1OzMN_oVHnT4W6tINFO: Analysis total time: <span class="token number">8.154</span> sINFO: ------------------------------------------------------------------------INFO: EXECUTION SUCCESSINFO: ------------------------------------------------------------------------INFO: Total time: <span class="token number">13</span>.451sINFO: Final Memory: 13M/47MINFO: ------------------------------------------------------------------------</code></pre><p><em>本文是根据学习笔记整理而成，如有错误或不当之处，望各位读者海涵，同时欢迎各位留言或<a href="mailto:luckydog612@163.com">Email</a>批评指正，不胜感激。</em></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux linux docker postgresql SonarQube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装MySQL5.7（详细而简单）</title>
      <link href="/2020/07/19/linux-an-zhuang-mysql5.7-xiang-xi-er-jian-dan/"/>
      <url>/2020/07/19/linux-an-zhuang-mysql5.7-xiang-xi-er-jian-dan/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/yum.repos.d/mysql-community.repo</code></pre><p><em>将以下代码复制进去</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Enable to use MySQL 5.7</span><span class="token punctuation">[</span>mysql57-community<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>MySQL <span class="token number">5.7</span> Community Server<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://repo.mysql.com/yum/mysql-5.7-community/el/7/<span class="token variable">$basearch</span>/<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</code></pre><p><em>安装</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> mysql-community-server</code></pre><p><em>权限设置</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> mysql:mysql -R /var/lib/mysql</code></pre><p><em>初始化</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">mysqld --initialize</code></pre><p><em>启动</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld</code></pre><p>如果报错：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Job <span class="token keyword">for</span> mysqld.service failed because the control process exited with error code. See <span class="token string">"systemctl status mysqld.service"</span> and <span class="token string">"journalctl -xe"</span> <span class="token keyword">for</span> details.</code></pre><p><em><code>Do this and star mysql again</code></em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf /var/lib/mysql</code></pre><p><em>查看运行状态</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl status mysqld</code></pre><p><em>获取默认密码并登陆MySQL</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.logmysql -uroot -puse mysql<span class="token punctuation">;</span>   <span class="token comment">#这一步如果报错，类似于下面这样，直接跳转下一步</span>ERROR <span class="token number">1820</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: You must reset your password using ALTER <span class="token environment constant">USER</span> statement before executing this statement.</code></pre><p><em>重置密码（<code>密码尽量包含大小写以及数字，否则可能设置不成功，切记：复杂</code>）</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'Abc123'</span><span class="token punctuation">;</span></code></pre><p><em>开启远程登录(如果需要远程连接的话)</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">select</span> user,host from user<span class="token punctuation">;</span></code></pre><p><em><code>修改前</code></em></p><table><thead><tr><th>user</th><th>host</th></tr></thead><tbody><tr><td>mysql.session</td><td>localhost</td></tr><tr><td>mysql.sys</td><td>localhost</td></tr><tr><td>root</td><td>localhost</td></tr></tbody></table><pre class="language-bash" data-language="bash"><code class="language-bash">update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">'%'</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span></code></pre><p><em><code>修改后</code></em></p><table><thead><tr><th>user</th><th>host</th></tr></thead><tbody><tr><td>mysql.session</td><td>localhost</td></tr><tr><td>mysql.sys</td><td>localhost</td></tr><tr><td>root</td><td>%</td></tr></tbody></table><p><em>刷新权限</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">flush privileges<span class="token punctuation">;</span></code></pre><p><em><code>其他参考命令</code></em></p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld.service                              <span class="token comment">#停止firewall</span>systemctl disable firewalld.service                           <span class="token comment">#禁止firewall开机启动</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp --permanent    <span class="token comment">#开放端口 </span>firewall-cmd --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">3306</span>/tcp --permanent <span class="token comment">#关闭端口</span>firewall-cmd --reload                                         <span class="token comment">#重新载入以生效</span>firewall-cmd --list-ports                                     <span class="token comment">#查看开放端口列表</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 mysql linux centos 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ的安装和使用（Linux）</title>
      <link href="/2020/07/19/rabbitmq-de-an-zhuang-he-shi-yong-linux/"/>
      <url>/2020/07/19/rabbitmq-de-an-zhuang-he-shi-yong-linux/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="1-安装相关依赖"><a href="#1-安装相关依赖" class="headerlink" title="1. 安装相关依赖"></a>1. 安装相关依赖</h3><pre class="language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">make</span> gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</code></pre><p><code>注意：进行下面步骤之前一定要做的事情</code></p><p>登陆<a href="https://www.rabbitmq.com/which-erlang.html">RabbitMQ官网</a>查询erlang与rabbitmq匹配版本</p><blockquote><p><code>版本一定要匹配！！！</code><br><code>版本一定要匹配！！！</code><br><code>版本一定要匹配！！！</code></p></blockquote><h3 id="2-安装Erlang"><a href="#2-安装Erlang" class="headerlink" title="2. 安装Erlang"></a>2. 安装Erlang</h3><p><em>下载</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://erlang.org/download/otp_src_21.3.tar.gz  </code></pre><p><em>解压</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -xzvf otp_src_21.3.tar.gz </code></pre><p><em>配置</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">./configure</code></pre><p><em>安装</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span></code></pre><p><em>验证</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">erl</code></pre><p><code>出现类似以下提示表明安装成功!(可按Ctrl + C退出，一次不行多来几次)</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">Erlang/OTP <span class="token number">21</span> <span class="token punctuation">[</span>erts-10.3<span class="token punctuation">]</span> <span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">64</span>-bit<span class="token punctuation">]</span> <span class="token punctuation">[</span>smp:32:32<span class="token punctuation">]</span> <span class="token punctuation">[</span>ds:32:32:10<span class="token punctuation">]</span> <span class="token punctuation">[</span>async-threads:1<span class="token punctuation">]</span> <span class="token punctuation">[</span>hipe<span class="token punctuation">]</span>Eshell V10.3  <span class="token punctuation">(</span>abort with ^G<span class="token punctuation">)</span><span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> </code></pre><h3 id="3-安装RabbitMQ"><a href="#3-安装RabbitMQ" class="headerlink" title="3. 安装RabbitMQ"></a>3. 安装RabbitMQ</h3><p><em>下载</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.2/rabbitmq-server-generic-unix-3.8.2.tar.xz</code></pre><p><em>解压</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">xz -d rabbitmq-server-generic-unix-3.8.2.tar.xz   -- 这一步解压出rabbitmq-server-generic-unix-3.8.2.tar文件 继续解压<span class="token function">tar</span> -xvf rabbitmq-server-generic-unix-3.8.2.tar   -- 这一步解压出rabbitmq-server-generic-unix-3.8.2.tar</code></pre><p><code>无需编译安装</code></p><p><em>移动</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> -r rabbitmq_server-3.8.2 /usr/local/rabbitmq</code></pre><p><em>配置</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/rabbitmq/sbin:<span class="token environment constant">$PATH</span>     -- 将此句加在文末 保存退出<span class="token builtin class-name">source</span> /etc/profile                            -- 使新配置生效</code></pre><h3 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h3><p><em>启用Web管理控制台</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management</code></pre><p><em>后台启动</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">rabbitmq-server -detached</code></pre><p><em><code>以下操作可选</code></em></p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start firewalld                                        -- 启动防火墙firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">15672</span>/tcp --permanent      -- 开放15672端口firewall-cmd --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">15762</span>/tcp --permanent   -- 关闭端口<span class="token punctuation">(</span>此句可忽略，笔记<span class="token punctuation">)</span>firewall-cmd --reload                                            -- 开放或关闭端口都需要执行以使操作生效firewall-cmd --list-ports                                        -- 查看已经开放的端口</code></pre><h3 id="5-使用RabbitMQ"><a href="#5-使用RabbitMQ" class="headerlink" title="5. 使用RabbitMQ"></a>5. 使用RabbitMQ</h3><p><em><code>以下操作需要切换目录到/usr/local/rabbitmq/sbin/ 或在RabbitMQ命令前加上此目录</code></em></p><p><em>创建用户(权限不够可在命令前加<code>sudo</code>)</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">rabbitmqctl add_user js <span class="token number">123456</span>                      -- 添加用户rabbitmqctl set_user_tags js administrator          -- 设置用户身份rabbitmqctl set_permissions -p / js <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span>  -- 设置权限</code></pre><p><em>下载队列管理命令</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://raw.githubusercontent.com/rabbitmq/rabbitmq-management/v3.8.2/bin/rabbitmqadmin  或者<span class="token function">wget</span> http://127.0.0.1:15672/cli/rabbitmqadmin</code></pre><p><em>赋予权限</em></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x  rabbitmqadmin</code></pre><p><em>查询队列</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">python rabbitmqadmin --vhost<span class="token operator">=</span>vhost --username<span class="token operator">=</span>username --password<span class="token operator">=</span>password list queues例如：python rabbitmqadmin --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>js --password<span class="token operator">=</span><span class="token number">123456</span> list queues</code></pre><p><em>创建队列</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">python rabbitmqadmin --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>username --password<span class="token operator">=</span>password  <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>队列名称 或者python rabbitmqadmin <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>队列名称 <span class="token assign-left variable">auto_delete</span><span class="token operator">=</span>false <span class="token assign-left variable">durable</span><span class="token operator">=</span>true --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>username --password<span class="token operator">=</span>password例如：python rabbitmqadmin <span class="token assign-left variable">auto_delete</span><span class="token operator">=</span>false <span class="token assign-left variable">durable</span><span class="token operator">=</span>true --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>js --password<span class="token operator">=</span><span class="token number">123456</span> <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>csdn</code></pre><p><em>删除队列</em></p><pre class="language-bash" data-language="bash"><code class="language-bash">python rabbitmqadmin --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>username --password<span class="token operator">=</span>password  delete queue <span class="token assign-left variable">name</span><span class="token operator">=</span>队列名称例如：python rabbitmqadmin --vhost<span class="token operator">=</span>/ --username<span class="token operator">=</span>js --password<span class="token operator">=</span><span class="token number">123456</span>  delete queue <span class="token assign-left variable">name</span><span class="token operator">=</span>队列名称</code></pre><p><em><code>作者：本文力致于整理一篇比较完整的RabbitMQ的安装和使用教程，此文基于本人多次部署服务器整理而成，以避免每次部署服务器重新搜罗资料，有任何问题或需要补充的请留言，诚与各位交流学习！</code></em></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 rabbitmq linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印从1到最大的n位数(Golang)《剑指offer》</title>
      <link href="/2019/09/22/da-yin-cong-1-dao-zui-da-de-n-wei-shu-golang-jian-zhi-offer/"/>
      <url>/2019/09/22/da-yin-cong-1-dao-zui-da-de-n-wei-shu-golang-jian-zhi-offer/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>题目：输入数字n，按顺序打印从1到最大的n位十进制数。比如输入3，则打印出1,2,3一直到最大的3位数999。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Print1ToMaxOfDigits</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>number <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token function">print1ToMaxOfDigitsRecursively</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">print1ToMaxOfDigitsRecursively</span><span class="token punctuation">(</span>number <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> length <span class="token builtin">int</span><span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> index <span class="token operator">==</span> length<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token function">printNumber</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>number<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token function">print1ToMaxOfDigitsRecursively</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> length<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printNumber</span><span class="token punctuation">(</span>number <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> isBeginning0 <span class="token operator">=</span> <span class="token boolean">true</span>length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> isBeginning0 <span class="token operator">&amp;&amp;</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>isBeginning0 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token operator">!</span>isBeginning0 <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> i <span class="token operator">==</span> length<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Github: <a href="https://github.com/echaser/algorithm">https://github.com/echaser/algorithm</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer golang Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转数组的最小数字(Golang)《剑指offer》</title>
      <link href="/2019/08/02/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-golang-jian-zhi-offer/"/>
      <url>/2019/08/02/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-golang-jian-zhi-offer/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如：数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。</p><pre class="language-none"><code class="language-none">注意：本题中应充分考虑特殊情况</code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">finMinNum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>start <span class="token operator">:=</span> <span class="token number">0</span>end <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>mid <span class="token operator">:=</span> start <span class="token comment">// 如果第一个数字小于最后一个数字，那就说明该数组是有序的，直接返回第一个数字</span><span class="token keyword">for</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> end<span class="token operator">-</span>start <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>mid <span class="token operator">=</span> end<span class="token keyword">break</span><span class="token punctuation">}</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token comment">// 如果第一个、最后一个和中间的数字都相等，那么只能按照顺序查找</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">finMinInOrder</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token punctuation">{</span>start <span class="token operator">=</span> mid<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token punctuation">{</span>end <span class="token operator">=</span> mid<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h6 id="完整代码请参考-https-github-com-echaser-algorithm"><a href="#完整代码请参考-https-github-com-echaser-algorithm" class="headerlink" title="完整代码请参考:https://github.com/echaser/algorithm"></a>完整代码请参考:<a href="https://github.com/echaser/algorithm">https://github.com/echaser/algorithm</a></h6>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重建二叉树(Golang)《剑指offer》</title>
      <link href="/2019/07/20/chong-jian-er-cha-shu-golang-jian-zhi-offer/"/>
      <url>/2019/07/20/chong-jian-er-cha-shu-golang-jian-zhi-offer/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>输入某个二叉树的前序遍历和中序遍历的结果，请重建该二叉树。<br>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如：输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建如图所示的二叉树并输出它的头节点。</p><p><img src="https://img-blog.csdnimg.cn/20190720180751920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="题目"></p><h4 id="主要代码如下："><a href="#主要代码如下：" class="headerlink" title="主要代码如下："></a>主要代码如下：</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> BinaryTreeNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>Value     <span class="token builtin">int</span>LeftNode  <span class="token operator">*</span>BinaryTreeNodeRightNode <span class="token operator">*</span>BinaryTreeNode<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewBinaryTreeNode</span><span class="token punctuation">(</span>value <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>BinaryTreeNode <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>BinaryTreeNode<span class="token punctuation">{</span>Value<span class="token punctuation">:</span> value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">CreateTreeConstruct</span><span class="token punctuation">(</span>preorder <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> inorder <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>BinaryTreeNode <span class="token punctuation">{</span><span class="token keyword">if</span> preorder <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> inorder <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">createTreeConstruct</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>preorder<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>inorder<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 参数：前序遍历数组，前序起始位置，中序遍历数组，中序起始位置</span><span class="token keyword">func</span> <span class="token function">createTreeConstruct</span><span class="token punctuation">(</span>preorder <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> preStart <span class="token builtin">int</span><span class="token punctuation">,</span> preEnd <span class="token builtin">int</span><span class="token punctuation">,</span> inorder <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> inStart <span class="token builtin">int</span><span class="token punctuation">,</span> inEnd <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>BinaryTreeNode <span class="token punctuation">{</span><span class="token keyword">if</span> preStart <span class="token operator">&gt;</span> preEnd <span class="token operator">||</span> inStart <span class="token operator">&gt;</span> inEnd <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// 前序遍历序列的第一个数字是根节点的值</span>root <span class="token operator">:=</span> <span class="token function">NewBinaryTreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 找到中序遍历数组中根节点的位置</span><span class="token keyword">var</span> rootIndex <span class="token builtin">int</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>inorder<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> root<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>rootIndex <span class="token operator">=</span> i<span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 计算左子树和右子树的节点数</span>leftCount <span class="token operator">:=</span> rootIndex <span class="token operator">-</span> inStart<span class="token comment">//rightCount := inEnd - rootIndex</span><span class="token comment">// 左子树递归</span>root<span class="token punctuation">.</span>LeftNode <span class="token operator">=</span> <span class="token function">createTreeConstruct</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> preStart<span class="token operator">+</span>leftCount<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inStart<span class="token punctuation">,</span> rootIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>RightNode <span class="token operator">=</span> <span class="token function">createTreeConstruct</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart<span class="token operator">+</span>leftCount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> preEnd<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> rootIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> inEnd<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">}</span><span class="token comment">// 前序遍历</span><span class="token keyword">func</span> <span class="token function">printPreOrder</span><span class="token punctuation">(</span>root <span class="token operator">*</span>BinaryTreeNode<span class="token punctuation">,</span> order <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>order <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> root<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token keyword">if</span> root<span class="token punctuation">.</span>LeftNode <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>order <span class="token operator">=</span> <span class="token function">printPreOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>LeftNode<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> root<span class="token punctuation">.</span>RightNode <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>order <span class="token operator">=</span> <span class="token function">printPreOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>RightNode<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> order<span class="token punctuation">}</span><span class="token comment">// 中序遍历</span><span class="token keyword">func</span> <span class="token function">printInOrder</span><span class="token punctuation">(</span>root <span class="token operator">*</span>BinaryTreeNode<span class="token punctuation">,</span> order <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">if</span> root<span class="token punctuation">.</span>LeftNode <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>order <span class="token operator">=</span> <span class="token function">printInOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>LeftNode<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">}</span>order <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> root<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token keyword">if</span> root<span class="token punctuation">.</span>RightNode <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>order <span class="token operator">=</span> <span class="token function">printInOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>RightNode<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> order<span class="token punctuation">}</span></code></pre><p>写完代码之后又写了前序遍历和中序遍历自己测试了一下，结果是对的。分析过程就不写了，那本书上写的很详细，如果还是不懂的可以评论联系我。</p><pre class="language-bash" data-language="bash"><code class="language-bash">说明：前序遍历的数组中第一个位置是根节点，中序遍历数组中根节点的左边第左子树，右边是右子树。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 128. 最长连续序列(Golang)</title>
      <link href="/2019/07/11/leetcode-128.zui-chang-lian-xu-xu-lie-golang/"/>
      <url>/2019/07/11/leetcode-128.zui-chang-lian-xu-xu-lie-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 O(n)。</p><p>示例:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">100</span>, <span class="token number">4</span>, <span class="token number">200</span>, <span class="token number">1</span>, <span class="token number">3</span>, <span class="token number">2</span><span class="token punctuation">]</span>输出: <span class="token number">4</span></code></pre><p>解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">}</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>length <span class="token operator">:=</span> <span class="token number">1</span>leng <span class="token operator">:=</span> <span class="token number">1</span>first <span class="token operator">:=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> first <span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> first<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">{</span>first <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>leng<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span> leng <span class="token operator">&gt;</span> length <span class="token punctuation">{</span>length <span class="token operator">=</span> leng<span class="token punctuation">}</span>first <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>leng <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>leng<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>EKT搭建私链</title>
      <link href="/2019/01/02/ekt-da-jian-si-lian/"/>
      <url>/2019/01/02/ekt-da-jian-si-lian/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h5 id="1-首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令会编译EKT项目cmd包下的两个main-go文件"><a href="#1-首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令会编译EKT项目cmd包下的两个main-go文件" class="headerlink" title="1.首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令会编译EKT项目cmd包下的两个main.go文件"></a>1.首先，打开终端，将目录切换到<code>EKT</code>路径下，输入命令<code>make</code>，此命令会编译<code>EKT</code>项目<code>cmd</code>包下的两个<code>main.go</code>文件</h5><h5 id="2-编译完成之后，会在EKT目录下产生一个bin目录，将路径切换到bin目录中，新建一个创世区块文件genesis-json，内容类似下面这样"><a href="#2-编译完成之后，会在EKT目录下产生一个bin目录，将路径切换到bin目录中，新建一个创世区块文件genesis-json，内容类似下面这样" class="headerlink" title="2.编译完成之后，会在EKT目录下产生一个bin目录，将路径切换到bin目录中，新建一个创世区块文件genesis.json，内容类似下面这样"></a>2.编译完成之后，会在<code>EKT</code>目录下产生一个<code>bin</code>目录，将路径切换到<code>bin</code>目录中，新建一个创世区块文件<code>genesis.json</code>，内容类似下面这样</h5><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"v2.0"</span><span class="token punctuation">,</span>  <span class="token comment">//版本号</span>    <span class="token property">"dbPath"</span><span class="token operator">:</span> <span class="token string">"db/"</span><span class="token punctuation">,</span>    <span class="token comment">//数据库路径</span>    <span class="token property">"logPath"</span><span class="token operator">:</span> <span class="token string">"log/ekt8.log"</span><span class="token punctuation">,</span> <span class="token comment">// 日志路径</span>    <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//是否开启debug模式</span>    <span class="token property">"env"</span><span class="token operator">:</span> <span class="token string">"localnet"</span><span class="token punctuation">,</span> <span class="token comment">//网络配置</span>    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 本地节点</span>        <span class="token property">"account"</span><span class="token operator">:</span> <span class="token string">"56b92dfdbfbd7d32ea5deb6ca05ea8d695ed727c9d9a7536e345646608e339dc"</span><span class="token punctuation">,</span>        <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>        <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">19951</span><span class="token punctuation">,</span>        <span class="token property">"addressVersion"</span><span class="token operator">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 下面是创世区块中的账户信息，设为自己的节点账号</span>    <span class="token property">"privateKey"</span><span class="token operator">:</span> <span class="token string">"a9bdb75fa6f706e3b95d7b5c01bc9b4a546392782d2cf593e04c13d1faa9f01e"</span><span class="token punctuation">,</span>    <span class="token property">"genesisBlock"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"56b92dfdbfbd7d32ea5deb6ca05ea8d695ed727c9d9a7536e345646608e339dc"</span><span class="token punctuation">,</span>            <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">50000000000000000</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h5 id="3-同样在bin目录下创建一个localnet-json，内容如下"><a href="#3-同样在bin目录下创建一个localnet-json，内容如下" class="headerlink" title="3.同样在bin目录下创建一个localnet.json，内容如下"></a>3.同样在<code>bin</code>目录下创建一个<code>localnet.json</code>，内容如下</h5><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"56b92dfdbfbd7d32ea5deb6ca05ea8d695ed727c9d9a7536e345646608e339dc"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">19951</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h5 id="4-我们会发现bin目录下还有两个文件，一个是ecli，另外一个是enode，这两个都是可执行文件，可以用-ecli-account-new命令来创建账号"><a href="#4-我们会发现bin目录下还有两个文件，一个是ecli，另外一个是enode，这两个都是可执行文件，可以用-ecli-account-new命令来创建账号" class="headerlink" title="4.我们会发现bin目录下还有两个文件，一个是ecli，另外一个是enode，这两个都是可执行文件，可以用./ecli account new命令来创建账号"></a>4.我们会发现<code>bin</code>目录下还有两个文件，一个是<code>ecli</code>，另外一个是<code>enode</code>，这两个都是可执行文件，可以用<code>./ecli account new</code>命令来创建账号</h5><p><img src="https://img-blog.csdnimg.cn/20181221193946715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="创建账号"></p><h5 id="5-接下来启动EKT：在终端输入-enode，EKT私链搭建完成-当前窗口不要关闭，进行转账等其他命令时，要新建一个终端"><a href="#5-接下来启动EKT：在终端输入-enode，EKT私链搭建完成-当前窗口不要关闭，进行转账等其他命令时，要新建一个终端" class="headerlink" title="5.接下来启动EKT：在终端输入./enode，EKT私链搭建完成(当前窗口不要关闭，进行转账等其他命令时，要新建一个终端)"></a>5.接下来启动<code>EKT</code>：在终端输入<code>./enode</code>，<code>EKT</code>私链搭建完成(当前窗口不要关闭，进行转账等其他命令时，要新建一个终端)</h5><p><img src="https://img-blog.csdnimg.cn/20181221194028266.png" alt="启动EKT"><br>EKT还有一些命令：</p><h4 id="ecli相关"><a href="#ecli相关" class="headerlink" title="ecli相关"></a>ecli相关</h4><p>转账交易：<code>./ecli transaction send</code><br>1.输入私钥<br>2.输入币种，可不输入，默认<code>EKT</code><br>3.输入转账金额，注意这里说的金额以最小值为单位的，比如你要转<code>10</code>个<code>EKT</code>，需要输入1000000000(后面有<code>8</code>个<code>0</code>)<br>4.输入收款方地址<br>5.输入转账备注内容<br>终端会输出一个<code>json</code>字符串，复制<code>result</code>后面的字符串(交易地址)，打开浏览器，输入<code>http://localhost:19951/db/api/getByHex?hash=txId(刚才复制的内容)</code>即可查询交易详情<br><img src="https://img-blog.csdnimg.cn/20181221194558492.png" alt="转账"><br><img src="https://img-blog.csdnimg.cn/20181221194058732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="交易详情"></p><h4 id="enode相关"><a href="#enode相关" class="headerlink" title="enode相关"></a>enode相关</h4><pre class="language-bash" data-language="bash"><code class="language-bash">./enode -h 帮助./enode -v 输出版本并退出./enode -m 同步模式：<span class="token variable"><span class="token variable">`</span>full <span class="token function">sync</span><span class="token variable">`</span></span>,<span class="token variable"><span class="token variable">`</span>fast <span class="token function">sync</span><span class="token variable">`</span></span>或者<span class="token variable"><span class="token variable">`</span>delegate<span class="token variable">`</span></span>，默认<span class="token variable"><span class="token variable">`</span>adaptive<span class="token variable">`</span></span>./enode -c 设置<span class="token variable"><span class="token variable">`</span>genesis.json<span class="token variable">`</span></span>并启动，默认当前目录下的<span class="token variable"><span class="token variable">`</span>genesis.json<span class="token variable">`</span></span></code></pre><p>EKT官网：<a href="https://ekt8.io/">https://ekt8.io/</a><br>源码地址：<a href="https://github.com/EducationEKT/EKT">https://github.com/EducationEKT/EKT</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 EKT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 234. 回文链表(Golang)</title>
      <link href="/2018/11/06/leetcode-234.hui-wen-lian-biao-golang/"/>
      <url>/2018/11/06/leetcode-234.hui-wen-lian-biao-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>请判断一个链表是否为回文链表。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>输出: <span class="token boolean">false</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">1</span>输出: <span class="token boolean">true</span></code></pre><p>进阶：<br>你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><p>思路：遍历链表，将所有节点按顺序存储到<code>map</code>集合中，通过<code>map</code>的键从两头开始遍历对比，值不相等返回<code>false</code>。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>ListNode<span class="token punctuation">)</span>i <span class="token operator">:=</span> <span class="token number">0</span>m <span class="token operator">=</span> <span class="token function">TraverListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span>start <span class="token operator">:=</span> <span class="token number">0</span>end <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">for</span> start <span class="token operator">&lt;=</span> end <span class="token punctuation">{</span><span class="token keyword">if</span> m<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">.</span>Val <span class="token operator">!=</span> m<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>Val <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>start<span class="token operator">++</span>end<span class="token operator">--</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TraverListNode</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>ListNode<span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>ListNode <span class="token punctuation">{</span><span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m<span class="token punctuation">}</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> headi<span class="token operator">++</span><span class="token keyword">return</span> <span class="token function">TraverListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>Next<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 17. 电话号码的字母组合(Golang)</title>
      <link href="/2018/10/29/leetcode-17.dian-hua-hao-ma-de-zi-mu-zu-he-golang/"/>
      <url>/2018/10/29/leetcode-17.dian-hua-hao-ma-de-zi-mu-zu-he-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://img-blog.csdnimg.cn/20181029220141185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>示例:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入：“23”  输出：<span class="token punctuation">[</span>“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”<span class="token punctuation">]</span>.</code></pre><p><strong>说明:</strong><br>尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>digits <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">byte</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token char">'2'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'3'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'4'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'5'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'6'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'7'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'8'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token char">'9'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>s <span class="token operator">:=</span> m<span class="token punctuation">[</span>digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>temp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">{</span>temp <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>s <span class="token operator">=</span> temp<span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 11. 盛最多水的容器(Golang)</title>
      <link href="/2018/10/29/leetcode-11.sheng-zui-duo-shui-de-rong-qi-golang/"/>
      <url>/2018/10/29/leetcode-11.sheng-zui-duo-shui-de-rong-qi-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定 n 个非负整数<code>a1，a2，...，an</code>，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p><strong>说明</strong>：你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="https://img-blog.csdnimg.cn/20181029215852968.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p>示例:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">1,8</span>,6,2,5,4,8,3,7<span class="token punctuation">]</span>输出: <span class="token number">49</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">&lt;</span> j <span class="token punctuation">{</span>area <span class="token operator">:=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">minNum</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> area<span class="token operator">&gt;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> area                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">minNum</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">&gt;</span> j <span class="token punctuation">{</span><span class="token keyword">return</span> j<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 8. 字符串转整数 (atoi)(Golang)</title>
      <link href="/2018/10/29/leetcode-8.zi-fu-chuan-zhuan-zheng-shu-atoi-golang/"/>
      <url>/2018/10/29/leetcode-8.zi-fu-chuan-zhuan-zheng-shu-atoi-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>实现 <code>atoi</code>，将字符串转为整数。</p><p>该函数首先根据需要丢弃任意多的空格字符，直到找到第一个非空格字符为止。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。</p><p>当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。</p><p>若函数不能执行有效的转换，返回 0。</p><p>说明：</p><p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。如果数值超过可表示的范围，则返回 INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"42"</span>输出: <span class="token number">42</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"   -42"</span>输出: -42解释: 第一个非空白字符为 <span class="token string">'-'</span>, 它是一个负号。     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</code></pre><p>示例 3:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"4193 with words"</span>输出: <span class="token number">4193</span>解释: 转换截止于数字 <span class="token string">'3'</span> ，因为它的下一个字符不为数字。</code></pre><p>示例 4:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"words and 987"</span>输出: <span class="token number">0</span>解释: 第一个非空字符是 <span class="token string">'w'</span>, 但它不是数字或正、负号。     因此无法执行有效的转换。</code></pre><p>示例 5:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"-91283472332"</span>输出: -2147483648解释: 数字 <span class="token string">"-91283472332"</span> 超过 <span class="token number">32</span> 位有符号整数范围。      因此返回 INT_MIN <span class="token punctuation">(</span>−231<span class="token punctuation">)</span> 。</code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>num <span class="token operator">:=</span> <span class="token number">0</span>s <span class="token operator">:=</span> <span class="token string">""</span>flag <span class="token operator">:=</span> <span class="token boolean">false</span>str <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token keyword">if</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">{</span><span class="token keyword">if</span> flag <span class="token operator">||</span>s <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">if</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token punctuation">{</span><span class="token keyword">if</span> flag <span class="token operator">||</span> s <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span>flag <span class="token operator">=</span> <span class="token boolean">true</span>s <span class="token operator">+=</span> <span class="token string">"-"</span><span class="token keyword">continue</span><span class="token punctuation">}</span>s <span class="token operator">+=</span> <span class="token function">string</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>num<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">&gt;</span> math<span class="token punctuation">.</span>MaxInt32 <span class="token punctuation">{</span><span class="token keyword">return</span> math<span class="token punctuation">.</span>MaxInt32<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> num <span class="token operator">&lt;</span> math<span class="token punctuation">.</span>MinInt32 <span class="token punctuation">{</span><span class="token keyword">return</span> math<span class="token punctuation">.</span>MinInt32<span class="token punctuation">}</span><span class="token keyword">return</span> num<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  628. 三个数的最大乘积(Golang)</title>
      <link href="/2018/10/22/leetcode-628.san-ge-shu-de-zui-da-cheng-ji-golang/"/>
      <url>/2018/10/22/leetcode-628.san-ge-shu-de-zui-da-cheng-ji-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">1,2</span>,3<span class="token punctuation">]</span>输出: <span class="token number">6</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span>输出: <span class="token number">24</span></code></pre><p>注意:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.给定的整型数组长度范围是<span class="token punctuation">[</span><span class="token number">3,104</span><span class="token punctuation">]</span>，数组中所有的元素范围是<span class="token punctuation">[</span>-1000, <span class="token number">1000</span><span class="token punctuation">]</span>。<span class="token number">2</span>.输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。</code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maximumProduct</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>a <span class="token operator">:=</span> nums<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">:=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  441. 排列硬币(Golang)</title>
      <link href="/2018/10/22/leetcode-441.pai-lie-ying-bi-golang/"/>
      <url>/2018/10/22/leetcode-441.pai-lie-ying-bi-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。</p><p>给定一个数字 n，找出可形成完整阶梯行的总行数。</p><p>n 是一个非负整数，并且在32位有符号整型的范围内。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">n <span class="token operator">=</span> <span class="token number">5</span>硬币可排列成以下几行:¤¤ ¤¤ ¤因为第三行不完整，所以返回2.</code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">n <span class="token operator">=</span> <span class="token number">8</span>硬币可排列成以下几行:¤¤ ¤¤ ¤ ¤¤ ¤因为第四行不完整，所以返回3.</code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">arrangeCoins</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> n <span class="token operator">==</span> i <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n <span class="token operator">&lt;</span> i <span class="token punctuation">{</span><span class="token keyword">return</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>n <span class="token operator">=</span> n <span class="token operator">-</span> i<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  258. 各位相加(Golang)</title>
      <link href="/2018/10/22/leetcode-258.ge-wei-xiang-jia-golang/"/>
      <url>/2018/10/22/leetcode-258.ge-wei-xiang-jia-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。</p><p>示例:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">38</span>输出: <span class="token number">2</span> 解释: 各位相加的过程为：3 + <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">11</span>, <span class="token number">1</span> + <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span>。 由于 <span class="token number">2</span> 是一位数，所以返回 <span class="token number">2</span>。</code></pre><p>进阶:<br>你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">addDigits</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">for</span> num <span class="token operator">&gt;</span> <span class="token number">9</span> <span class="token punctuation">{</span>str <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">{</span>j<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>num <span class="token operator">+=</span> j<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> num<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  19. 删除链表的倒数第N个节点(Golang)</title>
      <link href="/2018/10/15/leetcode-19.shan-chu-lian-biao-de-dao-shu-di-n-ge-jie-dian-golang/"/>
      <url>/2018/10/15/leetcode-19.shan-chu-lian-biao-de-dao-shu-di-n-ge-jie-dian-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash">给定一个链表: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span>-<span class="token operator">&gt;</span><span class="token number">4</span>-<span class="token operator">&gt;</span><span class="token number">5</span>, 和 n <span class="token operator">=</span> <span class="token number">2</span>.当删除了倒数第二个节点后，链表变为 <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span>-<span class="token operator">&gt;</span><span class="token number">5</span>.</code></pre><p>说明：</p><p>给定的 n 保证是有效的。</p><p>进阶：</p><p>你能尝试使用一趟扫描实现吗？</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head    <span class="token punctuation">}</span>    fast <span class="token operator">:=</span> head    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> fast <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>        <span class="token keyword">if</span> fast <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>            slow <span class="token operator">:=</span> head    <span class="token keyword">for</span> fast<span class="token punctuation">.</span>Next <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>Next        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>    slow<span class="token punctuation">.</span>Next <span class="token operator">=</span> slow<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next    <span class="token keyword">return</span> head<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  414. 第三大的数(Golang)</title>
      <link href="/2018/10/13/leetcode-414.di-san-da-de-shu-golang/"/>
      <url>/2018/10/13/leetcode-414.di-san-da-de-shu-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">2</span>, <span class="token number">1</span><span class="token punctuation">]</span>输出: <span class="token number">1</span>解释: 第三大的数是 <span class="token number">1</span>.</code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">]</span>输出: <span class="token number">2</span>解释: 第三大的数不存在, 所以返回最大的数 <span class="token number">2</span> <span class="token builtin class-name">.</span></code></pre><p>示例 3:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">1</span><span class="token punctuation">]</span>输出: <span class="token number">1</span>解释: 注意，要求返回第三大的数，是指第三大且唯一出现的数。存在两个值为2的数，它们都排第二。</code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">thirdMax</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    n <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>i <span class="token operator">:=</span> <span class="token number">0</span>n <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>n <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>i<span class="token operator">++</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>ln <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">if</span> ln <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token punctuation">{</span><span class="token keyword">return</span> n<span class="token punctuation">[</span>ln<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">return</span> n<span class="token punctuation">[</span>ln<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  338. 比特位计数(Golang)</title>
      <link href="/2018/10/11/leetcode-338.bi-te-wei-ji-shu-golang/"/>
      <url>/2018/10/11/leetcode-338.bi-te-wei-ji-shu-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">2</span>输出: <span class="token punctuation">[</span><span class="token number">0,1</span>,1<span class="token punctuation">]</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">5</span>输出: <span class="token punctuation">[</span><span class="token number">0,1</span>,1,2,1,2<span class="token punctuation">]</span></code></pre><p><strong>进阶:</strong></p><ul><li>给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？</li><li>要求算法的空间复杂度为O(n)。</li><li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">countBits</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">&lt;=</span> num <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token punctuation">{</span>b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>count <span class="token operator">:=</span> <span class="token number">0</span>by <span class="token operator">:=</span> <span class="token function">dtob</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> by <span class="token punctuation">{</span><span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>count<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span>b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">}</span>i<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">return</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">dtob</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> num <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>i <span class="token operator">:=</span> num <span class="token operator">%</span> <span class="token number">2</span>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">)</span>num <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">return</span> a<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  104. 二叉树的最大深度(Golang)</title>
      <link href="/2018/10/11/leetcode-104.er-cha-shu-de-zui-da-shen-du-golang/"/>
      <url>/2018/10/11/leetcode-104.er-cha-shu-de-zui-da-shen-du-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p><pre class="language-bash" data-language="bash"><code class="language-bash">  <span class="token number">3</span> / <span class="token punctuation">\</span><span class="token number">9</span>  <span class="token number">20</span>  /  <span class="token punctuation">\</span> <span class="token number">15</span>   <span class="token number">7</span></code></pre><p>返回它的最大深度 3 。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for a binary tree node. * type TreeNode struct { *     Val int *     Left *TreeNode *     Right *TreeNode * } */</span><span class="token keyword">func</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    i <span class="token operator">:=</span> <span class="token number">0</span>j <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span>i <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>j <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">if</span> i <span class="token operator">&lt;</span> j <span class="token punctuation">{</span>i<span class="token punctuation">,</span> j <span class="token operator">=</span> j<span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token keyword">return</span> i<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  83. 删除排序链表中的重复元素(Golang)</title>
      <link href="/2018/10/11/leetcode-83.shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su-golang/"/>
      <url>/2018/10/11/leetcode-83.shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>输出: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span>-<span class="token operator">&gt;</span><span class="token number">3</span>输出: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    curr <span class="token operator">:=</span> head<span class="token keyword">for</span> curr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> curr<span class="token punctuation">.</span>Next <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">if</span> curr<span class="token punctuation">.</span>Val <span class="token operator">==</span> curr<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>curr<span class="token punctuation">.</span>Next <span class="token operator">=</span> curr<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>Next<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> head<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  82. 删除排序链表中的重复元素 II(Golang)</title>
      <link href="/2018/10/11/leetcode-82.shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su-ii-golang/"/>
      <url>/2018/10/11/leetcode-82.shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su-ii-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span>-<span class="token operator">&gt;</span><span class="token number">3</span>-<span class="token operator">&gt;</span><span class="token number">4</span>-<span class="token operator">&gt;</span><span class="token number">4</span>-<span class="token operator">&gt;</span><span class="token number">5</span>输出: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">5</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span>输出: <span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    <span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> head<span class="token punctuation">}</span>newHead <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span><span class="token punctuation">}</span>tmp <span class="token operator">:=</span> newHead<span class="token keyword">for</span> head <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>Next <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">if</span> head<span class="token punctuation">.</span>Val <span class="token operator">==</span> head<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Val <span class="token punctuation">{</span><span class="token keyword">for</span> head<span class="token punctuation">.</span>Next <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>Val <span class="token operator">==</span> head<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>head <span class="token operator">=</span> head<span class="token punctuation">.</span>Next<span class="token punctuation">}</span>head <span class="token operator">=</span> head<span class="token punctuation">.</span>Next<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>tmp<span class="token punctuation">.</span>Next <span class="token operator">=</span> headtmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>Nexthead <span class="token operator">=</span> head<span class="token punctuation">.</span>Next<span class="token punctuation">}</span><span class="token punctuation">}</span>tmp<span class="token punctuation">.</span>Next <span class="token operator">=</span> head<span class="token keyword">return</span> newHead<span class="token punctuation">.</span>Next<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  80. 删除排序数组中的重复项 II(Golang)</title>
      <link href="/2018/10/11/leetcode-80.shan-chu-pai-xu-shu-zu-zhong-de-chong-fu-xiang-ii-golang/"/>
      <url>/2018/10/11/leetcode-80.shan-chu-pai-xu-shu-zu-zhong-de-chong-fu-xiang-ii-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个排序数组，你需要在<code>原地</code>删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在<code>原地</code>修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">给定 nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1,1</span>,1,2,2,3<span class="token punctuation">]</span>,函数应返回新长度 length <span class="token operator">=</span> <span class="token number">5</span>, 并且原数组的前五个元素被修改为 <span class="token number">1</span>, <span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">2</span>, <span class="token number">3</span> 。你不需要考虑数组中超出新长度后面的元素。</code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">给定 nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0,0</span>,1,1,1,1,2,3,3<span class="token punctuation">]</span>,函数应返回新长度 length <span class="token operator">=</span> <span class="token number">7</span>, 并且原数组的前五个元素被修改为 <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">3</span> 。你不需要考虑数组中超出新长度后面的元素。</code></pre><p>说明:</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len <span class="token operator">=</span> removeDuplicates<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>// 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。<span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    print<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span>count <span class="token operator">:=</span> <span class="token number">0</span>i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>i<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> count <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>count <span class="token operator">++</span>i<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  21. 合并两个有序链表(Golang)</title>
      <link href="/2018/10/11/leetcode-21.he-bing-liang-ge-you-xu-lian-biao-golang/"/>
      <url>/2018/10/11/leetcode-21.he-bing-liang-ge-you-xu-lian-biao-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入：1-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">4</span>, <span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">3</span>-<span class="token operator">&gt;</span><span class="token number">4</span>输出：1-<span class="token operator">&gt;</span><span class="token number">1</span>-<span class="token operator">&gt;</span><span class="token number">2</span>-<span class="token operator">&gt;</span><span class="token number">3</span>-<span class="token operator">&gt;</span><span class="token number">4</span>-<span class="token operator">&gt;</span><span class="token number">4</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1 <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> l2 <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    <span class="token keyword">if</span> l1 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> l2<span class="token punctuation">}</span><span class="token keyword">if</span> l2 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> l1<span class="token punctuation">}</span><span class="token keyword">if</span> l1<span class="token punctuation">.</span>Val <span class="token operator">&gt;</span> l2<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>l2<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>Next<span class="token punctuation">)</span><span class="token keyword">return</span> l2<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>l1<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>Next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token keyword">return</span> l1<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  20. 有效的括号(Golang)</title>
      <link href="/2018/10/11/leetcode-20.you-xiao-de-gua-hao-golang/"/>
      <url>/2018/10/11/leetcode-20.you-xiao-de-gua-hao-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个只包括 ‘(’，’)’，’{’，’}’，’[’，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"()"</span>输出: <span class="token boolean">true</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"()[]{}"</span>输出: <span class="token boolean">true</span></code></pre><p>示例 3:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"(]"</span>输出: <span class="token boolean">false</span></code></pre><p>示例 4:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"([)]"</span>输出: <span class="token boolean">false</span></code></pre><p>示例 5:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token string">"{[]}"</span>输出: <span class="token boolean">true</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isValid</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    flag <span class="token operator">:=</span> <span class="token boolean">false</span>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">byte</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>m<span class="token punctuation">[</span><span class="token char">'('</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">')'</span>m<span class="token punctuation">[</span><span class="token char">'['</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">']'</span>m<span class="token punctuation">[</span><span class="token char">'{'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'}'</span>sli <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">')'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">']'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'}'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token char">'('</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token char">'['</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token char">'{'</span> <span class="token punctuation">{</span>sli <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sli<span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token char">')'</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token char">']'</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token char">'}'</span> <span class="token punctuation">{</span>left <span class="token operator">:=</span> sli<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>sli<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>sli <span class="token operator">=</span> sli<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>sli<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> m<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token function">byte</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>sli<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> flag<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  9. 回文数(Golang)</title>
      <link href="/2018/10/11/leetcode-9.hui-wen-shu-golang/"/>
      <url>/2018/10/11/leetcode-9.hui-wen-shu-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">121</span>输出: <span class="token boolean">true</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: -121输出: <span class="token boolean">false</span></code></pre><p>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p><p>示例 3:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">10</span>输出: <span class="token boolean">false</span></code></pre><p>解释: 从右向左读, 为 01 。因此它不是一个回文数。<br>进阶:</p><p>你能不将整数转为字符串来解决这个问题吗？</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    y <span class="token operator">:=</span> x    <span class="token keyword">var</span> num <span class="token builtin">int</span>    <span class="token keyword">for</span> y <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y <span class="token operator">%</span> <span class="token number">10</span>        y <span class="token operator">=</span> y <span class="token operator">/</span> <span class="token number">10</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> num <span class="token operator">!=</span> x <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  7. 反转整数(Golang)</title>
      <link href="/2018/10/11/leetcode-7.fan-zhuan-zheng-shu-golang/"/>
      <url>/2018/10/11/leetcode-7.fan-zhuan-zheng-shu-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p><p>示例 1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">123</span>输出: <span class="token number">321</span></code></pre><p>示例 2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: -123输出: -321</code></pre><p>示例 3:</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入: <span class="token number">120</span>输出: <span class="token number">21</span></code></pre><p>注意:</p><p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token builtin">int</span>    <span class="token keyword">for</span> x<span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> num <span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> x<span class="token operator">%</span><span class="token number">10</span>        x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">10</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> num <span class="token operator">&gt;</span> math<span class="token punctuation">.</span>MaxInt32 <span class="token operator">||</span> num <span class="token operator">&lt;</span> math<span class="token punctuation">.</span>MinInt32 <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode  2. 两数相加(Golang)</title>
      <link href="/2018/10/11/leetcode-2.liang-shu-xiang-jia-golang/"/>
      <url>/2018/10/11/leetcode-2.liang-shu-xiang-jia-golang/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p><p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><p><strong>示例</strong>：</p><pre class="language-bash" data-language="bash"><code class="language-bash">输入：<span class="token punctuation">(</span><span class="token number">2</span> -<span class="token operator">&gt;</span> <span class="token number">4</span> -<span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> + <span class="token punctuation">(</span><span class="token number">5</span> -<span class="token operator">&gt;</span> <span class="token number">6</span> -<span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span>输出：7 -<span class="token operator">&gt;</span> <span class="token number">0</span> -<span class="token operator">&gt;</span> <span class="token number">8</span>原因：342 + <span class="token number">465</span> <span class="token operator">=</span> <span class="token number">807</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>l1 <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> l2 <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    head <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span><span class="token punctuation">}</span>    p<span class="token punctuation">,</span>q <span class="token operator">:=</span> l1<span class="token punctuation">,</span>l2    curr <span class="token operator">:=</span> head    carry <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> p<span class="token operator">!=</span><span class="token boolean">nil</span> <span class="token operator">||</span> q<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>        x <span class="token operator">:=</span> <span class="token number">0</span>        <span class="token keyword">if</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            x <span class="token operator">=</span> p<span class="token punctuation">.</span>Val        <span class="token punctuation">}</span>        y <span class="token operator">:=</span> <span class="token number">0</span>        <span class="token keyword">if</span> q <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            y <span class="token operator">=</span> q<span class="token punctuation">.</span>Val        <span class="token punctuation">}</span>        sum <span class="token operator">:=</span> carry <span class="token operator">+</span> x <span class="token operator">+</span> y        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span>        curr<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span>Val<span class="token punctuation">:</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">}</span>        curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>Next        <span class="token keyword">if</span> p <span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span>        <span class="token keyword">if</span> q <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            q <span class="token operator">=</span> q<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> carry <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        curr<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span>Val<span class="token punctuation">:</span>carry<span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>Next<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity智能合约案例——投票存在的问题</title>
      <link href="/2018/08/12/solidity-zhi-neng-he-yue-an-li-tou-piao-cun-zai-de-wen-ti/"/>
      <url>/2018/08/12/solidity-zhi-neng-he-yue-an-li-tou-piao-cun-zai-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>通过对Solidity官方文档的学习，发现<a href="https://solidity.readthedocs.io/en/latest/solidity-by-example.html#voting">投票</a>案例代码有些不够严谨，简要做以下说明。</p><h3 id="1-调用者问题"><a href="#1-调用者问题" class="headerlink" title="1. 调用者问题"></a>1. 调用者问题</h3><p>在<code>vote</code>函数中，如果是一个没有投票权的地址（假设<code>A</code>地址）调用了<code>vote</code> 函数，代码也能顺利执行。<br>首先，<code>A</code>地址虽然没有被<code>chairperson</code> 赋予投票权，但是代码也能正常获取<code>Voter</code> 对象<code>sender</code> ，只不过<code>sender</code>的所有属性值是对应类型的默认值，函数可以继续执行。</p><p>表1 Voter对象属性对应的默认值</p><table><thead><tr><th>类型</th><th>属性</th><th>取值</th></tr></thead><tbody><tr><td>uint</td><td>weight</td><td>0</td></tr><tr><td>bool</td><td>voted</td><td>false</td></tr><tr><td>uint</td><td>vote</td><td>0</td></tr><tr><td>address</td><td>delegate</td><td>0x0</td></tr></tbody></table><p>接下来，代码将<code>A</code> 的<code>voted</code>设为<code>true</code> (sender.voted = true;)，权重被累加到了对应的提案票数上，我们会发现，这对于投票结果并没有什么影响（<code>A</code> 的<code>weight</code> 值为<code>0</code>），但是因为此时<code>A.voted = true</code> ，当主持人<code>chairperson</code> 试图给<code>A</code> 赋予投票权时将无法正常执行，这就导致<code>A</code>永久不能拥有投票权，显然这是不合适的。</p><h3 id="2-提案不存在"><a href="#2-提案不存在" class="headerlink" title="2. 提案不存在"></a>2. 提案不存在</h3><p>同样在<code>vote</code>函数中，如果调用者输入的参数<code>proposal</code> 并不存在(即<code>proposal &gt;= proposals.length)</code>，导致数组越界，虽然这不会给合约的安全性带来问题，但是会造成调用执行失败，显然这不是我们希望看到的。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><code>注意</code>：</h4><p>在<code>delegate</code>函数中也出现了上面两个问题，具体不再描述。</p><h3 id="3-提案票数相同"><a href="#3-提案票数相同" class="headerlink" title="3. 提案票数相同"></a>3. 提案票数相同</h3><p>在获取最高票数的提案编号<code>winningProposal</code> 和提案名称<code>winnerName</code> 的方法中，如果出现两个或者多个提案的票数最高且相同时，只会返回编号靠前的提案编号。</p><p><code>代码优化</code>请点<a href="https://github.com/luckydog612/ballot/blob/master/ballot.sol">这里</a>查看</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity 投票 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比特币中的Base58和Base58Check编码</title>
      <link href="/2018/07/23/bi-te-bi-zhong-de-base58-he-base58check-bian-ma/"/>
      <url>/2018/07/23/bi-te-bi-zhong-de-base58-he-base58check-bian-ma/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>为了更简洁方便地表示长串的数字，使用更少的符号，计算机系统会使用一种以数字和字母组成的大于十进制的表示法，比如十六进制，一个同样的数字，它的十六进制表示就会比十进制表示更加简洁。<code>Base64</code>使用了26个小写字母、26个大写字母、10个数字以及两个符号(“+”和“/”)，用于在电子邮件这样的基于文本的媒介中传输二进制数据。</p><p><code>Base58</code>是一种基于文本的二进制编码格式，这种编码格式不仅实现了数据压缩，保持了易读性，还具有错误诊断功能。<code>Base58</code>是<code>Base56</code>编码格式的子集，同样使用了大小写字母和10个数字，但舍弃了一些容易错读和容易混淆的字符，具体是<code>Base58</code>不含<code>Base64</code>中的0（数字0）、O（大写字母o）、l（小写字母 L）、I（大写字母i），以及“+”和“/”两个字符。</p><p><code>Base58</code>字母表:</p><pre class="language-bash" data-language="bash"><code class="language-bash">123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</code></pre><p><code>Base58Check</code> 是一种用在比特币中的<code>Base58</code> 编码格式，比特币有内置的检查错误的编码。校验和是从编码的数据的哈希值中得到的，可以用来检测并避免转录和输入中产生的错误。使用<code>Base58Check</code>编码时，解码软件会计算数据的校验和并和编码中自带的校验和进行对比。二者不匹配则表明有错误产生，那么这个<code>Base58Check</code>的数据就是无效的。</p><h1 id="Base58Check编码过程"><a href="#Base58Check编码过程" class="headerlink" title="Base58Check编码过程"></a>Base58Check编码过程</h1><p>1.首先对数据添加一个版本前缀，这个前缀用来识别编码的数据类型。例如，比特币地址的前缀是0（十六进制是0x00）。<br>2.对数据连续进行两次<code>SHA256</code>哈希算法</p><pre class="language-bash" data-language="bash"><code class="language-bash">checksum <span class="token operator">=</span> SHA256<span class="token punctuation">(</span>SHA256<span class="token punctuation">(</span>prefix+data<span class="token punctuation">))</span></code></pre><p>3.在产生的长度为32个字节（两次哈希云算）的哈希值中，取其前4个字节作为检验和添加到数据第一步产生的数据之后。<br>4.将数据进行<code>Base58</code>编码处理</p><p>下图描述了<code>Base58Check</code>的编码过程。<br><img src="https://img-blog.csdn.net/20180723151412813?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Base58Check"></p><p>在比特币中，大多数需要向用户展示的数据都使用<code>Base58Check</code>编码，可以实现数据压缩，易读而且有错误检验。<code>Base58Check</code>编码中的版本前缀是用来创造易于辨别的格式，在<code>Base58</code>里的格式在<code>Base58Check</code>编码的有效载荷的开始包含了明确的属性。这些属性使用户可以轻松明确被编码的数据的类型以及如何使用它们。</p><p>Base58Check版本前缀和编码后的结果<br><img src="https://img-blog.csdn.net/20180723151716717?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Base58 Base58Check </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公钥私钥以及比特币地址的产生过程</title>
      <link href="/2018/07/23/gong-yao-si-yao-yi-ji-bi-te-bi-di-zhi-de-chan-sheng-guo-cheng/"/>
      <url>/2018/07/23/gong-yao-si-yao-yi-ji-bi-te-bi-di-zhi-de-chan-sheng-guo-cheng/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>一个比特币钱包包含一系列的密钥对，每个密钥对都有一个公钥（PublicKey）和私钥（PrivateKey）。私钥是由一个随机产生的数字串经过哈希的十六进制字符串，通过椭圆加密算法可以用私钥产生公钥，然后就可以通过公钥产生比特币地址。从私钥到公钥再到比特币地址是一个单向产生的过程，也就是说不能反向的用比特币地址解出公钥，或者从公钥解出私钥。<br><img src="https://img-blog.csdn.net/20180723105323989?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="公钥-->私钥-->比特币地址"><br>#私钥<br>私钥其本质就是一个256位的由0和1组成的随机数，这个随机数是怎么产生的不重要，只要是不可预测和不可重复的都可以，比如可以将硬币的正反面看成是0和1，然后随机掷256次，记录下的一串数字就可以作为私钥。在比特币中，私钥的格式是将这个256位的随机数以64位十六进制数显示，也就是64个（一个十六进制数占4位）我们所看到的用字母和数字组成的“乱码”。下面是一个私钥：</p><pre class="language-bash" data-language="bash"><code class="language-bash">1E99423A4ED27608A15A2616A2B0E9E52CED330AC530EDCC32C8FFC6A526AEDD</code></pre><p>有人可能会想，这个私钥会不会存在重复的，也就是完全相同的两个私钥，比特币私钥的空间大小为2^256，用十进制表示大约是10^77，而在可见的宇宙中，原子数在 10^78 到 10^82 之间，所以私钥的空间是一个很大的数，可以认为不存在相同的两个私钥。</p><p>#公钥<br>公钥是将私钥通过一个椭圆曲线乘法（<code>K = k * G</code> ，其中<code>k</code>是私钥，<code>G</code>是被称为生成点的常数点，而<code>K</code>是所得公钥）的算法计算得来，这是一个不可逆转的过程，即不可能反向计算由公钥计算得来私钥。<br>##椭圆曲线加密算法<br><a href="https://blog.csdn.net/luckydog612/article/details/80557063">椭圆曲线加密法</a>（可点击链接具体了解）是一种基于离散对数问题的非对称加密法，可以用对椭圆曲线上的点进行加法或乘法运算来表达。 下图是一个椭圆曲线的示例：<br><img src="https://img-blog.csdn.net/20180723130313571?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="椭圆曲线"><br>比特币使用的是由美国国家标准与技术研究院 （NIST）设立的<code>secp256k1</code>标准所定义的一种特殊的椭圆曲线和一系列数学常数。secp256k1曲线由下述函数定义，该函数可产生一条椭圆曲线，然后利用这条曲线进而生成公钥。<br><img src="https://img-blog.csdn.net/20180723131233255?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>##生成公钥<br>前面说过，比特币中私钥经过椭圆曲线乘法计算之后即可得到公钥，且该过程不可逆转，即只能通过私钥得到公钥，而不能右公钥得到私钥，下面讲述一下椭圆曲线乘法的计算过程。<br>首先将之前所提到的私钥与生成点<code>G</code>相乘得到公钥<code>K</code> ：</p><pre class="language-bash" data-language="bash"><code class="language-bash">K <span class="token operator">=</span> 1E99423A4ED27608A15A2616A2B0E9E52CED330AC530EDCC32C8FFC6A526AEDD * G</code></pre><p>公钥<code>K</code> 被定义为一个点<code> K = (x, y)</code> 其中</p><pre class="language-bash" data-language="bash"><code class="language-bash">x <span class="token operator">=</span> F028892BAD7ED57D2FB57BF33081D5CFCF6F9ED3D3D7F159C2E2FFF579DC341A y <span class="token operator">=</span> 07CF33DA18BD734C600B96A72BBC4749D5141C90EC8AC328AE52DDFE2E505BDB</code></pre><p>我们的目标是找到生成点<code>G</code> 的倍数点<code>kG</code> ，在椭圆曲线中，点的相加等同于从该点画切线找到与曲线相交的另一 点，然后翻折到x轴。下图展示的是在椭圆曲线上找G、2G、4G的几何操作。<br><img src="https://img-blog.csdn.net/2018072313381831?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>#比特币地址<br>比特币地址是由公钥经过一系列单向的哈希算法得到。哈希算法是一种单向函数，可以接收任意长度的输入产生指纹或哈希。由公钥生成比特币地址时使用的算法是Secure Hash Algorithm (SHA)和the RACE Integ rity Primitives Evaluation Message Digest (RIPEMD)，具体一点说就是<code>SHA256</code>和<code>RIPEMD160</code>。</p><p>以公钥<code>K</code>为输入，计算其<code>SHA256</code>哈希，然后再计算<code>RIPEMD160</code>哈希，所得到的160位（20字节）的数字就是比特币地址。</p><pre class="language-bash" data-language="bash"><code class="language-bash">A <span class="token operator">=</span> RIPEMD160<span class="token punctuation">(</span>SHA256<span class="token punctuation">(</span>K<span class="token punctuation">))</span>  //其中K是公钥，A是比特币地址</code></pre><p>但是，我们会发现产生的比特币地址和我们用户通常所见到的不一样，这是因为为了提高可读性、避免歧义并有效地防止在地址转录和输入中产生错误，我们看到的比特币地址是经过<a href="https://blog.csdn.net/luckydog612/article/details/81168276">Base58Check</a> 编码的，下图描述了从公钥产生比特币地址的过程：<br><img src="https://img-blog.csdn.net/20180723135730909?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="公钥生成比特币地址"></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比特币地址 公钥 私钥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu命令卸载软件</title>
      <link href="/2018/07/01/ubuntu-ming-ling-xie-zai-ruan-jian/"/>
      <url>/2018/07/01/ubuntu-ming-ling-xie-zai-ruan-jian/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>1.打开一个终端，输入<code>dpkg --list</code> ,按下Enter键，终端输出以下内容，显示的是你电脑上安装的所有软件。<br><img src="https://img-blog.csdn.net/20180701201216992?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="软件列表"></p><p>2.在终端中找到你需要卸载的软件的名称，列表是按照首字母排序的。<br><img src="https://img-blog.csdn.net/20180701201418693?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="找到要卸载的软件包"><br>3.在终端上输入命令<code>sudo apt-get --purge remove 包名</code>（<code>--purge</code>是可选项，写上这个属性是将软件及其配置文件一并删除，如不需要删除配置文件，可执行<code>sudo apt-get remove 包名</code>） ，此处我要删除的是<code>polipo</code> ，那么在终端输入<code>sudo apt-get --purge remove polipo</code>，按下回车，输入密码，再次回车。<br><img src="https://img-blog.csdn.net/20180701202207502?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="输入删除命令"><br>4.执行过程中，会提示你是否真的要删除（继续执行删除命令），在终端输入<code>y</code> ，然后回车，删除程序继续执行。<br><img src="https://img-blog.csdn.net/20180701202534321?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="确认删除"><br>5.正常情况下，再次出现输入命令行删除成功。<br><img src="https://img-blog.csdn.net/20180701202824995?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="删除成功"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLedger Fabric - 超级账本（10）简单的资产链码(chaincode)</title>
      <link href="/2018/06/26/hyperledger-fabric-chao-ji-zhang-ben-10-jian-dan-de-zi-chan-lian-ma-chaincode/"/>
      <url>/2018/06/26/hyperledger-fabric-chao-ji-zhang-ben-10-jian-dan-de-zi-chan-lian-ma-chaincode/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>应用程序是一个基本样本链代码，用于在分类账上创建资产</p><p><strong>安装Go及Docker, Docker-compose, 并配置Go相应的环境变量</strong></p><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>为chaincode应用程序创建一个目录作为其子目录</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p <span class="token variable">$GOPATH</span>/src/test $ <span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/test</code></pre><h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><p>新建一个文件,用于编写Go代码</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">touch</span> test.go$ <span class="token function">vim</span> test.go</code></pre><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>必须实现 <a href="http://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Chaincode">Chaincode接口</a>的<code>Init</code>和<code>Invoke</code>函数。因此，须在文件中添加go import语句以获取链代码的依赖。</p><p>导入chaincode shim包和 <a href="http://godoc.org/github.com/hyperledger/fabric/protos/peer">peer protobuf包</a>。然后添加一个结构<code>SimpleChaincdoe</code>作为Chaincode函数的接收器</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"github.com/hyperledger/fabric/core/chaincode/shim"</span>    <span class="token string">"github.com/hyperledger/fabric/protos/peer"</span><span class="token punctuation">)</span><span class="token keyword">type</span> SimpleChaincdoe <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="初始化Chaincode"><a href="#初始化Chaincode" class="headerlink" title="初始化Chaincode"></a>初始化Chaincode</h4><p>Init方法</p><ul><li>获取参数, 使用<a href="http://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.GetStringArgs">GetStringArgs</a> 函数检索调用 的参数</li><li>检查合法性, 检查参数数量是否为2个, 如果不是, 则返回错误信息</li><li>利用两参数, 调用PutState方法向账本中写入状态, 如果有错误则返回(shim.Error()), 否则返回nil(shim.Success)</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>SimpleChaincdoe<span class="token punctuation">)</span> <span class="token function">Init</span><span class="token punctuation">(</span>stub shim<span class="token punctuation">.</span>ChaincodeStubInterface<span class="token punctuation">)</span> peer<span class="token punctuation">.</span>Response <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="调用实现"><a href="#调用实现" class="headerlink" title="调用实现"></a>调用实现</h4><p>Invoke方法</p><p>验证函数名称为<code>set</code>或<code>get</code>，并调用那些链式代码应用程序函数，通过<code>shim.Success</code>或<code>shim.Error</code>函数返回响应</p><ul><li>获取函数名与参数</li><li>对获取到的参数名称进行判断, 如果为set, 则调用set方法, 反之调用get</li><li>set/get函数返回两个值(result, err)</li><li>如果err不为空则返回错误</li><li>err为空则返回[]byte(result)</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>SimpleChaincdoe<span class="token punctuation">)</span> <span class="token function">Invoke</span><span class="token punctuation">(</span>stub shim<span class="token punctuation">.</span>ChaincodeStubInterface<span class="token punctuation">)</span> peer<span class="token punctuation">.</span>Response <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="实现Chaincode应用"><a href="#实现Chaincode应用" class="headerlink" title="实现Chaincode应用"></a>实现Chaincode应用</h4><p>chaincode应用程序实现了两个可以通过<code>Invoke</code>函数调用的函数(set/get)</p><p>为了访问分类账的状态，利用 chaincode shim API 的<a href="http://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Chaincodetub.PutState">ChaincodeStubInterface.PutState</a> 和<a href="http://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStub.GetState">ChaincodeStubInterface.GetState</a>函数</p><h5 id="set函数-返回两个值"><a href="#set函数-返回两个值" class="headerlink" title="set函数, 返回两个值"></a>set函数, 返回两个值</h5><ul><li>检查参数个数是否为2</li><li>利用PutState方法将状态写入</li><li>如果成功,则返回要写入的状态, 失败返回错误: fmt.Errorf(“…”)</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">set</span><span class="token punctuation">(</span>stub shim<span class="token punctuation">.</span>ChaincodeStubInterface<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="get函数-返回两个值"><a href="#get函数-返回两个值" class="headerlink" title="get函数, 返回两个值"></a>get函数, 返回两个值</h5><ul><li>接收参数并判断个数 是否为1个</li><li>调用GetState方法返回并接收两个返回值(value, err)</li><li>判断err及value是否为空 return “”, fmt.Errorf(“……”)</li><li>返回值 return string(value), nil</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">get</span><span class="token punctuation">(</span>stub shim<span class="token punctuation">.</span>ChaincodeStubInterface<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>main方法</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> shim<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>SimpleChaincdoe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error starting SimpleAsset chaincode: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="构建Chaincode"><a href="#构建Chaincode" class="headerlink" title="构建Chaincode"></a>构建Chaincode</h3><h4 id="编译chaincode"><a href="#编译chaincode" class="headerlink" title="编译chaincode"></a>编译chaincode</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ go get -u --tags nopkcs11 github.com/hyperledger/fabric/core/chaincode/shim$ go build --tags nopkcs11</code></pre><h4 id="使用开发模式测试"><a href="#使用开发模式测试" class="headerlink" title="使用开发模式测试"></a>使用开发模式测试</h4><p>正常情况下chaincode由对等体启动和维护。然而，在“开发模式”下，链码由用户构建并启动</p><p><strong>如果没有安装Hyperledger Fabric Samples请先安装</strong></p><p><strong>如果没有下载Docker images请先下载</strong></p><p>跳转至<code>fabric-samples</code>的<code>chaincode-docker-devmode</code>目录</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/hyfa/fabric-samples/chaincode-docker-devmode/</code></pre><p>使用<code>docker images</code>查看Docker镜像信息(显示本地Docker Registry)</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> images</code></pre><p>会看到如下输出</p><pre class="language-bash" data-language="bash"><code class="language-bash">REPOSITORY                     TAG                  IMAGE ID            CREATED             SIZEhyperledger/fabric-tools       latest             b7bfddf508bc        About an hour ago   <span class="token number">1</span>.46GBhyperledger/fabric-tools       x86_64-1.1.0       b7bfddf508bc        About an hour ago   <span class="token number">1</span>.46GBhyperledger/fabric-orderer     latest             ce0c810df36a        About an hour ago   180MBhyperledger/fabric-orderer     x86_64-1.1.0       ce0c810df36a        About an hour ago   180MBhyperledger/fabric-peer        latest             b023f9be0771        About an hour ago   187MBhyperledger/fabric-peer        x86_64-1.1.0       b023f9be0771        About an hour ago   187MBhyperledger/fabric-javaenv     latest             82098abb1a17        About an hour ago   <span class="token number">1</span>.52GBhyperledger/fabric-javaenv     x86_64-1.1.0       82098abb1a17        About an hour ago   <span class="token number">1</span>.52GBhyperledger/fabric-ccenv       latest             c8b4909d8d46        About an hour ago   <span class="token number">1</span>.39GBhyperledger/fabric-ccenv       x86_64-1.1.0       c8b4909d8d46        About an hour ago   <span class="token number">1</span>.39GB<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><h4 id="使用三个终端"><a href="#使用三个终端" class="headerlink" title="使用三个终端"></a>使用三个终端</h4><h5 id="终端1-启动网络"><a href="#终端1-启动网络" class="headerlink" title="终端1 启动网络"></a>终端1 启动网络</h5><h6 id="启动网络"><a href="#启动网络" class="headerlink" title="启动网络"></a>启动网络</h6><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker-compose</span> -f docker-compose-simple.yaml up -d</code></pre><p>上面的命令以<code>SingleSampleMSPSolo</code>orderer配置文件启动网络，并以“dev模式”启动对等体。它还启动了两个额外的容器 : 一个用于chaincode环境，一个用于与chaincode交互的CLI。创建和加入通道的命令被嵌入到CLI容器中，因此可以立即跳转到链式代码调用</p><h5 id="终端2-建立并启动链码"><a href="#终端2-建立并启动链码" class="headerlink" title="终端2 建立并启动链码"></a>终端2 建立并启动链码</h5><p>打开第二个终端, 进入到<code>chaincode-docker-devmode</code> 目录</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/hyfa/fabric-samples/chaincode-docker-devmode/</code></pre><p>进入</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it chaincode <span class="token function">bash</span></code></pre><p>命令提示符变为:</p><pre class="language-bash" data-language="bash"><code class="language-bash">root@858726aed16e:/opt/gopath/src/chaincode<span class="token comment">#</span></code></pre><h6 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h6><p>进入test目录编译chaincode</p><pre class="language-bash" data-language="bash"><code class="language-bash">root@858726aed16e:/opt/gopath/src/chaincode<span class="token comment">#  cd test</span>root@858726aed16e:/opt/gopath/src/chaincode/test<span class="token comment">#  go build</span></code></pre><h6 id="运行chaincode"><a href="#运行chaincode" class="headerlink" title="运行chaincode"></a>运行chaincode</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>peer:7052 <span class="token assign-left variable">CORE_CHAINCODE_ID_NAME</span><span class="token operator">=</span>test:0 ./test</code></pre><h5 id="终端3-使用链码"><a href="#终端3-使用链码" class="headerlink" title="终端3 使用链码"></a>终端3 使用链码</h5><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it cli <span class="token function">bash</span></code></pre><h6 id="安装及实例化"><a href="#安装及实例化" class="headerlink" title="安装及实例化"></a>安装及实例化</h6><p>进入CLI容器后执行如下命令安装及实例化chaincode</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode <span class="token function">install</span> -p chaincodedev/chaincode/test -n <span class="token builtin class-name">test</span> -v <span class="token number">0</span>peer chaincode instantiate -n <span class="token builtin class-name">test</span> -v <span class="token number">0</span> -c <span class="token string">'{"Args":["init","a","10"]}'</span> -C myc</code></pre><h6 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h6><p>进行调用,将<code>a</code>的值更改为<code>20</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke -n <span class="token builtin class-name">test</span> -c <span class="token string">'{"Args":["set", "a", "20"]}'</span> -C myc</code></pre><p>执行成功, 输出如下内容</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> Chaincode invoke successful. result: status:200 payload:<span class="token string">"20"</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><p>查询<code>a</code>的值</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode query -n <span class="token builtin class-name">test</span> -c <span class="token string">'{"Args":["query","a"]}'</span> -C myc</code></pre><p>执行成功, 输出: <code>Query Result: 20</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabric 超级账本 链码 chaincode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLedger Fabric - 超级账本（9）区块链应用开发</title>
      <link href="/2018/06/26/hyperledger-fabric-chao-ji-zhang-ben-9-qu-kuai-lian-ying-yong-kai-fa/"/>
      <url>/2018/06/26/hyperledger-fabric-chao-ji-zhang-ben-9-qu-kuai-lian-ying-yong-kai-fa/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>数字货币曾是区块链技术的唯一应用场景</p><p>对智能合约的支持突破了场景限制, 丰富了区块链应用的适用范围, 可以支持多行业、大规模的商业应用</p><h3 id="区块链应用"><a href="#区块链应用" class="headerlink" title="区块链应用"></a>区块链应用</h3><p>区块链应用: 一般由若干部署在区块链网络中的智能合约, 以及调用这些智能合约的应用程序组成</p><p>用户专注于与业务本身相关的应用程序</p><p>智能合约则封装了与区块链账本直接交互的相关过程, 被应用程序调用</p><h4 id="智能合约开发"><a href="#智能合约开发" class="headerlink" title="智能合约开发"></a>智能合约开发</h4><p>智能合约本质上是为了对上层业务逻辑进行支持且直接与账本结构打交道, 处于核心位置.</p><p>所以设计得当可以简化上层应用开发的过程</p><h4 id="应用程序开发"><a href="#应用程序开发" class="headerlink" title="应用程序开发"></a>应用程序开发</h4><p>应用程序通过调用智能合约提供的方法接口实现业务逻辑, 可以使用JavaScript、Python、Go、Java等主流语言进行开发</p><h2 id="链码的原理"><a href="#链码的原理" class="headerlink" title="链码的原理"></a>链码的原理</h2><p>链码延伸自智能合约的概念, 支持使用主流高级编程语言实现</p><p>区块链网络中的成员商定业务逻辑后, 可将业务逻辑编程到链码中, 所有人遵守合约执行</p><p>链码会创建一些状态（state）并写入账本中。状态带有绑定到链码的命名空间，仅限于创建他的链码使用，不能被其他链码直接访问。不过，在合适的范围内，一个链码也可以调用另一个链码，间接访问其状态</p><p>链码在Fabric节点上的隔离沙盒(目前为Docker容器)中运行, 并通过gRPC协议与节点进行交互</p><ul><li>调用链码</li><li>读写账本</li><li>返回响应</li><li>……</li></ul><p>Fabric中支持多种语言实现链码，包括Golang、JavaScript、Java等</p><h4 id="基本工作原理"><a href="#基本工作原理" class="headerlink" title="基本工作原理"></a>基本工作原理</h4><ol><li>首先用户通过客户端向Fabric的背书节点发出调用链码的交易提案</li><li>节点对交易提案进行包括ACL权限检查在内的各种检验, 通过后则创建模拟执行这一交易的环境</li><li>之后, 节点和链码容器之间通过gRPC消息来交互, 模拟执行交易并给出背书结论</li><li>当链码的代码逻辑需要读写账本时,通过shim层发送相应操作类型给节点, 节点本地操作账本后返回响应消息</li><li>客户端收到足够的背书节点的支持后, 便可以将这笔交易发送给排序节点进行排序, 并最终写入区块链</li></ol><h2 id="链码接口与结构"><a href="#链码接口与结构" class="headerlink" title="链码接口与结构"></a>链码接口与结构</h2><h3 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h3><p>链码实现需要引入如下依赖包</p><ul><li><p>“github.com/hyperledger/fabric/core/chaincode/shim”</p><ol><li>shim包提供了链码与账本交互的中间层</li><li>链码通过shim.ChaincodeStub提供的方法来读取和修改账本状态</li></ol></li><li><p>“github.com/hyperledger/fabric/protos/peer”</p><ul><li>peer.Response: 响应信息</li></ul></li></ul><h3 id="链码接口"><a href="#链码接口" class="headerlink" title="链码接口"></a>链码接口</h3><p>每个链码都需要实现chaincode接口：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Chaincode <span class="token keyword">interface</span><span class="token punctuation">{</span>    <span class="token function">Init</span><span class="token punctuation">(</span>stub ChaincodeStubInterface<span class="token punctuation">)</span> peer<span class="token punctuation">.</span>Response    <span class="token function">Invoke</span><span class="token punctuation">(</span>stub ChaincodeStubInterface<span class="token punctuation">)</span> peer<span class="token punctuation">.</span>Response<span class="token punctuation">}</span></code></pre><h3 id="Init与Invoke方法"><a href="#Init与Invoke方法" class="headerlink" title="Init与Invoke方法"></a>Init与Invoke方法</h3><p>编写链码, 关键是实现Init与Invoke两个方法</p><p>Init方法在链码部署或升级时被调用, 完成初始化工作</p><p>对数据进行操作时, Invoke方法被调用, 因此响应调用或查询的业务逻辑都需要在此方法中实现</p><h3 id="必要结构"><a href="#必要结构" class="headerlink" title="必要结构"></a>必要结构</h3><p>一个链码的必要结构如下</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment">//引入必要的包</span><span class="token keyword">import</span><span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"github.com/hyperledger/fabric/core/chaincode/shim"</span>    <span class="token string">"github.com/hyperledger/fabric/protos/peer"</span><span class="token punctuation">)</span><span class="token comment">//声明一个结构体</span><span class="token keyword">type</span> SimpleChaincode <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//为结构体添加Init方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>SimpleChaincode<span class="token punctuation">)</span> <span class="token function">Init</span><span class="token punctuation">(</span>stub shim<span class="token punctuation">.</span>ChaincodeStubInterface<span class="token punctuation">)</span> peer<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>  <span class="token comment">//在该方法中实现链码初始化或升级时的处理逻辑</span>  <span class="token comment">//编写时可灵活使用stub中的API</span><span class="token punctuation">}</span><span class="token comment">//为结构体添加Invoke方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>SimpleChaincode<span class="token punctuation">)</span> <span class="token function">Invoke</span><span class="token punctuation">(</span>stub shim<span class="token punctuation">.</span>ChaincodeStubInterface<span class="token punctuation">)</span> peer<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>  <span class="token comment">//在该方法中实现链码运行中被调用或查询时的处理逻辑</span>  <span class="token comment">//编写时可灵活使用stub中的API</span><span class="token punctuation">}</span><span class="token comment">//主函数，需要调用shim.Start（ ）方法</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  err <span class="token operator">:=</span> shim<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>SimpleChaincode<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error starting Simple chaincode: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="链码API"><a href="#链码API" class="headerlink" title="链码API"></a>链码API</h2><h3 id="账本状态交互API"><a href="#账本状态交互API" class="headerlink" title="账本状态交互API"></a>账本状态交互API</h3><p>链码需要将数据记录在分布式账本中.需要记录的数据称为状态, 以K-V对的形式存储</p><p><strong>账本状态交互API</strong>可以对账本状态进行操作</p><p>GetState(key string) ([]byte, error) 通过Key来返回数组的特定值</p><p>PutState(key string, value []byte) error 账本中写入特定的键和值</p><p>DelState(key string) error 从账本中移除指定的键和值</p><p>GetStateByRange(startKey, endKey string) (StateQueryIteratorInterface, error) 根据指定的范围内的健值</p><p>GetHistoryForKey(key string) (HistoryQueryIteratorInterface, error) 返回指定健的所有历史值</p><p>GetQueryResult(query string) (StateQueryIteratorInterface, error) 对(支持富查询功能的)状态数据库进行富查询</p><h3 id="交易信息相关API"><a href="#交易信息相关API" class="headerlink" title="交易信息相关API"></a>交易信息相关API</h3><p>GetTxID() string 返回交易提案中指定的交易ID</p><p>GetTxTimestamp() (*timestamp.Timestamp, error) 返回交易创建的时间戳，这个时间戳是peer收到交易的当前时间</p><p>GetBinding() ([]byte, error) 返回交易的binding信息</p><p>GetSignedProposal() (*pb.SignedProposal, error) 返回与交易提案相关的所有数据</p><p>GetCreator() ([]byte, error) 返回该交易的提交者的身份信息</p><p>GetTransient() (map[string][]byte, error) 返回交易中不会被写至账本中的一些临时信息</p><h3 id="参数API"><a href="#参数API" class="headerlink" title="参数API"></a>参数API</h3><p>GetArgs() [][]byte 返回调用链码时交易提案中指定的参数</p><p>GetArgsSlice() ([]byte, error) 返回调用链码时交易提案中指定的参数</p><p>GetFunctionAndParameters() (function string, params []string) 返回调用链码时交易提案中指定的被调用的函数名称及其参数</p><p>GetStringArgs() []string 返回调用链码时指定的参数</p><p>-c ‘{“Args”:[“fn”, “param1”, “param2”, “paramN”]}’</p><h2 id="示例-HelloWorld"><a href="#示例-HelloWorld" class="headerlink" title="示例(HelloWorld)"></a>示例(HelloWorld)</h2><h3 id="Init方法"><a href="#Init方法" class="headerlink" title="Init方法"></a>Init方法</h3><ul><li>获取参数并判断参数长度是否为2  <ul><li>参数: Key, Value</li></ul></li><li>调用PutState方法将状态写入账本中</li><li>如果有错误, 则返回</li><li>打印输出提示信息</li><li>返回成功</li></ul><h3 id="Invoke方法"><a href="#Invoke方法" class="headerlink" title="Invoke方法"></a>Invoke方法</h3><ul><li>获取参数并判断长度是否为1</li><li>利用第1个参数获取对应状态GetState(key)</li><li>如果有错误则返回</li><li>如果返回值为空则返回错误</li><li>返回成功状态</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabric 超级账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLedger Fabric - 超级账本（8）Node测试</title>
      <link href="/2018/06/26/hyperledger-fabric-chao-ji-zhang-ben-8-node-ce-shi/"/>
      <url>/2018/06/26/hyperledger-fabric-chao-ji-zhang-ben-8-node-ce-shi/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="node测试"><a href="#node测试" class="headerlink" title="node测试"></a>node测试</h1><p>关闭网络</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./byfn.sh <span class="token punctuation">\</span>-m down</code></pre><h3 id="进入到fabric-samples-x2F-fabcar目录中"><a href="#进入到fabric-samples-x2F-fabcar目录中" class="headerlink" title="进入到fabric-samples/fabcar目录中"></a>进入到fabric-samples/fabcar目录中</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/fabcar/$ <span class="token function">ls</span></code></pre><blockquote><p>如果是完整的环境,目录中应该包含如下文件:</p><p><code>enrollAdmin.js invoke.js package.json query.js registerUser.js startFabric.sh</code></p></blockquote><h3 id="移除所有处于活动中的Docker容器"><a href="#移除所有处于活动中的Docker容器" class="headerlink" title="移除所有处于活动中的Docker容器"></a>移除所有处于活动中的Docker容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> -aq<span class="token variable">)</span></span></code></pre><p>docker rm : 删除当前指定的Docker容器</p><p>docker rm -f $(docker ps -aq)</p><p> -f: 强制删除</p><p>查看Docker</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">ps</span></code></pre><h3 id="清除所有的网络缓存"><a href="#清除所有的网络缓存" class="headerlink" title="清除所有的网络缓存:"></a>清除所有的网络缓存:</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> network prune</code></pre><h3 id="删除链码图像-链码镜像"><a href="#删除链码图像-链码镜像" class="headerlink" title="删除链码图像(链码镜像)"></a>删除链码图像(链码镜像)</h3><p>删除fabcar智能合约的底层链码图像。如果您是第一次运行此项目可以不执行(系统上不会有此链接代码图像)</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> rmi dev-peer0.org1.example.com-fabcar-1.0-5c906e402ed29f20260ae42283216aa75549c571e2e380f3615826365d8269ba</code></pre><p>删除指定的Docker镜像文件</p><p> docker rmi image_id</p><h3 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h3><p>安装应用程序的Fabric依赖关系</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span></code></pre><blockquote><p><strong>下载最好使用稳定的VPN</strong></p><p>npm install: 根据 package.json 读取依赖的信息并安装</p><p><strong>如果未安装Node则先按如下步骤安装Node及npm</strong></p><h4 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h4><pre class="language-none"><code class="language-none">$ sudo apt update$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.10/install.sh | bash$ export NVM_DIR="$HOME/.nvm"$ [ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh" </code></pre><h4 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h4><pre class="language-none"><code class="language-none">$ nvm install v8.11.1</code></pre><p>检查Node版本</p><pre class="language-none"><code class="language-none">$ node -v</code></pre><p>输出: <code>v8.11.1</code></p><p>检查npm版本</p><pre class="language-none"><code class="language-none">$ npm -v</code></pre><p>输出: <code>5.6.0</code></p></blockquote><h3 id="启动网络"><a href="#启动网络" class="headerlink" title="启动网络"></a>启动网络</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./startFabric.sh</code></pre><p>该命令将启动各种Fabric实体，并启动用Golang编写的链式代码的智能合约容器</p><hr><blockquote><p>如出现以下错误</p><pre class="language-none"><code class="language-none">ERROR: manifest for hyperledger/fabric-ca:latest not found</code></pre><p>则说明环境中缺少 fabric-ca 镜像</p><pre class="language-none"><code class="language-none">下载镜像$ sudo docker pull hyperledger/fabric-ca:x86_64-1.1.0-preview将其标记为最新$ sudo docker tag hyperledger/fabric-ca:x86_64-1.1.0-preview hyperledger/fabric-ca:latest检查$ sudo docker images重新启动$ sudo ./startFabric.sh</code></pre></blockquote><hr><h4 id="可选执行-流式处理CA日志-打开新的终端并执行如下命令"><a href="#可选执行-流式处理CA日志-打开新的终端并执行如下命令" class="headerlink" title="可选执行(流式处理CA日志, 打开新的终端并执行如下命令)"></a>可选执行(流式处理CA日志, 打开新的终端并执行如下命令)</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> logs -f ca.example.com</code></pre><h3 id="注册管理员用户"><a href="#注册管理员用户" class="headerlink" title="注册管理员用户"></a>注册管理员用户</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span> enrollAdmin.js</code></pre><p>命令执行后输出如下内容:</p><pre class="language-bash" data-language="bash"><code class="language-bash">Successfully enrolled admin user <span class="token string">"admin"</span>Assigned the admin user to the fabric client ::<span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"admin"</span>,<span class="token string">"mspid"</span><span class="token builtin class-name">:</span><span class="token string">"Org1MSP"</span>,<span class="token string">"roles"</span>:null,<span class="token string">"affiliation"</span><span class="token builtin class-name">:</span><span class="token string">""</span>,<span class="token string">"enrollmentSecret"</span><span class="token builtin class-name">:</span><span class="token string">""</span>,<span class="token string">"enrollment"</span>:<span class="token punctuation">{</span><span class="token string">"signingIdentity"</span><span class="token builtin class-name">:</span><span class="token string">"dc412dcc161b5732737e98e77fda03433b55408d79b10195f0ff150fc995924a"</span>,<span class="token string">"identity"</span>:<span class="token punctuation">{</span><span class="token string">"certificate"</span><span class="token builtin class-name">:</span><span class="token string">"-----BEGIN CERTIFICATE-----<span class="token entity" title="\n">\n</span>MIICATCCAaigAwIBAgIUMjxyVKytJHiYigb+usxuVlmeI8kwCgYIKoZIzj0EAwIw<span class="token entity" title="\n">\n</span>czELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh<span class="token entity" title="\n">\n</span>biBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMT<span class="token entity" title="\n">\n</span>E2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMTgwNDI2MDcyNzAwWhcNMTkwNDI2MDcz<span class="token entity" title="\n">\n</span>MjAwWjAhMQ8wDQYDVQQLEwZjbGllbnQxDjAMBgNVBAMTBWFkbWluMFkwEwYHKoZI<span class="token entity" title="\n">\n</span>zj0CAQYIKoZIzj0DAQcDQgAEszinoLQrvnKVYl9FUT8ebxT2jIz5lKCk5olL1cox<span class="token entity" title="\n">\n</span>/JchmLPG8Ew1roM2TgG64rvT1nrl1EvMwmD8oEOMgmGqwKNsMGowDgYDVR0PAQH/<span class="token entity" title="\n">\n</span>BAQDAgeAMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFNG9kJBZBDSOwFxVHTDByNOl<span class="token entity" title="\n">\n</span>MvDSMCsGA1UdIwQkMCKAIEI5qg3NdtruuLoM2nAYUdFFBNMarRst3dusalc2Xkl8<span class="token entity" title="\n">\n</span>MAoGCCqGSM49BAMCA0cAMEQCIA1Ugh8NW3tS0GkuUrURdwQrSnFkdWTQhJ1/GvRd<span class="token entity" title="\n">\n</span>JbeTAiBGdDpHu/6mZG8dpguA0EaqSHrWJBQra4Vj1Fm9F1+zNg==<span class="token entity" title="\n">\n</span>-----END CERTIFICATE-----<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>成功执行后会调用证书签名请求（CSR），并最终将eCert和密钥材料输出到此文件夹中<code>./hfc-key-store</code>, 应用程序将在创建用户或加载身份对象时查找此位置</p><h3 id="注册-user1用户"><a href="#注册-user1用户" class="headerlink" title="注册 user1用户"></a>注册 user1用户</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span> registerUser.js</code></pre><p>user1</p><p>该命令执行后调用CSR并将密钥和eCert输出到<code>./hfc-key-store</code>子目录中</p><p>执行命令后输出如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash">Successfully loaded admin from persistenceSuccessfully registered user1 - secret:mrOjTeyeUmWYSuccessfully enrolled member user <span class="token string">"user1"</span> User1 was successfully registered and enrolled and is ready to intreact with the fabric network</code></pre><h3 id="查询分类帐"><a href="#查询分类帐" class="headerlink" title="查询分类帐"></a>查询分类帐</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span> query.js</code></pre><p>命令执行后输出如下</p><pre class="language-bash" data-language="bash"><code class="language-bash">Successfully loaded user1 from persistenceQuery has completed, checking resultsResponse is  <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"Key"</span><span class="token builtin class-name">:</span><span class="token string">"CAR0"</span>, <span class="token string">"Record"</span><span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"blue"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Toyota"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"Prius"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Tomoko"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"Key"</span><span class="token builtin class-name">:</span><span class="token string">"CAR1"</span>, <span class="token string">"Record"</span>:<span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"red"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Ford"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"Mustang"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Brad"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"Key"</span><span class="token builtin class-name">:</span><span class="token string">"CAR2"</span>, <span class="token string">"Record"</span>:<span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"green"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Hyundai"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"Tucson"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Jin Soo"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"Key"</span><span class="token builtin class-name">:</span><span class="token string">"CAR3"</span>, <span class="token string">"Record"</span>:<span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"yellow"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Volkswagen"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"Passat"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Max"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"Key"</span><span class="token builtin class-name">:</span><span class="token string">"CAR4"</span>, <span class="token string">"Record"</span>:<span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"black"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Tesla"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"S"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Adriana"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"Key"</span><span class="token builtin class-name">:</span><span class="token string">"CAR5"</span>, <span class="token string">"Record"</span>:<span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"purple"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Peugeot"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"205"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Michel"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"Key"</span><span class="token builtin class-name">:</span><span class="token string">"CAR6"</span>, <span class="token string">"Record"</span><span class="token builtin class-name">:</span><span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"white"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Chery"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"S22L"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Aarav"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"Key"</span><span class="token builtin class-name">:</span><span class="token string">"CAR7"</span>, <span class="token string">"Record"</span>:<span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"violet"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Fiat"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"Punto"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Pari"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"Key"</span><span class="token builtin class-name">:</span><span class="token string">"CAR8"</span>, <span class="token string">"Record"</span>:<span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"indigo"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Tata"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"Nano"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Valeria"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"Key"</span><span class="token builtin class-name">:</span><span class="token string">"CAR9"</span>, <span class="token string">"Record"</span>:<span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"brown"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Holden"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"Barina"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Shotaro"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>由Adriana拥有的黑色特斯拉Model S，由Brad拥有的红色Ford Mustang，由Pari拥有的紫色Fiat Punto等等。</p><p>分类账是基于K-V的，在上面的信息中，Key为CAR0至CAR9</p><p>打开query.js</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> query.js</code></pre><p>发现应用程序的初始部分定义了某些变量，例如通道名称，证书存储位置和网络端点</p><pre class="language-bash" data-language="bash"><code class="language-bash">var channel <span class="token operator">=</span> fabric_client.newChannel<span class="token punctuation">(</span><span class="token string">'mychannel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var peer <span class="token operator">=</span> fabric_client.newPeer<span class="token punctuation">(</span><span class="token string">'grpc://localhost:7051'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel.addPeer<span class="token punctuation">(</span>peer<span class="token punctuation">)</span><span class="token punctuation">;</span>var member_user <span class="token operator">=</span> null<span class="token punctuation">;</span>var store_path <span class="token operator">=</span> path.join<span class="token punctuation">(</span>__dirname, <span class="token string">'hfc-key-store'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span><span class="token string">'Store path:'</span>+store_path<span class="token punctuation">)</span><span class="token punctuation">;</span>var tx_id <span class="token operator">=</span> null<span class="token punctuation">;</span></code></pre><p>query.js文件有如下代码使用第二个身份<code>user1</code>作为此应用程序的签署实体。指定<code>user1</code>为签名者</p><p><code>fabric_client.getUserContext('user1', true);</code></p><p>这是实现查询功能的语句块：</p><pre class="language-bash" data-language="bash"><code class="language-bash">// queryCar chaincode <span class="token keyword">function</span> - requires <span class="token number">1</span> argument, ex: args: <span class="token punctuation">[</span><span class="token string">'CAR4'</span><span class="token punctuation">]</span>,// queryAllCars chaincode <span class="token keyword">function</span> - requires no arguments , ex: args: <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span>,const request <span class="token operator">=</span> <span class="token punctuation">{</span>  //targets <span class="token builtin class-name">:</span> --- letting this default to the peers assigned to the channel  chaincodeId: <span class="token string">'fabcar'</span>,  fcn: <span class="token string">'queryAllCars'</span>,  args: <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>调用链码命令:    chaincode query -n 链码名称 -C 通道名称 -c 调用链码时所需要传递的参数    -c <span class="token string">'{"Args":["FunctionName", "查询Key"]}'</span></code></pre><p>当应用程序运行时，它会调用对等<code>fabcar</code>体上的链式代码，运行其中的<code>queryAllCars</code>函数,且不传递任何参数.</p><p>使用编辑器打开query.js</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> query.js</code></pre><p>修改其查询块内容,更改<code>queryAllCars</code>为<code>queryCar</code>并将<code>CAR4</code>作为特定Key为参数传递来执行此操作</p><pre class="language-bash" data-language="bash"><code class="language-bash">const request <span class="token operator">=</span> <span class="token punctuation">{</span>  //targets <span class="token builtin class-name">:</span> --- letting this default to the peers assigned to the channel  chaincodeId: <span class="token string">'fabcar'</span>,  fcn: <span class="token string">'queryCar'</span>,  args: <span class="token punctuation">[</span><span class="token string">'CAR4'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>保存退出后运行:</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span> query.js</code></pre><p>执行后返回如下</p><pre class="language-bash" data-language="bash"><code class="language-bash">Successfully loaded user1 from persistenceQuery has completed, checking resultsResponse is  <span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"black"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Tesla"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"S"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Adriana"</span><span class="token punctuation">}</span></code></pre><p>使用该<code>queryCar</code>功能，我们可以查询任何关键字（例如<code>CAR0</code>）并获取与该车相对应的任何品牌，型号，颜色和所有者</p><h3 id="更新分类帐"><a href="#更新分类帐" class="headerlink" title="更新分类帐"></a>更新分类帐</h3><p>修改 <code>invoke.js</code>, 找到<code>var request</code>中的<code>fcn</code>与<code>args</code>, 添加一条新的数据</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> invoke.js</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">var request <span class="token operator">=</span> <span class="token punctuation">{</span>            //targets: <span class="token builtin class-name">let</span> default to the peer assigned to the client            chaincodeId: <span class="token string">'fabcar'</span>,            fcn: <span class="token string">'createCar'</span>,            args: <span class="token punctuation">[</span><span class="token string">'CAR10'</span>,<span class="token string">'Chevy'</span>,<span class="token string">'Volt'</span>,<span class="token string">'Red'</span>,<span class="token string">'Nick'</span><span class="token punctuation">]</span>,            chainId: <span class="token string">'mychannel'</span>,            txId: tx_id    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>保存退出后执行</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span> invoke.js</code></pre><p>执行成功,输出如下</p><pre class="language-bash" data-language="bash"><code class="language-bash">Successfully loaded user1 from persistenceAssigning transaction_id:  801d0636b9aa94cc7782af21ec2a10ebb12f929bd722afcee1f2b7b923485c82Transaction proposal was goodSuccessfully sent Proposal and received ProposalResponse: Status - <span class="token number">200</span>, message - <span class="token string">"OK"</span>The transaction has been committed on peer localhost:7053Send transaction promise and event listener promise have completedSuccessfully sent transaction to the orderer.Successfully committed the change to the ledger by the peer</code></pre><p>返回<code>query.js</code>并将参数由<code>CAR4</code>更改为<code>CAR10</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> query.js</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">//targets : --- letting this default to the peers assigned to the channel</span>  <span class="token literal-property property">chaincodeId</span><span class="token operator">:</span> <span class="token string">'fabcar'</span><span class="token punctuation">,</span>  <span class="token literal-property property">fcn</span><span class="token operator">:</span> <span class="token string">'queryCar'</span><span class="token punctuation">,</span>  <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'CAR10'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>查询:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> query.js</code></pre><p>输出内容如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash">Successfully loaded user1 from persistenceQuery has completed, checking resultsResponse is  <span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"Red"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Chevy"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"Volt"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Nick"</span><span class="token punctuation">}</span></code></pre><p>修改 <code>invoke.js</code>, 修改CAR10的拥有者为 Dave</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> invoke.js</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">//targets: let default to the peer assigned to the client</span>  <span class="token literal-property property">chaincodeId</span><span class="token operator">:</span> <span class="token string">'fabcar'</span><span class="token punctuation">,</span>  <span class="token literal-property property">fcn</span><span class="token operator">:</span> <span class="token string">'changeCarOwner'</span><span class="token punctuation">,</span>  <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'CAR10'</span><span class="token punctuation">,</span><span class="token string">'Dave'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">chainId</span><span class="token operator">:</span> <span class="token string">'mychannel'</span><span class="token punctuation">,</span>  <span class="token literal-property property">txId</span><span class="token operator">:</span> tx_id<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>保存退出并执行</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span> invoke.js$ <span class="token function">node</span> query.js</code></pre><p>运行输出结果:</p><pre class="language-bash" data-language="bash"><code class="language-bash">Successfully loaded user1 from persistenceQuery has completed, checking resultsResponse is  <span class="token punctuation">{</span><span class="token string">"colour"</span><span class="token builtin class-name">:</span><span class="token string">"Red"</span>,<span class="token string">"make"</span><span class="token builtin class-name">:</span><span class="token string">"Chevy"</span>,<span class="token string">"model"</span><span class="token builtin class-name">:</span><span class="token string">"Volt"</span>,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Dave"</span><span class="token punctuation">}</span></code></pre><h2 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h2><p>在执行 node invoke.js 命令后出现如下错误</p><pre class="language-bash" data-language="bash"><code class="language-bash">Store path:<span class="token environment constant">$HOME</span>/hyfa/fabric-samples/fabcar/hfc-key-storeSuccessfully loaded user1 from persistenceAssigning transaction_id:  f80947242014765a46a17d797b45c8ed9a5db5cc936a57c731219d9e25646051Transaction proposal was goodSuccessfully sent Proposal and received ProposalResponse: Status - <span class="token number">200</span>, message - <span class="token string">"OK"</span>Failed to invoke successfully :: TypeError: Cannot <span class="token builtin class-name">read</span> property <span class="token string">'getConnectivityState'</span> of undefined<span class="token environment constant">$HOME</span>/hyfa/fabric-samples/fabcar/node_modules/fabric-client/lib/EventHub.js:308            if<span class="token punctuation">(</span>self._stream<span class="token punctuation">)</span> state <span class="token operator">=</span> self._stream.call.channel_.getConnectivityState<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                ^TypeError: Cannot <span class="token builtin class-name">read</span> property <span class="token string">'getConnectivityState'</span> of undefined    at ClientDuplexStream.<span class="token operator">&lt;</span>anonymous<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token environment constant">$HOME</span>/hyfa/fabric-samples/fabcar/node_modules/fabric-client/lib/EventHub.js:308:56<span class="token punctuation">)</span>    at emitOne <span class="token punctuation">(</span>events.js:116:13<span class="token punctuation">)</span>    at ClientDuplexStream.emit <span class="token punctuation">(</span>events.js:211:7<span class="token punctuation">)</span>    at addChunk <span class="token punctuation">(</span>_stream_readable.js:263:12<span class="token punctuation">)</span>    at readableAddChunk <span class="token punctuation">(</span>_stream_readable.js:250:11<span class="token punctuation">)</span>    at ClientDuplexStream.Readable.push <span class="token punctuation">(</span>_stream_readable.js:208:10<span class="token punctuation">)</span>    at Object.onReceiveMessage <span class="token punctuation">(</span><span class="token environment constant">$HOME</span>/hyfa/fabric-samples/fabcar/node_modules/grpc/src/client_interceptors.js:1302:19<span class="token punctuation">)</span>    at InterceptingListener.recvMessageWithContext <span class="token punctuation">(</span><span class="token environment constant">$HOME</span>/hyfa/fabric-samples/fabcar/node_modules/grpc/src/client_interceptors.js:629:19<span class="token punctuation">)</span>    at <span class="token environment constant">$HOME</span>/hyfa/fabric-samples/fabcar/node_modules/grpc/src/client_interceptors.js:728:14</code></pre><p><strong>此问题可以无视, 不会影响到后继查询命令 <code>node query.js</code> 的执行</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabric 超级账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLedger Fabric - 超级账本（7）Fabric CA 应用与配置</title>
      <link href="/2018/06/25/hyperledger-fabric-chao-ji-zhang-ben-7-fabric-ca-ying-yong-yu-pei-zhi/"/>
      <url>/2018/06/25/hyperledger-fabric-chao-ji-zhang-ben-7-fabric-ca-ying-yong-yu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Fabric CA项目是超级账本Fabric内的MemberService组件, 对网络内各个实体的身份证书的管理, 主要实现:</p><ul><li>负责Fabric网络内所有实体(Identity)的身份管理, 包括身份的注册、注销等</li><li>负责证书管理, 包括ECerts(身份证书)、TCerts(交易证书)等的发放和注销</li><li>服务端支持基于客户端命令行的RESTful API的交互方式</li></ul><p>Fabric CA采用Go语言进行编写</p><h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><p>Fabric CA采用了典型的C/S架构， 目前包含两个基本组件， 分别实现服务端功能和客户端功能</p><ul><li>服务端: fabric-ca-server实现核心的PKI(Public Key Infrastructure: 公钥基础设施)服务功能， 支持多种数据库后台(包括SQlite3、MySQL、PostgreSQL等), 并支持集成LDAP用为用户注册管理功能</li><li>客户端: fabric-ca-client封装了服务端的RESTful API, 提供访问服务端的命令, 供用户与服务端进行交互</li></ul><h2 id="安装服务端与客户端"><a href="#安装服务端与客户端" class="headerlink" title="安装服务端与客户端"></a>安装服务端与客户端</h2><p>安装Go1.9+</p><p>设置GOPATH环境变量</p><h3 id="安装libtool-与-libltdl-dev-依赖包"><a href="#安装libtool-与-libltdl-dev-依赖包" class="headerlink" title="安装libtool 与 libltdl-dev 依赖包"></a>安装libtool 与 libltdl-dev 依赖包</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> update$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libtool libltdl-dev</code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装服务端与客户端二进制命令到$GOPATH/bin目录下</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ go get -u github.com/hyperledger/fabric-ca/cmd/<span class="token punctuation">..</span>.</code></pre><p>切换至源码目录下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/hyperledger/fabric-ca/</code></pre><p>使用make命令编译：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">make</span> fabric-ca-server$ <span class="token function">make</span> fabric-ca-client</code></pre><p>生成 <code>bin</code> 目录, 目录中包含 <code>fabric-ca-client</code> 与 <code>fabric-ca-server</code> 两个可执行文件</p><p>设置环境变量</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$GOPATH</span>/src/github.com/hyperledger/fabric-ca/bin:<span class="token environment constant">$PATH</span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>返回至用户目录</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~$ <span class="token function">mkdir</span> fabric-ca$ <span class="token builtin class-name">cd</span> fabric-ca</code></pre><p>fabric-ca启动:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 使用init进行初始化<span class="token number">2</span>. 使用start启动</code></pre><p>初始化</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fabric-ca-server init -b admin:pass</code></pre><p>生成配置文件到至当前目录</p><ul><li>fabric-ca-server-config.yaml: 默认配置文件</li><li>ca-cert.pem: PEM格式的CA证书文件, 自签名</li><li>fabric-ca-server.db: 存放数据的sqlite数据库</li><li>msp/keystore/: 路径下存放个人身份的私钥文件(_sk文件), 对应签名证书</li></ul><h3 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h3><p>快速启动并初始化一个fabric-ca-server服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fabric-ca-server start -b admin:pass</code></pre><p>-b: 提供注册用户的名称与密码, 如果没有使用LDAP, 这个选项为必需. 默认的配置文件的名称为fabric-ca-server-config.yaml</p><blockquote><p>如果之前没有执行初始化命令, 则启动过程中会自动先进行初始化操作. 即从主配置目录搜索相关证书和配置文件, 如果不存在则会自动生成</p></blockquote><h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><p>在打开的新终端中输入以下命令获取指定CA服务的基本信息.</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> -X POST -d <span class="token string">'{"caname":"test_ca"}'</span> http://localhost:7054/api/v1/cainfo</code></pre><blockquote><p>如要获取默认CA服务的基本信息, 可以不带任何参数, 如:</p><pre class="language-none"><code class="language-none">$ curl -X POST http://localhost:7054/api/v1/cainfo</code></pre></blockquote><h2 id="服务端命令剖析"><a href="#服务端命令剖析" class="headerlink" title="服务端命令剖析"></a>服务端命令剖析</h2><p>fabric-ca-server命令主要负责启动一个CA服务, 包括init和start两个子命令</p><h3 id="服务端配置文件解析"><a href="#服务端配置文件解析" class="headerlink" title="服务端配置文件解析"></a>服务端配置文件解析</h3><p>fabric-ca-server-config.yaml配置文件包括通用配置, TLS配置, CA配置, 注册管理配置, 数据库配置, LDAP配置, 组织结构配置, 签名, 证书申请等几部分</p><pre class="language-bash" data-language="bash"><code class="language-bash">version: <span class="token number">1.1</span>.1-snapshot-e656889port: <span class="token number">7054</span>              <span class="token comment"># 指定服务的监听端口</span>debug: <span class="token boolean">false</span>            <span class="token comment"># 是否启用DEBUG模式, 输出更多的调试信息上</span>crlsizelimit: <span class="token number">512000</span><span class="token comment"># 是否在服务端启用TLS,如果启用TLS后进行身份验证的证书和签名的私钥</span>tls:      enabled: <span class="token boolean">false</span>        <span class="token comment"># 是否启用TLS, 默认不启用</span>  certfile:         <span class="token comment"># TLS证书文件</span>  keyfile:          <span class="token comment"># TLS密钥文件</span>  clientauth:   <span class="token comment"># 客户端验证配置</span>    type: noclientcert      <span class="token comment"># 默认不进行身份验证</span>    certfiles:      <span class="token comment"># 进行客户端身份验证时, 信任的证书文件列表</span><span class="token comment"># 包括实例的名称、签名私钥文件、身份验证证书和证书链文件乖；这些私钥和证书文件会用来作为生成ECert、TCert的根证书</span>ca:       name:         <span class="token comment"># CA服务名称. 可以支持多个服务</span>  keyfile:      <span class="token comment"># 密钥文件(默认: ca-key.pem)</span>  certfile:     <span class="token comment"># 证书文件(默认: ca-cert.pem)</span>  chainfile:    <span class="token comment"># 证书链文件(默认: chain-cert.pem)</span>crl:  expiry: 24h<span class="token comment"># 当fabric-ca-server自身提供用户的注册管理时使用, 此情况下需要禁用LDAP功能, 否则fabric-ca-server将会把注册管理数据转发到LDAP进行查询</span>registry:  <span class="token comment"># 允许同一个用户名和密码进行enrollment的最大次数, -1为无限制, 0为不支持登记</span>  maxenrollments: -1          identities:   <span class="token comment"># 注册的实体信息, 可以进行enroll. 只有当LDAP未启用时起作用</span>     - name: admin       pass: adminpw       type: client       affiliation: <span class="token string">""</span>       attrs:          hf.Registrar.Roles: <span class="token string">"peer,orderer,client,user"</span>          hf.Registrar.DelegateRoles: <span class="token string">"peer,orderer,client,user"</span>          hf.Revoker: <span class="token boolean">true</span>          hf.IntermediateCA: <span class="token boolean">true</span>       <span class="token comment"># 该id是否是一个中间层的CA</span>          hf.GenCRL: <span class="token boolean">true</span>          hf.Registrar.Attributes: <span class="token string">"*"</span>          hf.AffiliationMgr: <span class="token boolean">true</span><span class="token comment"># 数据库支持SQLite3、MySQL、Postgres. 默认为SQLite3类型的本地数据库. 如果要配置集群, 则需要选用MySQL或Postgres后端数据库, 并在前端部署负载均衡器(如Nginx或HAProxy)</span>db:  type: sqlite3  datasource: fabric-ca-server.db       <span class="token comment"># SQLite3文件路径</span>  tls:      enabled: <span class="token boolean">false</span>    <span class="token comment"># 是否启用TLS来连接到数据库</span>      certfiles:        <span class="token comment"># PEM格式的数据库服务器的TLS根证书, 可以指定多个, 用逗号隔开</span>      client:        certfile:       <span class="token comment"># PEM格式的客户端证书文件</span>        keyfile:        <span class="token comment"># PEM格式的客户端证书私钥文件</span><span class="token comment"># 配置使用远端的LDAP来进行注册管理, 认证enrollment的用户和密码, 并获取用户属性信息. 此时, 服务端将按照指定的usrfilter从LDAP获取对应的用户, 利用其唯一识别名(distinguidhed name)和给定的密码进行验证. </span><span class="token comment"># 当LDAP功能启用时, registry中的配置将被忽略</span>ldap:   enabled: <span class="token boolean">false</span>   <span class="token comment"># 是否启用LDAP, 默认不启用</span>   url: ldap://<span class="token operator">&lt;</span>adminDN<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>adminPassword<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>host<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>port<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>base<span class="token operator">&gt;</span>   <span class="token comment"># LDAP的服务地址</span>   tls:      certfiles:    <span class="token comment"># PEM格式的LDAP服务器的TLS根证书, 可以为多个, 用逗号隔开</span>      client:         certfile:  <span class="token comment"># PEM格式的客户端证书文件</span>         keyfile:   <span class="token comment"># PEM格式的客户端证书私钥文件</span>   attribute:          names: <span class="token punctuation">[</span><span class="token string">'uid'</span>,<span class="token string">'member'</span><span class="token punctuation">]</span>           converters:         - name:           value:            maps:         groups:            - name:              value:<span class="token comment"># 组织结构配置</span>affiliations:   org1:      - department1      - department2   org2:      - department1<span class="token comment"># 签发证书相关的配置包括签名方法、证书超时时间等. fabric-ca-server可以作为用户证书的签发CA(默认情况下), 也可以作为根CA来进一步支持其它中间CA</span>signing:    default:    <span class="token comment"># 默认情况下,用于签署Ecert</span>      usage:    <span class="token comment"># 所签发证书的KeyUsage extension域</span>        - digital signature      expiry: 8760h    profiles:   <span class="token comment"># 不同的签发配置</span>      ca:   <span class="token comment"># 签署中间层CA证书时的配置模板</span>         usage:           - cert sign  <span class="token comment"># 所签发证书的KeyUsage extension域</span>           - crl sign         expiry: 43800h         caconstraint:           isca: <span class="token boolean">true</span>           maxpathlen: <span class="token number">0</span>    <span class="token comment"># 限制该中间层CA无法进一步签署中间层CA</span>      tls:         usage:            - signing            - key encipherment            - server auth            - client auth            - key agreement         expiry: 8760h<span class="token comment"># CA自身证书的申请请求配置. 当CA作为根证书服务时, 将基于请求生成一个自签名的证书; 当CA作为中间证书服务时, 将请求发送给上层的根证书进行签署</span>csr:   cn: fabric-ca-server     <span class="token comment"># 建议与服务器名一致</span>   names:      - C: US        ST: <span class="token string">"North Carolina"</span>        L:        O: Hyperledger        OU: Fabric   hosts:     - kevin-hf     - localhost   ca:      <span class="token comment"># 配置后会加入到证书的扩展字段</span>      expiry: 131400h       <span class="token comment"># 超时时间</span>      pathlength: <span class="token number">1</span>         <span class="token comment"># 允许产生的中间证书的深度</span><span class="token comment"># 配置所选择的加密库</span>bccsp:    default: SW    sw:        hash: SHA2        security: <span class="token number">256</span>        filekeystore:            keystore: msp/keystore      <span class="token comment"># 存放密钥文件的路径</span><span class="token comment"># 自动创建除了默认CA外的多个CA实例, 如ca1、ca2等</span>cacount:<span class="token comment"># 可以指定多个CA配置文件路径, 每个配置文件会启动一个CA服务,注意不同配置文件之间需要避免出现冲突(如服务端口、TLS证书等)</span>cafiles:<span class="token comment"># 当CA作为中间层CA服务时的相关配置. 包括父CA的地址和名称、登记信息、TLS配置等.</span><span class="token comment"># 注意: 当intermediate.parentserver.url非空时, 意味着本CA是中间层CA服务,否则为根CA服务</span>intermediate:  parentserver:     <span class="token comment"># 父CA相关信息</span>    url:    caname:  enrollment:       <span class="token comment"># 在父CA侧的登记信息</span>    hosts:          <span class="token comment"># 证书主机名列表</span>    profile:        <span class="token comment"># 签发所用的profile</span>    label:          <span class="token comment"># HSM操作中的标签信息</span>  tls:      <span class="token comment"># TLS相关配置</span>    certfiles:      <span class="token comment"># 信任的根CA证书</span>    client:         <span class="token comment"># 客户端验证启用时的相关文件</span>      certfile:      keyfile:</code></pre><h3 id="与服务器端进行交互"><a href="#与服务器端进行交互" class="headerlink" title="与服务器端进行交互"></a>与服务器端进行交互</h3><p>可以采用包括RESTful API在内的多种方式与Fabric-CA服务端进行交互. 其中最方便的方式是通过客户端工具 fabric-ca-client</p><h4 id="登记用户"><a href="#登记用户" class="headerlink" title="登记用户"></a>登记用户</h4><p>注册管理员需要以管理员身份使用CA Client连接到CA Server，并生成相应的文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$GOPATH</span>/src/github.com/hyperledger/fabric-ca/bin:<span class="token environment constant">$PATH</span>$ fabric-ca-client enroll -u http://admin:pass@localhost:7054</code></pre><blockquote><p>如果生成的配置文件不是在当前目录下, 则运行登记命令后可能会产生如下错误</p><pre class="language-none"><code class="language-none">Error: Response from server: Error Code: 20 - Authorization failure解决方式: 返回至目录下重新启动服务$ cd ~$ fabric-ca-server start -b admin:pass</code></pre></blockquote><p>-u: 进行连接的fabric-ca-server服务地址, 默认为”<a href="http://localhost:7054/">http://localhost:7054</a>”</p><p>该命令访问本地Fabric CA服务, 采用默认的admin用户进行登记. 默认情况下会在用户目录下的.fabric-ca-clien子目录下创建默认的配置文件 <code>fabric-ca-clien-config.yaml</code> 和 <code>msp</code> 子目录(包括签发的证书文件)</p><blockquote><p>可以使用 <code>$ tree .fabric-ca-client/</code> 命令查看结构</p></blockquote><h4 id="注册用户"><a href="#注册用户" class="headerlink" title="注册用户"></a>注册用户</h4><p>登记后的用户身份可以采用如下命令来注册一个新的用户:</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fabric-ca-client register --id.name kevin --id.type user --id.affiliation org1.department1 --id.attrs <span class="token string">'"hf.Registrar.Roles=peer,user"'</span> --id.attrs <span class="token string">'hf.Revoker=true'</span></code></pre><p>执行后输出:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">2018</span>/05/02 <span class="token number">14</span>:39:28 <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Configuration <span class="token function">file</span> location: /home/kevin/.fabric-ca-client/fabric-ca-client-config.yamlPassword: KDwrXkAFENWW</code></pre><blockquote><p><strong>命令执行成功后返回该新注册用户的密码</strong></p><p><strong>如果想使用指定的密码, 在命令中添加选项 –id.secret password 即可</strong></p></blockquote><p>可以再次使用enroll命令，给kevin这个用户生成msp的私钥和证书</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fabric-ca-client enroll -u http://kevin:KDwrXkAFENWW@localhost:7054 -M kevinca</code></pre><blockquote><p>-M: 指定生成证书存放目录MSP的路径, 默认为”msp”</p><p>命令执行成功后会在 <code>.fabric-ca-client</code> 目录下生成指定的userca目录, 在此目录下生成msp的私钥和证书</p><p>可使用tree使用查看</p><pre class="language-none"><code class="language-none">$ tree .fabric-ca-client/</code></pre><p>输出内容如下:</p><pre class="language-none"><code class="language-none">.fabric-ca-client/├── fabric-ca-client-config.yaml├── kevinca│   ├── cacerts│   │   └── localhost-7054.pem│   ├── intermediatecerts│   │   └── localhost-7054.pem│   ├── keystore│   │   ├── 8c7e4d893af9b9a5907299097edd69c9adee743f4421f81a2d73ed55a874545e_sk│   │   └── ec63821399143fc422e01596eca622e8c658c0ded8e5c189804180256c40c19e_sk│   └── signcerts│       └── cert.pem├── msp    ├── cacerts    │   └── localhost-7054.pem    ├── intermediatecerts    │   └── localhost-7054.pem    ├── keystore    │   └── eaa009831dc406950766cc1df104f6fb3ed4b456faa5f476dc41db817a873d2a_sk    └── signcerts        └── cert.pem</code></pre></blockquote><h4 id="登记节点"><a href="#登记节点" class="headerlink" title="登记节点"></a>登记节点</h4><p>登记Peer或Orderer节点的操作与登记用户身份类似. 可以通过-M指定本地MSP的根路径来在其下存放证书文件</p><h5 id="注册节点"><a href="#注册节点" class="headerlink" title="注册节点:"></a>注册节点:</h5><pre class="language-bash" data-language="bash"><code class="language-bash">$ fabric-ca-client register --id.name peer0 --id.type peer --id.affiliation org1.department1 --id.secret peer0pw</code></pre><h5 id="登记节点-1"><a href="#登记节点-1" class="headerlink" title="登记节点"></a>登记节点</h5><pre class="language-bash" data-language="bash"><code class="language-bash">$ fabric-ca-client enroll -u http://peer0:peer0pw@localhost:7054 -M peer0</code></pre><h2 id="客户端命令剖析"><a href="#客户端命令剖析" class="headerlink" title="客户端命令剖析"></a>客户端命令剖析</h2><p>fabric-ca-client命令可以与服务端进行交互, 包括五个子命令:</p><ul><li>enroll: 登录获取ECert</li><li>getcacert: 获取CA服务的证书链</li><li>reenroll: 再次登录</li><li>register: 注册用户实体</li><li>revoke: 吊销签发的实体证书</li></ul><p>这些命令都是通过服务端的RESTful接口来进行操作的</p><h3 id="enroll命令"><a href="#enroll命令" class="headerlink" title="enroll命令"></a>enroll命令</h3><p>向服务端申请签发ECert证书并将文件保存至本地</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fabric-ca-client enroll -u http://admin:pass@localhost:7054</code></pre><h3 id="getcacert命令"><a href="#getcacert命令" class="headerlink" title="getcacert命令"></a>getcacert命令</h3><p>向服务端申请根证书信息并保存至本地主配置目录的msp/cacerts路径下</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fabric-ca-client getcacert -u http://admin:pass@localhost:7054</code></pre><p>证书命名格式为: 服务器主机名-CA实例名.pem</p><h3 id="reenroll命令"><a href="#reenroll命令" class="headerlink" title="reenroll命令"></a>reenroll命令</h3><p>利用本地配置信息再次执行enroll过程, 生成新的签名证书材料</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fabric-ca-client reenroll</code></pre><h3 id="register命令"><a href="#register命令" class="headerlink" title="register命令"></a>register命令</h3><p>执行注册新用户实体的客户端必须已经通过登记认证, 并且拥有足够的权限(所注册用户的hf.Registrar.Roles和affiliation都不能超出调用者属性)来进行注册</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fabric-ca-client register --id.name jack --id.type user --id.affiliation org1.department1 --id.attrs <span class="token string">'"hf.Registrar.Roles=peer,user"'</span> --id.attrs <span class="token string">'hf.Revoker=true'</span> --id.secret jackpw</code></pre><h3 id="revoke命令"><a href="#revoke命令" class="headerlink" title="revoke命令"></a>revoke命令</h3><p>吊销指定的证书或指定实体相关的所有证书. 执行revoke命令的客户端身份必须拥有足够的权限(hf.Revoker为true, 并且被吊销者机构不能超出吊销者机构的范围)</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ fabric-ca-client revoke -e <span class="token string">"jack"</span> -r <span class="token string">"affiliationchange"</span></code></pre><p>-e: 指定吊销用户</p><p>-r: 指定吊销原因</p><p>输出内容如下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">2018</span>/05/02 <span class="token number">17</span>:55:44 <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Configuration <span class="token function">file</span> location: .fabric-ca-client/fabric-ca-client-config.yaml<span class="token number">2018</span>/05/02 <span class="token number">17</span>:55:44 <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Sucessfully revoked certificates: <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h2 id="查看AKI和序列号"><a href="#查看AKI和序列号" class="headerlink" title="查看AKI和序列号"></a>查看AKI和序列号</h2><p>AKI: 公钥标识号, 代表了对该证书进行签发机构的身份</p><p>查看根证书的AKI与序列号信息:</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ openssl x509 -in .fabric-ca-client/msp/signcerts/cert.pem -text -noout</code></pre><p>输出内容如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash">Certificate:    Data:        Version: <span class="token number">3</span> <span class="token punctuation">(</span>0x2<span class="token punctuation">)</span>        Serial Number:  <span class="token comment"># 序列号</span>            <span class="token number">74</span>:48:88:33:70:1a:01:a0:ad:32:29:6e:c5:ab:5a:fa:3b:91:25:a4   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>        X509v3 extensions:           <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>            X509v3 Authority Key Identifier:    <span class="token comment"># keyid后面的内容就是 AKI</span>                keyid:45:B1:50:B6:CD:8A:8D:C5:9B:9E:5F:75:15:47:D6:C0:AD:75:FE:71    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><h3 id="单独获取AKI"><a href="#单独获取AKI" class="headerlink" title="单独获取AKI"></a>单独获取AKI</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ openssl x509 -in .fabric-ca-client/msp/signcerts/cert.pem -text -noout <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/keyid/ {gsub (/ *keyid:|:/,"",$1);print tolower($0)}'</span></code></pre><p>输出内容如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash">45b150b6cd8a8dc59b9e5f751547d6c0ad75fe71</code></pre><h3 id="单独获取序列号"><a href="#单独获取序列号" class="headerlink" title="单独获取序列号"></a>单独获取序列号</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ openssl x509 -in .fabric-ca-client/msp/signcerts/cert.pem -serial -noout <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"="</span> -f <span class="token number">2</span></code></pre><p>输出内容如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash">74488833701A01A0AD32296EC5AB5AFA3B9125A4</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabric 超级账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLedger Fabric - 超级账本（6）转换配置&amp;添加组织到channel</title>
      <link href="/2018/06/25/hyperledger-fabric-chao-ji-zhang-ben-6-zhuan-huan-pei-zhi-tian-jia-zu-zhi-dao-channel/"/>
      <url>/2018/06/25/hyperledger-fabric-chao-ji-zhang-ben-6-zhuan-huan-pei-zhi-tian-jia-zu-zhi-dao-channel/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="configtxlator转换配置-x2F-添加Org组织到channel"><a href="#configtxlator转换配置-x2F-添加Org组织到channel" class="headerlink" title="configtxlator转换配置/添加Org组织到channel"></a>configtxlator转换配置/添加Org组织到channel</h2><h3 id="设置环境"><a href="#设置环境" class="headerlink" title="设置环境"></a>设置环境</h3><p>进入到<code>fabric-samples/first-network</code>目录中, 执行<code>.byfn.sh \-m down</code>关闭网络,清理之前的任何环境</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token environment constant">$HOME</span>/hyfa/fabric-samples/first-network/$ <span class="token function">sudo</span> ./byfn.sh -m down</code></pre><p>重新生成默认的BYFN构件</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./byfn.sh -m generate</code></pre><p>启用网络</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./byfn.sh -m up</code></pre><h3 id="添加组织Org3"><a href="#添加组织Org3" class="headerlink" title="添加组织Org3"></a>添加组织Org3</h3><p>使用<code>eyfn.sh</code>脚本将Org3引入网络</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./eyfn.sh up</code></pre><p>从输出中可以看到添加的Org3加密资料，配置更新正在创建和签名，然后链接代码被安装以允许Org3执行分类账查询</p><p>如果执行成功, 会有如下输出</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> All GOOD, EYFN <span class="token builtin class-name">test</span> execution completed <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>  _____   _   _   ____   <span class="token operator">|</span> ____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">\</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  _ <span class="token punctuation">\</span>  <span class="token operator">|</span>  _<span class="token operator">|</span>   <span class="token operator">|</span>  <span class="token punctuation">\</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>___  <span class="token operator">|</span> <span class="token operator">|</span><span class="token punctuation">\</span>  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_____<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token punctuation">\</span>_<span class="token operator">|</span> <span class="token operator">|</span>____/  </code></pre><h3 id="进入CLI容器"><a href="#进入CLI容器" class="headerlink" title="进入CLI容器"></a>进入CLI容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it cli <span class="token function">bash</span></code></pre><p>导出 <code>ORDERER_CA</code> 与 <code>CHANNEL_NAME</code> 变量:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ORDERER_CA</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem  <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">CHANNEL_NAME</span><span class="token operator">=</span>mychannel</code></pre><p>检查环境变量是否正确设置:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$ORDERER_CA</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$CHANNEL_NAME</span></code></pre><blockquote><p><strong>如果重新启动了CLI容器，则必须重新导出两个环境变量</strong></p></blockquote><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode query -C <span class="token variable">$CHANNEL_NAME</span> -n mycc -c <span class="token string">'{"Args":["query","a"]}'</span></code></pre><p>查询结果: <code>Query Result: 80</code></p><h3 id="调用-实现从a到b转账"><a href="#调用-实现从a到b转账" class="headerlink" title="调用,实现从a到b转账"></a>调用,实现从a到b转账</h3><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke -o orderer.example.com:7050  --tls <span class="token variable">$CORE_PEER_TLS_ENABLED</span> --cafile <span class="token variable">$ORDERER_CA</span> -C <span class="token variable">$CHANNEL_NAME</span> -n mycc -c <span class="token string">'{"Args":["invoke","a","b","10"]}'</span></code></pre><h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode query -C <span class="token variable">$CHANNEL_NAME</span> -n mycc -c <span class="token string">'{"Args":["query","a"]}'</span></code></pre><p>查询结果: <code>Query Result: 70</code></p><hr><h2 id="手动实现配置"><a href="#手动实现配置" class="headerlink" title="手动实现配置:"></a>手动实现配置:</h2><p>如果使用了<code>eyfn.sh</code>脚本，则需要将网络关闭.删除所有容器并撤销添加Org3所做的操作</p><p>在 <code>fabric-samples/first-network/</code>目录中执行如下命令:</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./eyfn.sh down$ <span class="token function">sudo</span> ./byfn.sh -m down</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./byfn.sh -m generate$ <span class="token function">sudo</span> ./byfn.sh -m up</code></pre><h3 id="生成Org3加密材料"><a href="#生成Org3加密材料" class="headerlink" title="生成Org3加密材料"></a>生成Org3加密材料</h3><p>从 <code>frist-network</code> 目录转至 <code>org3-artifacts</code> 目录中</p><pre class="language-bash" data-language="bash"><code class="language-bash">% <span class="token builtin class-name">cd</span> org3-artifacts</code></pre><p>生成加密材料</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/bin/cryptogen generate --config<span class="token operator">=</span>./org3-crypto.yaml</code></pre><p>为Org3 CA以及与此新Org绑定的两个对等生成密钥和证书</p><p>新生成的文件被保存在当前目录下新生成的文件夹 <code>crypto-config</code> 中</p><p>使用 <code>configtxgen</code> 工具以JSON输出Org3特定的配置材料到指定的文件中</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span> $ <span class="token function">sudo</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/bin/configtxgen -printOrg Org3MSP <span class="token operator">&gt;</span> <span class="token punctuation">..</span>/channel-artifacts/org3.json</code></pre><p>该文件包含Org3的策略定义，以及以Base 64格式提供的三个重要证书：admin用户证书（稍后将用作Org3的管理员），CA根证书和TLS根证书证书</p><p>后面会将这个JSON文件附加到通道配置中</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/ $ <span class="token function">sudo</span> <span class="token function">cp</span> -r crypto-config/ordererOrganizations org3-artifacts/crypto-config/</code></pre><p>将Orderer Org的MSP材料移植到Org3 <code>crypto-config</code>目录中</p><h3 id="更新通道配置"><a href="#更新通道配置" class="headerlink" title="更新通道配置"></a>更新通道配置</h3><p>进入CLI容器</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it cli <span class="token function">bash</span></code></pre><p>安装jq工具</p><p>jq可以将所需要的数据格式转换成任意的数据格式</p><blockquote><p>jq工具允许脚本与<code>configtxlator</code>工具返回的JSON文件进行交互</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> -y jq</code></pre><p>参数说明:</p><p>-y: 忽略安装时的提示</p><p>导出 <code>ORDERER_CA</code> 与 <code>CHANNEL_NAME</code> 变量:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ORDERER_CA</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem  <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">CHANNEL_NAME</span><span class="token operator">=</span>mychannel</code></pre><p>检查环境变量是否正确设置:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$ORDERER_CA</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$CHANNEL_NAME</span></code></pre><blockquote><p><strong>如果重新启动了CLI容器，则必须重新导出两个环境变量</strong></p></blockquote><p>获取配置</p><p>获取 <code>mychannel</code> 通道的最新配置块, 可以防止重复或替换配置更改, 有助于确保并发性, 防止删除两个组织</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel fetch config config_block.pb -o orderer.example.com:7050 -c <span class="token variable">$CHANNEL_NAME</span> --tls --cafile <span class="token variable">$ORDERER_CA</span></code></pre><p>上述命令将二进制protobuf通道配置块保存到 <code>config_block.pb</code> , (文件名及扩展名命名无限制)</p><p>转换配置为JSON</p><p>利用 <code>configtxlator</code> 工具将此通道配置块解码为JSON格式, 删除所有与想要改变的内容无关的标题，元数据，创建者签名等等</p><p>通过 <code>jq</code> 工具来完成</p><pre class="language-bash" data-language="bash"><code class="language-bash">configtxlator proto_decode --input config_block.pb --type common.Block <span class="token operator">|</span> jq .data.data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.payload.data.config <span class="token operator">&gt;</span> config.json</code></pre><blockquote><p>.data.data[0],payload.data.config域内数据代表了完整的通道配置信息</p></blockquote><p>查看<code>config.json</code>文件中的内容</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">more</span> config.json</code></pre><p>使用jq将Org3配置定义追加<code>org3.json</code>到通道的应用程序组字段，并命名输出<code>modified_config.json</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">jq -s <span class="token string">'.[0] * {"channel_group":{"groups":{"Application":{"groups": {"Org3MSP":.[1]}}}}}'</span> config.json ./channel-artifacts/org3.json <span class="token operator">&gt;</span> modified_config.json</code></pre><p>将 <code>config.json</code> 中的内容输出为 <code>config.pb</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">configtxlator proto_encode --input config.json --type common.Config --output config.pb</code></pre><p>将 <code>modified_config.json</code> 中的内容输出为 <code>modified_config.pb</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb</code></pre><p>利用这两个配置文件, 使用<code>configtxlator</code>计算出更新配置时的更新量信息。该命令将输出一个新的二进制文件，命名为<code>org3_update.pb</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash">configtxlator compute_update --channel_id <span class="token variable">$CHANNEL_NAME</span> --original config.pb --updated modified_config.pb --output org3_update.pb</code></pre><p>将 <code>org3_update.pb</code> 中的内容解码为可编辑的JSON格式并将其称为<code>org3_update.json</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">configtxlator proto_decode --input org3_update.pb --type common.ConfigUpdate <span class="token operator">|</span> jq <span class="token builtin class-name">.</span> <span class="token operator">&gt;</span> org3_update.json</code></pre><p>对通道配置进行更新时, 还需要封装为 <code>org3_update_in_envelope</code> 结构的配置更新交易. 因此, 需要将 <code>org3_update</code> 结构数据进行补全</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'{"payload":{"header":{"channel_header":{"channel_id":"mychannel", "type":2}},"data":{"config_update":'</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> org3_update.json<span class="token variable">)</span></span><span class="token string">'}}}'</span> <span class="token operator">|</span> jq <span class="token builtin class-name">.</span> <span class="token operator">&gt;</span> org3_update_in_envelope.json</code></pre><p>将其转换为Fabric所需的二进制交易配置文件。命名为最终更新对象<code>org3_update_in_envelope.pb</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">configtxlator proto_encode --input org3_update_in_envelope.json --type common.Envelope --output org3_update_in_envelope.pb</code></pre><h3 id="签署并提交配置更新"><a href="#签署并提交配置更新" class="headerlink" title="签署并提交配置更新"></a>签署并提交配置更新</h3><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel signconfigtx -f org3_update_in_envelope.pb</code></pre><p>导出Org2环境变量:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>peer0.org2.example.com:7051</code></pre><p>更新通道</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel update -f org3_update_in_envelope.pb -c <span class="token variable">$CHANNEL_NAME</span> -o orderer.example.com:7050 --tls --cafile <span class="token variable">$ORDERER_CA</span></code></pre><p>命令执行后会有如下输出: <code>Successfully submitted channel update</code></p><p>新终端中(终端2)中输出日志</p><p>打开一个新的终端(<strong>终端2</strong>)执行如下命令:</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> logs -f peer0.org1.example.com</code></pre><h3 id="将Org3加入到通道"><a href="#将Org3加入到通道" class="headerlink" title="将Org3加入到通道"></a>将Org3加入到通道</h3><p><strong>打开一个新的终端(终端3)</strong>, 从 <code>first-network</code> 中启动Org3 docker compose</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> hyfa/fabric-samples/first-network/$ <span class="token function">sudo</span> <span class="token function">docker-compose</span> -f docker-compose-org3.yaml up -d</code></pre><p>进入Org3特定的CLI容器中:</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it Org3cli <span class="token function">bash</span></code></pre><p>导出环境变量:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ORDERER_CA</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">CHANNEL_NAME</span><span class="token operator">=</span>mychannel</code></pre><p>检查变量 :</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$ORDERER_CA</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$CHANNEL_NAME</span></code></pre><p>检索该块:</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel fetch <span class="token number">0</span> mychannel.block -o orderer.example.com:7050 -c <span class="token variable">$CHANNEL_NAME</span> --tls --cafile <span class="token variable">$ORDERER_CA</span></code></pre><p>发出命令并通过创世区块:</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel <span class="token function">join</span> -b mychannel.block</code></pre><p>导出TLS与ADDRESS变量并重新发布</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer1.org3.example.com/tls/ca.crt <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>peer1.org3.example.com:7051peer channel <span class="token function">join</span> -b mychannel.block</code></pre><h3 id="升级并调用Chaincode"><a href="#升级并调用Chaincode" class="headerlink" title="升级并调用Chaincode"></a>升级并调用Chaincode</h3><p>在Org3的CLI中执行(<strong>终端3</strong>):</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode <span class="token function">install</span> -n mycc -v <span class="token number">2.0</span> -p github.com/chaincode/chaincode_example02/go/</code></pre><p><strong>终端1中执行</strong></p><p>使用Org2管理员身份提交了频道更新通话(<strong>在终端1中执行</strong>):</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>peer0.org2.example.com:7051</code></pre><p>安装</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode <span class="token function">install</span> -n mycc -v <span class="token number">2.0</span> -p github.com/chaincode/chaincode_example02/go/</code></pre><p>切换为Org1身份:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>peer0.org1.example.com:7051</code></pre><p>再次安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode <span class="token function">install</span> -n mycc -v <span class="token number">2.0</span> -p github.com/chaincode/chaincode_example02/go/</code></pre><p>发送电话：</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode upgrade -o orderer.example.com:7050 --tls <span class="token variable">$CORE_PEER_TLS_ENABLED</span> --cafile <span class="token variable">$ORDERER_CA</span> -C <span class="token variable">$CHANNEL_NAME</span> -n mycc -v <span class="token number">2.0</span> -c <span class="token string">'{"Args":["init","a","90","b","210"]}'</span> -P <span class="token string">"OR ('Org1MSP.peer','Org2MSP.peer','Org3MSP.peer')"</span></code></pre><p>如果报如下错误:</p><pre class="language-bash" data-language="bash"><code class="language-bash">Error: Error getting broadcast client: failed to load config <span class="token keyword">for</span> OrdererClient: unable to load orderer.tls.rootcert.file: <span class="token function">open</span> /etc/hyperledger/fabric/-C: no such <span class="token function">file</span> or directory则需要检查  <span class="token builtin class-name">echo</span> <span class="token variable">$ORDERER_CA</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$CHANNEL_NAME</span>  变量是否正确设置<span class="token builtin class-name">export</span> <span class="token assign-left variable">ORDERER_CA</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">CHANNEL_NAME</span><span class="token operator">=</span>mychannel</code></pre><p>通过<code>v</code>标志指定新版本。可以看到Org3添加到背书政策中</p><p>与实例化调用一样，链式代码升级需要使用该<code>init</code> 方法</p><p><strong>终端3中执行</strong></p><p>升级调用将新的块 - 块6 - 添加到频道的分类账中，并允许Org3同行在认可阶段执行交易。跳回Org3 CLI容器(<strong>终端3</strong>)并发出一个查询值<code>a</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode query -C <span class="token variable">$CHANNEL_NAME</span> -n mycc -c <span class="token string">'{"Args":["query","a"]}'</span></code></pre><p>在终端1与终端3中通过,正确显示查询结果: <code>Query Result: 90</code></p><p>调用,实现从a到b转账(<strong>终端3</strong>):</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke -o orderer.example.com:7050  --tls <span class="token variable">$CORE_PEER_TLS_ENABLED</span> --cafile <span class="token variable">$ORDERER_CA</span> -C <span class="token variable">$CHANNEL_NAME</span> -n mycc -c <span class="token string">'{"Args":["invoke","a","b","10"]}'</span></code></pre><p>查询:</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode query -C <span class="token variable">$CHANNEL_NAME</span> -n mycc -c <span class="token string">'{"Args":["query","a"]}'</span></code></pre><p>在终端1与终端3中通过,正确显示查询结果: <code>Query Result: 80</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabric 超级账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLedger Fabric - 超级账本（5）使用多通道</title>
      <link href="/2018/06/22/hyperledger-fabric-chao-ji-zhang-ben-5-shi-yong-duo-tong-dao/"/>
      <url>/2018/06/22/hyperledger-fabric-chao-ji-zhang-ben-5-shi-yong-duo-tong-dao/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="使用多通道"><a href="#使用多通道" class="headerlink" title="使用多通道"></a>使用多通道</h1><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/hyfa/fabric-samples/chaincode-docker-devmode$ <span class="token function">sudo</span> <span class="token function">docker-compose</span> -f docker-compose-simple.yaml down   $ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/first-network</code></pre><h3 id="创建一个应用通道的配置交易"><a href="#创建一个应用通道的配置交易" class="headerlink" title="创建一个应用通道的配置交易"></a>创建一个应用通道的配置交易</h3><p>务必替换$CHANNEL_NAME或设置CHANNEL_NAME为可在整个说明中使用的环境变量</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">CHANNEL_NAME</span><span class="token operator">=</span>mychannel2 </code></pre><p>指定使用 <code>configtx.yaml</code> 配置文件中的 <code>TwoOrgsChannel</code> 模板, 来生成新建通道的配置交易文件,</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token punctuation">..</span>/bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID <span class="token variable">$CHANNEL_NAME</span></code></pre><p>输出如下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">11</span>:13:24.984 CST <span class="token punctuation">[</span>common/tools/configtxgen<span class="token punctuation">]</span> main -<span class="token operator">&gt;</span> INFO 001 Loading configuration<span class="token number">11</span>:13:24.992 CST <span class="token punctuation">[</span>common/tools/configtxgen<span class="token punctuation">]</span> doOutputChannelCreateTx -<span class="token operator">&gt;</span> INFO 002 Generating new channel configtx<span class="token number">11</span>:13:24.993 CST <span class="token punctuation">[</span>msp<span class="token punctuation">]</span> getMspConfig -<span class="token operator">&gt;</span> INFO 003 Loading NodeOUs<span class="token number">11</span>:13:24.994 CST <span class="token punctuation">[</span>msp<span class="token punctuation">]</span> getMspConfig -<span class="token operator">&gt;</span> INFO 004 Loading NodeOUs<span class="token number">11</span>:13:25.016 CST <span class="token punctuation">[</span>common/tools/configtxgen<span class="token punctuation">]</span> doOutputChannelCreateTx -<span class="token operator">&gt;</span> INFO 005 Writing new channel tx</code></pre><h3 id="生成锚节点配置更新文件"><a href="#生成锚节点配置更新文件" class="headerlink" title="生成锚节点配置更新文件"></a>生成锚节点配置更新文件</h3><p>锚节点配置更新文件用来对组织的锚节点进行配置</p><p>同样基于 <code>configtx.yaml</code> 配置文件生成新建通道文件, 每个组织都需要分别生成且注意指定对应的组织名称</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token punctuation">..</span>/bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID <span class="token variable">$CHANNEL_NAME</span> -asOrg Org1MSP$ <span class="token function">sudo</span> <span class="token punctuation">..</span>/bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID <span class="token variable">$CHANNEL_NAME</span> -asOrg Org2MSP</code></pre><h3 id="启动网络"><a href="#启动网络" class="headerlink" title="启动网络"></a>启动网络</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker-compose</span> <span class="token punctuation">\</span>-f docker-compose-cli.yaml up <span class="token punctuation">\</span>-d</code></pre><h3 id="进入Docker容器"><a href="#进入Docker容器" class="headerlink" title="进入Docker容器"></a>进入Docker容器</h3><p>执行如下命令进入到CLI容器中</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it cli <span class="token function">bash</span></code></pre><h3 id="创建通道"><a href="#创建通道" class="headerlink" title="创建通道"></a>创建通道</h3><p>检查环境变量是否正确设置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$CHANNEL_NAME</span></code></pre><p>设置环境变量</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CHANNEL_NAME</span><span class="token operator">=</span>mychannel2</code></pre><p>创建通道</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel create -o orderer.example.com:7050 -c <span class="token variable">$CHANNEL_NAME</span> -f ./channel-artifacts/channel.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</code></pre><h3 id="加入通道"><a href="#加入通道" class="headerlink" title="加入通道"></a>加入通道</h3><p>应用通道所包含组织的成员节点可以加入通道中</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel <span class="token function">join</span> -b mychannel2.block -o orderer:7050</code></pre><hr><h3 id="更新锚点"><a href="#更新锚点" class="headerlink" title="更新锚点"></a>更新锚点</h3><p>使用Org1的管理员身份更新锚节点配置</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel update -o orderer.example.com:7050 -c <span class="token variable">$CHANNEL_NAME</span> -f ./channel-artifacts/Org1MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</code></pre><p>使用Org2的管理员身份更新锚节点配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>peer0.org2.example.com:7051 <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt peer channel update -o orderer.example.com:7050 -c <span class="token variable">$CHANNEL_NAME</span> -f ./channel-artifacts/Org2MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</code></pre><hr><h3 id="列出所加入的通道"><a href="#列出所加入的通道" class="headerlink" title="列出所加入的通道"></a>列出所加入的通道</h3><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel list</code></pre><p>list命令会列出指定的Peer节点已经加入的所有应用通道的列表.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabric 超级账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLedger Fabric - 超级账本（4）链码的概念与使用</title>
      <link href="/2018/06/22/hyperledger-fabric-chao-ji-zhang-ben-4-lian-ma-de-gai-nian-yu-shi-yong/"/>
      <url>/2018/06/22/hyperledger-fabric-chao-ji-zhang-ben-4-lian-ma-de-gai-nian-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h2><p>Chaincode: 链上代码, 简称链码, 一般是指用户编写的应用代码</p><p>链码被部署在Fabric网络节点上,</p><ul><li><p>Peer 节点</p></li><li><p>背书节点</p></li><li><p>commit节点</p></li><li><p>Leader节点</p></li><li><p>锚节点</p></li></ul><p>运行在隔离沙盒(当前为Docker容器)中,</p><p>并通过gRPC协议与相应的Peer节点进行交互, 以操作分布式账本中的数据</p><p>protobuf</p><p>分类</p><p>链码一般分为:</p><ul><li>用户链码</li><li>系统链码</li></ul><h3 id="用户链码"><a href="#用户链码" class="headerlink" title="用户链码"></a>用户链码</h3><p>由应用开发人员使用Go(Java/JS)语言编写基于区块链分布式账本的状态及处理逻辑</p><p>运行在链码容器中, 通过Fabric提供的接口与账本平台进行交互</p><h3 id="系统链码"><a href="#系统链码" class="headerlink" title="系统链码"></a>系统链码</h3><p>负责Fabric节点自身的处理逻辑, 包括系统配置、背书、校验等工作</p><p>系统链码仅支持Go语言, 在Peer节点启动时会自动完成注册和部署</p><p>系统链码共有五种类型:</p><h4 id="配置系统链码-CSCC"><a href="#配置系统链码-CSCC" class="headerlink" title="配置系统链码(CSCC)"></a>配置系统链码(CSCC)</h4><p>CSCC: Configuration System Chaincode</p><p>负责账本和链的配置管理</p><h4 id="背书管理系统链码-ESCC"><a href="#背书管理系统链码-ESCC" class="headerlink" title="背书管理系统链码(ESCC)"></a>背书管理系统链码(ESCC)</h4><p>ESCC: Endorsement System Chaincode</p><p>负责背书(签名)过程, 并可以支持对背书策略进行管理</p><blockquote><p>对传入的链码提案的模拟运行结果进行签名, 之后创建响应消息返回给客户端</p></blockquote><h4 id="生命周期系统链码-LSCC"><a href="#生命周期系统链码-LSCC" class="headerlink" title="生命周期系统链码(LSCC)"></a>生命周期系统链码(LSCC)</h4><p>LSCC: Lifecycle System Chaincode</p><p>负责对用户链码的生命周期进行管理</p><p>链码生命周期包括安装、部署、升级、权限管理、获取信息等环节.</p><h4 id="查询系统链码-QSCC"><a href="#查询系统链码-QSCC" class="headerlink" title="查询系统链码(QSCC)"></a>查询系统链码(QSCC)</h4><p>QSCC: Query System Chaincode</p><p>负责提供账本和链的信息查询功能</p><h4 id="验证系统链码-VSCC"><a href="#验证系统链码-VSCC" class="headerlink" title="验证系统链码(VSCC)"></a>验证系统链码(VSCC)</h4><p>VSCC: Verification System Chaincode</p><p>交易提交前根据背书策略进行检查</p><p>验证过程:</p><ol><li>首先解析出交易结构, 并对交易结构格式进行校验</li><li>检查交易的读集合中元素版本跟本地账本中版本一致</li><li>检查带有合法的背书信息(主要是检查签名信息)</li><li>通过则返回正确, 否则返回错误消息</li></ol><h2 id="链码生命周期"><a href="#链码生命周期" class="headerlink" title="链码生命周期"></a>链码生命周期</h2><p>管理Chaincode的生命周期四个命令：</p><p>安装, 实例化, 升级, 打包, 签名</p><p><code>package</code>， <code>install</code>，<code>instantiate</code>，<code>upgrade</code></p><p>未来还会支持<code>stop</code>和<code>start</code>命令, 来禁用和重新启用链代码</p><p>链代码成功安装和实例化后，链代码处于活动状态（正在运行），可通过<code>invoke</code>命令调用处理事务</p><p>链代码可以在安装后随时升级</p><h2 id="安装链码"><a href="#安装链码" class="headerlink" title="安装链码"></a>安装链码</h2><p>install命令将链码的源码和环境等内容封装为一个链码安装打包文件(Chaincode Install Package, CIP), 并传输到背书节点.</p><p>背书节点解析后一般会保存在$CORE_PEER_FILESYSTEMPATH/chaincodes目录下</p><p>安装链码只需要与Peer交互</p><h3 id="进入到sacc目录"><a href="#进入到sacc目录" class="headerlink" title="进入到sacc目录"></a>进入到sacc目录</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/hyfa/fabric-samples/chaincode/sacc/</code></pre><h3 id="构建Chaincode"><a href="#构建Chaincode" class="headerlink" title="构建Chaincode"></a>构建Chaincode</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ go get -u --tags nopkcs11 github.com/hyperledger/fabric/core/chaincode/shim$ go build --tags nopkcs11</code></pre><h4 id="命令解释"><a href="#命令解释" class="headerlink" title="命令解释"></a>命令解释</h4><p>go get: 根据要求和实际情况从互联网上下载或更新指定的代码包及其依赖包，并对它们进行编译和安装</p><p>-u: 利用网络来更新已有代码包及其依赖包。默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包</p><p>go build: 加上可编译的go源文件可以得到一个可执行文件</p><p>如果在执行 <code>go build \--tags nopkcsll</code> 命令时出现如下错误</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$GOPATH</span>/src/github.com/hyperledger/fabric/vendor/github.com/miekg/pkcs11/pkcs11.go:26:18: fatal error: ltdl.h: No such <span class="token function">file</span> or directorycompilation terminated.解决方式: 安装 libltdl-dev$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libltdl-dev</code></pre><h2 id="使用开发模式测试"><a href="#使用开发模式测试" class="headerlink" title="使用开发模式测试"></a>使用开发模式测试</h2><p>正常情况下chaincode由对等体启动和维护。然而，在“开发模式”下，链码由用户构建并启动</p><blockquote><p>如果没有安装Hyperledger Fabric Samples请先安装</p><p>如果没有下载Docker images请先下载</p></blockquote><p>跳转至<code>fabric-samples</code>的<code>chaincode-docker-devmode</code>目录</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/hyfa/fabric-samples/chaincode-docker-devmode/</code></pre><p>使用<code>docker images</code>查看Docker镜像信息(显示本地Docker Registry)</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> images</code></pre><p>会看到如下输出</p><pre class="language-bash" data-language="bash"><code class="language-bash">REPOSITORY                     TAG                  IMAGE ID            CREATED             SIZEhyperledger/fabric-tools       latest             b7bfddf508bc        About an hour ago   <span class="token number">1</span>.46GBhyperledger/fabric-tools       x86_64-1.1.0       b7bfddf508bc        About an hour ago   <span class="token number">1</span>.46GBhyperledger/fabric-orderer     latest             ce0c810df36a        About an hour ago   180MBhyperledger/fabric-orderer     x86_64-1.1.0       ce0c810df36a        About an hour ago   180MBhyperledger/fabric-peer        latest             b023f9be0771        About an hour ago   187MBhyperledger/fabric-peer        x86_64-1.1.0       b023f9be0771        About an hour ago   187MBhyperledger/fabric-javaenv     latest             82098abb1a17        About an hour ago   <span class="token number">1</span>.52GBhyperledger/fabric-javaenv     x86_64-1.1.0       82098abb1a17        About an hour ago   <span class="token number">1</span>.52GBhyperledger/fabric-ccenv       latest             c8b4909d8d46        About an hour ago   <span class="token number">1</span>.39GBhyperledger/fabric-ccenv       x86_64-1.1.0       c8b4909d8d46        About an hour ago   <span class="token number">1</span>.39GB<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><p><strong>使用三个终端</strong></p><h3 id="终端1-启动网络"><a href="#终端1-启动网络" class="headerlink" title="终端1 启动网络"></a>终端1 启动网络</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/hyfa/fabric-samples/chaincode-docker-devmode/</code></pre><blockquote><p>该目录下有 <code>myc.tx</code> 文件</p></blockquote><p>启动网络</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker-compose</span> -f docker-compose-simple.yaml up -d</code></pre><h3 id="终端2-建立并启动链码"><a href="#终端2-建立并启动链码" class="headerlink" title="终端2 建立并启动链码"></a>终端2 建立并启动链码</h3><p>打开第二个终端, 进入到<code>chaincode-docker-devmode</code> 目录</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/hyfa/fabric-samples/chaincode-docker-devmode/</code></pre><h4 id="进入CLI"><a href="#进入CLI" class="headerlink" title="进入CLI"></a>进入CLI</h4><p>chaincode容器的作用是为发简化的方式建立并启动链码</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it chaincode <span class="token function">bash</span></code></pre><blockquote><p>命令提示符变为:</p><p><code>root@858726aed16e:/opt/gopath/src/chaincode#</code></p></blockquote><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>进入sacc目录编译chaincode</p><pre class="language-bash" data-language="bash"><code class="language-bash">root@858726aed16e:/opt/gopath/src/chaincode<span class="token comment">#  cd sacc</span>root@858726aed16e:/opt/gopath/src/chaincode/sacc<span class="token comment">#  go build</span></code></pre><h4 id="运行chaincode"><a href="#运行chaincode" class="headerlink" title="运行chaincode"></a>运行chaincode</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>peer:7052 <span class="token assign-left variable">CORE_CHAINCODE_ID_NAME</span><span class="token operator">=</span>mycc:0 ./sacc</code></pre><p>mycc: 链码名称</p><p>0: 链码初始版本号</p><h3 id="终端3-使用链码"><a href="#终端3-使用链码" class="headerlink" title="终端3 使用链码"></a>终端3 使用链码</h3><h4 id="安装及实例化"><a href="#安装及实例化" class="headerlink" title="安装及实例化"></a>安装及实例化</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/hyfa/fabric-samples/chaincode-docker-devmode/$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it cli <span class="token function">bash</span></code></pre><p>进入CLI容器后执行如下命令安装及实例化chaincode</p><blockquote><p><strong>容器中已经有 <code>myc.block</code> 、 <code>myc.tx</code> 两个文件， 可以直接使用</strong></p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode <span class="token function">install</span> -p chaincodedev/chaincode/sacc -n mycc -v <span class="token number">0</span>peer chaincode instantiate -n mycc -v <span class="token number">0</span> -c <span class="token string">'{"Args":["a","10"]}'</span> -C myc </code></pre><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p>进行调用,将<code>a</code>的值更改为<code>20</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke -n mycc -c <span class="token string">'{"Args":["set", "a", "20"]}'</span> -C myc</code></pre><p>执行成功, 输出如下内容</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> Chaincode invoke successful. result: status:200 payload:<span class="token string">"20"</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>查询<code>a</code>的值</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode query -n mycc -c <span class="token string">'{"Args":["query","a"]}'</span> -C myc</code></pre><p>执行成功, 输出: <code>Query Result: 20</code></p><h2 id="打包链码及签名"><a href="#打包链码及签名" class="headerlink" title="打包链码及签名"></a>打包链码及签名</h2><p>通过将链码相关数据进行封装, 可以实现对其进行打包和签名操作</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode package -n mycc -p chaincodedev/chaincode/sacc -v <span class="token number">0</span> -s -S -i <span class="token string">"AND('OrgA.admin')"</span> ccpack.out</code></pre><blockquote><p>-s: 创建角色支持的CC部署规范包, 而不是原始的CC部署规范</p><p>-S: 如果创建CC部署规范方案角色支持,也与本地MSP签名</p><p>-i: 指定实例化策略</p></blockquote><p>打包后的文件, 可以直接用于install操作, 如:</p><p><code>peer chaincode install ccpack.out</code></p><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><p>对一个打包文件进行签名操作(添加当前MSP签名到签名列表中)</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode signpackage ccpack.out signedccpack.out</code></pre><h2 id="升级链码"><a href="#升级链码" class="headerlink" title="升级链码"></a>升级链码</h2><p><strong>退出终端3, 停止终端2的服务</strong></p><h3 id="终端2中重新运行chaincode"><a href="#终端2中重新运行chaincode" class="headerlink" title="终端2中重新运行chaincode"></a>终端2中重新运行chaincode</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it chaincode <span class="token function">bash</span><span class="token builtin class-name">cd</span> saccgo build<span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>peer:7052 <span class="token assign-left variable">CORE_CHAINCODE_ID_NAME</span><span class="token operator">=</span>mycc:1 ./sacc</code></pre><p><strong>注意版本为 <code>1.0</code>, 旧版本为 <code>0</code></strong></p><h3 id="终端3"><a href="#终端3" class="headerlink" title="终端3"></a>终端3</h3><p>打开终端3, 进入CLI容器</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it cli <span class="token function">bash</span></code></pre><h3 id="安装及升级"><a href="#安装及升级" class="headerlink" title="安装及升级"></a>安装及升级</h3><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode <span class="token function">install</span> -p chaincodedev/chaincode/sacc -n mycc -v <span class="token number">1</span>peer chaincode upgrade -n mycc -v <span class="token number">1</span> -c <span class="token string">'{"Args":["a", "100"]}'</span> -C myc </code></pre><p>注意版本号必须一致</p><p>在对某链码代码升级前, 推荐先将所有该链码的容器停止, 并从Peer上备份并移除旧链码部署文件. 之后先在个别Peer节点上部署新链码, 对原有数据进行测试, 成功后再在其它节点上进行升级操作</p><h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><p>查询<code>a</code>的值</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode query -n mycc -c <span class="token string">'{"Args":["query","a"]}'</span> -C myc</code></pre><p>执行成功, 输出: <code>Query Result:100</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabirc 超级账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLedger Fabric - 超级账本（3）测试链码</title>
      <link href="/2018/06/22/hyperledger-fabric-chao-ji-zhang-ben-3-ce-shi-lian-ma/"/>
      <url>/2018/06/22/hyperledger-fabric-chao-ji-zhang-ben-3-ce-shi-lian-ma/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="测试链码"><a href="#测试链码" class="headerlink" title="测试链码"></a>测试链码</h2><p>确定进入CLI容器中</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it cli <span class="token function">bash</span></code></pre><p>Peer加入应用通道后, 可以执行链码相关操作,进行测试</p><p>链码在调用之前, 必须先经过安装和实例化两个步骤, 部署到Peer节点上.</p><p>检查环境变量是否正确设置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$CHANNEL_NAME</span></code></pre><p>设置环境变量</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CHANNEL_NAME</span><span class="token operator">=</span>mychannel</code></pre><h3 id="安装并实例化Chaincode"><a href="#安装并实例化Chaincode" class="headerlink" title="安装并实例化Chaincode"></a>安装并实例化Chaincode</h3><p>安装:</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode <span class="token function">install</span> -n mycc -v <span class="token number">1.0</span> -p github.com/chaincode/chaincode_example02/go/</code></pre><p>参数说明:</p><p>-n: 指定要安装的链码的名称</p><p>-v: 指定要安装的链码的版本号</p><p>-p: 指定要安装的链码的链码文件所在路径</p><p>实例化:</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode instantiate -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C <span class="token variable">$CHANNEL_NAME</span> -n mycc -v <span class="token number">1.0</span> -c <span class="token string">'{"Args":["init","a", "100", "b","200"]}'</span> -P <span class="token string">"OR ('Org1MSP.peer','Org2MSP.peer')"</span></code></pre><p>参数说明:</p><p>-o: 指定Orderer服务地址</p><p>-n: 指定链码的名称</p><p>-v: 指定链码的版本号</p><p>-c: 指定实例化链码时的初始参数</p><p>-C: 指定链码的所属通道</p><p>-P:指定背书策略</p><p>–tls: 是否开启TLS</p><p>–cafile: 指定MSP CA证书路径</p><p>实例化完成后, 用户即可向网络中发起交易</p><p>调用链码:</p><ol><li>query</li><li>invoke</li></ol><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode query -C <span class="token variable">$CHANNEL_NAME</span> -n mycc -c <span class="token string">'{"Args":["query","a"]}'</span></code></pre><p>参数说明:</p><p>-C: 指定所属通道</p><p>-n: 指定链码名称</p><p>-c: 调用链码的传递的参数</p><p>输出结果:<code>Query Result: 100</code></p><h3 id="调用-x2F-转账"><a href="#调用-x2F-转账" class="headerlink" title="调用/转账"></a>调用/转账</h3><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke -o orderer.example.com:7050  --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem  -C <span class="token variable">$CHANNEL_NAME</span> -n mycc -c <span class="token string">'{"Args":["invoke","a","b","10"]}'</span></code></pre><h3 id="查询a账户的金额"><a href="#查询a账户的金额" class="headerlink" title="查询a账户的金额"></a>查询a账户的金额</h3><pre class="language-bash" data-language="bash"><code class="language-bash">peer chaincode query -C <span class="token variable">$CHANNEL_NAME</span> -n mycc -c <span class="token string">'{"Args":["query","a"]}'</span></code></pre><p>输出结果: <code>Query Result: 90</code></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>将github.com/chaincode/sacc/的链码安装并实例化,</p><ul><li><p>查询a账户的余额</p></li><li><p>使用set方法设置a账户的余额</p></li><li><p>使用get方法获取a账户的余额</p></li></ul><p>实例化时只需要两个参数, 不需要指定操作名称</p><ul><li>两个参数: 账户名, 金额</li></ul><p>set</p><ul><li>账户名, 金额</li></ul><p>get</p><ul><li>账户名, 金额</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabirc 超级账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLedger Fabric - 超级账本（2.2）启动网络 - 手动</title>
      <link href="/2018/06/20/hyperledger-fabric-chao-ji-zhang-ben-2.2-qi-dong-wang-luo-shou-dong/"/>
      <url>/2018/06/20/hyperledger-fabric-chao-ji-zhang-ben-2.2-qi-dong-wang-luo-shou-dong/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="启动网络手动实现"><a href="#启动网络手动实现" class="headerlink" title="启动网络手动实现"></a>启动网络手动实现</h2><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="生成组织关系和身份证书"><a href="#生成组织关系和身份证书" class="headerlink" title="生成组织关系和身份证书"></a>生成组织关系和身份证书</h3><p>确定是在 <code>fabric-samples/first-network</code> 路径下</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> hyfa/fabric-samples/first-network/</code></pre><p>为fabric网络生成指定拓扑结构的<strong>组织关系和身份证书</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token punctuation">..</span>/bin/cryptogen generate --config<span class="token operator">=</span>./crypto-config.yaml</code></pre><blockquote><p>此命令依赖 <code>crypto-config.yaml</code> 配置文件</p></blockquote><p>会有如下输出:</p><pre class="language-bash" data-language="bash"><code class="language-bash">org1.example.comorg2.example.com</code></pre><p>证书和密钥（即MSP材料）将被输出到目录 <code>first-network/crypto-config</code> 的目录中</p><p>ordererOrganizations子目录下包括构成Orderer组织(1个Orderer节点)的身份信息</p><p>peerOrganizations子目录下为所有的Peer节点组织(2个组织, 4个节点)的相关身份信息. 其中最关键的是MSP目录, 代表了实体的身份信息</p><p>crypto-config文件目录结构如下</p><pre class="language-bash" data-language="bash"><code class="language-bash">crypto-config├── ordererOrganizations│   └── example.com│       ├── ca│       │   ├── ca.example.com-cert.pem│       │   └── df69b6d2aea8038270c5340d358bfe34eee039a8e16d4a849e67ec27a8ed53bd_sk│       ├── msp│       │   ├── admincerts│       │   │   └── Admin@example.com-cert.pem│       │   ├── cacerts│       │   │   └── ca.example.com-cert.pem│       │   └── tlscacerts│       │       └── tlsca.example.com-cert.pem│       ├── orderers│       │   └── orderer.example.com│       │       ├── msp│       │       │   ├── admincerts│       │       │   ├── cacerts│       │       │   ├── keystore│       │       │   ├── signcerts│       │       │   └── tlscacerts│       │       └── tls│       │           ├── ca.crt│       │           ├── server.crt│       │           └── server.key│       ├── tlsca│       │   ├── 138f1cfd2708bca1e9e525773af410d46cef12736c3673ed787d7bbc38f013a4_sk│       │   └── tlsca.example.com-cert.pem│       └── <span class="token function">users</span>│           └── Admin@example.com│               ├── msp│               │   ├── admincerts│               │   ├── cacerts│               │   ├── keystore│               │   ├── signcerts│               │   └── tlscacerts│               └── tls│                   ├── ca.crt│                   ├── client.crt│                   └── client.key└── peerOrganizations    ├── org1.example.com            <span class="token comment"># 第一个组织的相关材料，每个组织会生成单独的根证书</span>    │   ├── ca  <span class="token comment">#存放组织的根证书和对应的私钥文件，默认采用EC 算法，证书为自签名。组织内的实体将基于该根证书作为证书根。</span>    │   │   ├── 9b78dd1cc0570c9ef3f3fa31a1b343e7a6c0f157a2cc17f75412e12f2936898c_sk    │   │   └── ca.org1.example.com-cert.pem    │   ├── msp                 <span class="token comment"># 存放代表该组织的身份信息</span>    │   │   ├── admincerts          <span class="token comment"># 组织管理员的身份验证证书，被根证书签名</span>    │   │   │   └── Admin@org1.example.com-cert.pem    │   │   ├── cacerts             <span class="token comment"># 组织的根证书，同ca 目录下文件</span>    │   │   │   └── ca.org1.example.com-cert.pem    │   │   ├── config.yaml    │   │   └── tlscacerts          <span class="token comment"># ：用于TLS 的CA 证书，自签名</span>    │   │       └── tlsca.org1.example.com-cert.pem    │   ├── peers           <span class="token comment"># 存放属于该组织的所有Peer 节点</span>    │   │   ├── peer0.org1.example.com    <span class="token comment"># 第一个peer 的信息，包括其msp 证书和tls 证书两类</span>    │   │   │   ├── msp         │   │   │   │   ├── admincerts              <span class="token comment"># 组织管理员的身份验证证书。Peer 将基于这些证书来认证交易签署者是否为管理员身份     </span>    │   │   │   │   ├── cacerts             <span class="token comment"># 存放组织的根证书</span>    │   │   │   │   ├── config.yaml             │   │   │   │   ├── keystore                <span class="token comment"># 本节点的身份私钥，用来签名</span>    │   │   │   │   ├── signcerts               <span class="token comment"># 验证本节点签名的证书，被组织根证书签名</span>    │   │   │   │   └── tlscacerts              <span class="token comment"># TLS 连接用的身份证书，即组织TLS 证书</span>    │   │   │   └── tls     <span class="token comment"># 存放tls 相关的证书和私钥</span>    │   │   │       ├── ca.crt          <span class="token comment"># 组织的根证书</span>    │   │   │       ├── server.crt      <span class="token comment"># 验证本节点签名的证书，被组织根证书签名</span>    │   │   │       └── server.key      <span class="token comment"># 本节点的身份私钥，用来签名</span>    │   │   └── peer1.org1.example.com      <span class="token comment"># 第二个peer 的信息，与peer0.org1.example.com结构类似</span>    │   │       ├── msp    │   │       │   ├── admincerts    │   │       │   ├── cacerts    │   │       │   ├── config.yaml    │   │       │   ├── keystore    │   │       │   ├── signcerts    │   │       │   └── tlscacerts    │   │       └── tls    │   │           ├── ca.crt    │   │           ├── server.crt    │   │           └── server.key    │   ├── tlsca    │   │   ├── cf4587814bc05f9f81ac3d990c365660dedf1479e60f737c7e9e707727a27168_sk    │   │   └── tlsca.org1.example.com-cert.pem    │   └── <span class="token function">users</span>       <span class="token comment"># 存放属于该组织的用户的实体</span>    │       ├── Admin@org1.example.com      <span class="token comment"># 管理员用户的信息，包括其msp 证书和tls 证书两类</span>    │       │   ├── msp    │       │   │   ├── admincerts          <span class="token comment"># 管理身份验证证书</span>    │       │   │   ├── cacerts             <span class="token comment"># 存放组织的根证书</span>    │       │   │   ├── keystore            <span class="token comment"># 本用户的身份私钥，用来签名</span>    │       │   │   ├── signcerts           <span class="token comment"># 管理员用户的身份验证证书，被组织根证书签名。要被某个Peer认可，则必须放到该Peer 的msp/admincerts 下</span>    │       │   │   └── tlscacerts          <span class="token comment"># TLS 连接用的身份证书，即组织TLS 证书</span>    │       │   └── tls     <span class="token comment"># 存放tls 相关的证书和私钥</span>    │       │       ├── ca.crt      <span class="token comment"># 组织的根证书</span>    │       │       ├── client.crt      <span class="token comment"># 管理员的用户身份验证证书，被组织根证书签名</span>    │       │       └── client.key  <span class="token comment"># 管理员用户的身份私钥，用来签名</span>    │       └── User1@org1.example.com      <span class="token comment"># 第一个用户的信息，包括msp 证书和tls 证书两类</span>    │           ├── msp    │           │   ├── admincerts      <span class="token comment"># 管理身份验证证书</span>    │           │   ├── cacerts         <span class="token comment"># 存放组织的根证书</span>    │           │   ├── keystore            <span class="token comment"># 本用户的身份私钥，用来签名</span>    │           │   ├── signcerts       <span class="token comment"># 验证本用户签名的身份证书，被组织根证书签名</span>    │           │   └── tlscacerts      <span class="token comment"># TLS 连接用的身份证书，即组织TLS 证书</span>    │           └── tls         <span class="token comment"># 存放tls 相关的证书和私钥</span>    │               ├── ca.crt      <span class="token comment"># 组织的根证书</span>    │               ├── client.crt      <span class="token comment"># 验证用户签名的身份证书，被组织根证书签名</span>    │               └── client.key      <span class="token comment"># 用户的身份私钥，用来签名</span>    └── org2.example.com                <span class="token comment"># 第二个组织的信息，与org1.example.com结构类似</span>        ├── ca        │   ├── 91fd76daf883a57066303fb6842ff4fb07c6793dbc8fbbca6303efea455884b2_sk        │   └── ca.org2.example.com-cert.pem        ├── msp        │   ├── admincerts        │   │   └── Admin@org2.example.com-cert.pem        │   ├── cacerts        │   │   └── ca.org2.example.com-cert.pem        │   ├── config.yaml        │   └── tlscacerts        │       └── tlsca.org2.example.com-cert.pem        ├── peers        │   ├── peer0.org2.example.com        │   │   ├── msp        │   │   │   ├── admincerts        │   │   │   ├── cacerts        │   │   │   ├── config.yaml        │   │   │   ├── keystore        │   │   │   ├── signcerts        │   │   │   └── tlscacerts        │   │   └── tls        │   │       ├── ca.crt        │   │       ├── server.crt        │   │       └── server.key        │   └── peer1.org2.example.com        │       ├── msp        │       │   ├── admincerts        │       │   ├── cacerts        │       │   ├── config.yaml        │       │   ├── keystore        │       │   ├── signcerts        │       │   └── tlscacerts        │       └── tls        │           ├── ca.crt        │           ├── server.crt        │           └── server.key        ├── tlsca        │   ├── d3c3e6e37d306992bc9fb826415ed77971031418db48c195d5a24521916f32f3_sk        │   └── tlsca.org2.example.com-cert.pem        └── <span class="token function">users</span>            ├── Admin@org2.example.com            │   ├── msp            │   │   ├── admincerts            │   │   ├── cacerts            │   │   ├── keystore            │   │   ├── signcerts            │   │   └── tlscacerts            │   └── tls            │       ├── ca.crt            │       ├── client.crt            │       └── client.key            └── User1@org2.example.com                ├── msp                │   ├── admincerts                │   ├── cacerts                │   ├── keystore                │   ├── signcerts                │   └── tlscacerts                └── tls                    ├── ca.crt                    ├── client.crt                    └── client.key</code></pre><p>Cryptogen 按照配置文件中指定的结构生成了对应的组织和密钥、证书文件</p><p>其中最关键的是各个资源下的msp 目录内容，存储了生成的代表MSP 身份的各种证书文件，一般包括：</p><ul><li>admincerts ：管理员的身份证书文件</li><li>cacerts ：信任的根证书文件</li><li>key store ：节点的签名私钥文件</li><li>signcerts ：节点的签名身份证书文件</li><li>tlscacerts: TLS 连接用的证书</li><li>intermediatecerts （可选）：信任的中间证书</li><li>crls （可选）：证书撤销列表</li><li>config.yaml （可选）：记录OrganizationalUnitldentifiers 信息，包括根证书位置和ID信息</li></ul><p>这些身份文件随后可以分发到对应的Orderer 节点和Peer 节点上，并放到对应的MSP路径下，用于签名使用</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>告诉configtxgen工具在哪里寻找configtx.yaml 文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span></code></pre><h3 id="创建Ordering服务启动初始区块"><a href="#创建Ordering服务启动初始区块" class="headerlink" title="创建Ordering服务启动初始区块"></a>创建Ordering服务启动初始区块</h3><p>指定使用 <code>configtx.yaml</code> 文件中定义的 <code>TwoOrgsOrdererGenesis</code> 模板, 生成Ordering服务系统通道的初始区块文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token punctuation">..</span>/bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block</code></pre><p>命令执行后输出如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">10</span>:49:21.181 CST <span class="token punctuation">[</span>common/tools/configtxgen<span class="token punctuation">]</span> main -<span class="token operator">&gt;</span> INFO 001 Loading configuration<span class="token number">10</span>:49:21.207 CST <span class="token punctuation">[</span>msp<span class="token punctuation">]</span> getMspConfig -<span class="token operator">&gt;</span> INFO 002 Loading NodeOUs<span class="token number">10</span>:49:21.208 CST <span class="token punctuation">[</span>msp<span class="token punctuation">]</span> getMspConfig -<span class="token operator">&gt;</span> INFO 003 Loading NodeOUs<span class="token number">10</span>:49:21.210 CST <span class="token punctuation">[</span>common/tools/configtxgen<span class="token punctuation">]</span> doOutputBlock -<span class="token operator">&gt;</span> INFO 004 Generating genesis block<span class="token number">10</span>:49:21.211 CST <span class="token punctuation">[</span>common/tools/configtxgen<span class="token punctuation">]</span> doOutputBlock -<span class="token operator">&gt;</span> INFO 005 Writing genesis block</code></pre><h3 id="创建一个应用通道的配置交易"><a href="#创建一个应用通道的配置交易" class="headerlink" title="创建一个应用通道的配置交易"></a>创建一个应用通道的配置交易</h3><p>务必替换$CHANNEL_NAME或设置CHANNEL_NAME为可在整个说明中使用的环境变量</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">CHANNEL_NAME</span><span class="token operator">=</span>mychannel</code></pre><p>指定使用 <code>configtx.yaml</code> 配置文件中的 <code>TwoOrgsChannel</code> 模板, 来生成新建通道的配置交易文件, <code>TwoOrgsChannel</code> 模板指定了Org1和Org2都属于后面新建的应用通道</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token punctuation">..</span>/bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID <span class="token variable">$CHANNEL_NAME</span></code></pre><p>输出如下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">11</span>:13:24.984 CST <span class="token punctuation">[</span>common/tools/configtxgen<span class="token punctuation">]</span> main -<span class="token operator">&gt;</span> INFO 001 Loading configuration<span class="token number">11</span>:13:24.992 CST <span class="token punctuation">[</span>common/tools/configtxgen<span class="token punctuation">]</span> doOutputChannelCreateTx -<span class="token operator">&gt;</span> INFO 002 Generating new channel configtx<span class="token number">11</span>:13:24.993 CST <span class="token punctuation">[</span>msp<span class="token punctuation">]</span> getMspConfig -<span class="token operator">&gt;</span> INFO 003 Loading NodeOUs<span class="token number">11</span>:13:24.994 CST <span class="token punctuation">[</span>msp<span class="token punctuation">]</span> getMspConfig -<span class="token operator">&gt;</span> INFO 004 Loading NodeOUs<span class="token number">11</span>:13:25.016 CST <span class="token punctuation">[</span>common/tools/configtxgen<span class="token punctuation">]</span> doOutputChannelCreateTx -<span class="token operator">&gt;</span> INFO 005 Writing new channel tx</code></pre><h3 id="生成锚节点配置更新文件"><a href="#生成锚节点配置更新文件" class="headerlink" title="生成锚节点配置更新文件"></a>生成锚节点配置更新文件</h3><p>锚节点配置更新文件用来对组织的锚节点进行配置</p><p>同样基于 <code>configtx.yaml</code> 配置文件生成新建通道文件, 每个组织都需要分别生成且注意指定对应的组织名称</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token punctuation">..</span>/bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID <span class="token variable">$CHANNEL_NAME</span> -asOrg Org1MSP$ <span class="token function">sudo</span> <span class="token punctuation">..</span>/bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID <span class="token variable">$CHANNEL_NAME</span> -asOrg Org2MSP</code></pre><h3 id="启动网络"><a href="#启动网络" class="headerlink" title="启动网络"></a>启动网络</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker-compose</span> <span class="token punctuation">\</span>-f docker-compose-cli.yaml up <span class="token punctuation">\</span>-d```<span class="token variable"><span class="token variable">`</span><span class="token punctuation">\</span>-f: 指定docker-compose文件注:<span class="token operator">&gt;</span> 如果想查看网络的实时日志，则不需要提供 <span class="token punctuation">\</span>-d 参数<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> CLI容器将闲置1000秒。如果在需要时它消失了，可以用一个简单的命令重新启动它：<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> ​ <span class="token punctuation">\</span>$ <span class="token function">sudo</span> <span class="token function">docker</span> start cli网络启动顺序: 首先启动Orderer节点, 然后启动Peer节点, 日志输出如下:<span class="token variable">`</span></span>``bash<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>orderer.example.com       <span class="token operator">|</span> 02:48:25.080 UTC <span class="token punctuation">[</span>orderer/common/server<span class="token punctuation">]</span> initializeServerConfig -<span class="token operator">&gt;</span> INFO 002 Starting orderer with TLS enabledorderer.example.com       <span class="token operator">|</span> 02:48:25.101 UTC <span class="token punctuation">[</span>fsblkstorage<span class="token punctuation">]</span> newBlockfileMgr -<span class="token operator">&gt;</span> INFO 003 Getting block information from block storageorderer.example.com       <span class="token operator">|</span> 02:48:25.138 UTC <span class="token punctuation">[</span>orderer/commmon/multichannel<span class="token punctuation">]</span> NewRegistrar -<span class="token operator">&gt;</span> INFO 004 Starting system channel <span class="token string">'testchainid'</span> with genesis block <span class="token builtin class-name">hash</span> 67662e918ab76b4a8863cc625d67fcc31e9cb3a7c3c4f9f707af1c05ba5be686 and orderer <span class="token builtin class-name">type</span> soloorderer.example.com       <span class="token operator">|</span> 02:48:25.138 UTC <span class="token punctuation">[</span>orderer/common/server<span class="token punctuation">]</span> Start -<span class="token operator">&gt;</span> INFO 005 Starting orderer:<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><p>Peer节点启动后, 默认情况下没有加入网络中的任何应用通道, 也不会与Orderer服务建立连接.需要通过客户端对其进行操作, 让它加入网络和指定的应用通道中</p><h3 id="进入Docker容器"><a href="#进入Docker容器" class="headerlink" title="进入Docker容器"></a>进入Docker容器</h3><p>执行如下命令进入到CLI容器中(后继操作都在容器中执行)</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it cli <span class="token function">bash</span></code></pre><p>如果成功, 命令提示符会变为如下内容:</p><p><code>root@b240e1643244:/opt/gopath/src/github.com/hyperledger/fabric/peer#</code></p><h3 id="创建通道"><a href="#创建通道" class="headerlink" title="创建通道"></a>创建通道</h3><p>检查环境变量是否正确设置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$CHANNEL_NAME</span></code></pre><p>设置环境变量</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CHANNEL_NAME</span><span class="token operator">=</span>mychannel</code></pre><p>创建通道</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel create -o orderer.example.com:7050 -c <span class="token variable">$CHANNEL_NAME</span> -f ./channel-artifacts/channel.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</code></pre><blockquote><p>该命令自动在本地生成与该应用通道同名的初始区块 <strong>mychannel.block</strong>, 只有拥有该文件才可以加入创建的应用通道中</p></blockquote><p>查看:</p><pre class="language-bash" data-language="bash"><code class="language-bash">root@086adb802655:/opt/gopath/src/github.com/hyperledger/fabric/peer<span class="token comment"># ll</span>total <span class="token number">36</span>drwxr-xr-x <span class="token number">5</span> root root  <span class="token number">4096</span> Apr <span class="token number">29</span> 03:34 ./drwxr-xr-x <span class="token number">3</span> root root  <span class="token number">4096</span> Apr <span class="token number">29</span> 02:48 <span class="token punctuation">..</span>/drwxr-xr-x <span class="token number">2</span> root root  <span class="token number">4096</span> Apr <span class="token number">29</span> 02:47 channel-artifacts/drwxr-xr-x <span class="token number">4</span> root root  <span class="token number">4096</span> Apr <span class="token number">29</span> 02:35 crypto/-rw-r--r-- <span class="token number">1</span> root root <span class="token number">15660</span> Apr <span class="token number">29</span> 03:34 mychannel.blockdrwxr-xr-x <span class="token number">2</span> root root  <span class="token number">4096</span> Apr <span class="token number">29</span> 02:13 scripts/</code></pre><h3 id="加入通道"><a href="#加入通道" class="headerlink" title="加入通道"></a>加入通道</h3><p>应用通道所包含组织的成员节点可以加入通道中</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel <span class="token function">join</span> -b mychannel.block</code></pre><p>join命令: 将本Peer节点加入到某个应用通道中</p><h4 id="参数含义"><a href="#参数含义" class="headerlink" title="参数含义"></a>参数含义</h4><p>-b: 初始区块文件的路径信息</p><blockquote><p>执行成功后, Peer连接到该应用通道的Ordering服务上, 开始接收区块信息</p></blockquote><h3 id="更新锚点"><a href="#更新锚点" class="headerlink" title="更新锚点"></a>更新锚点</h3><p>使用Org1的管理员身份更新锚节点配置</p><pre class="language-bash" data-language="bash"><code class="language-bash">peer channel update -o orderer.example.com:7050 -c <span class="token variable">$CHANNEL_NAME</span> -f ./channel-artifacts/Org1MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</code></pre><p>使用Org2的管理员身份更新锚节点配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span><span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>peer0.org2.example.com:7051 <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp<span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span>/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt peer channel update -o orderer.example.com:7050 -c <span class="token variable">$CHANNEL_NAME</span> -f ./channel-artifacts/Org2MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</code></pre><p>手动配置网络完成, 可以测试Chaincode</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabric 超级账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLedger Fabric - 超级账本（2.1）启动网络 - 自动</title>
      <link href="/2018/06/20/hyperledger-fabric-chao-ji-zhang-ben-2.1-qi-dong-wang-luo-zi-dong/"/>
      <url>/2018/06/20/hyperledger-fabric-chao-ji-zhang-ben-2.1-qi-dong-wang-luo-zi-dong/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="进入对应目录"><a href="#进入对应目录" class="headerlink" title="进入对应目录"></a>进入对应目录</h1><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> fabric-samples/first-network</code></pre><p>在<code>first-network</code>目录下有两个自动化脚本<code>byfn.sh</code>和<code>eyfn.sh</code>, 这两个脚本的启动顺序是先执行byfn.sh再执行eyfn.sh（eyfn.sh不是必须的，eyfn.sh的作用稍后介绍）</p><p>查看帮助信息:</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ ./byfn.sh --help</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">up：启动down：清除网络restart：重新启动generate：生成证书及创世块upgrade：将网络从1.0升级到1.1-c：用于指定channelName，默认值<span class="token string">"mychannel"</span>-t：CLI timeout时间，默认值10-d：延迟启动，默认值3-f：使用指定的网络拓扑结构文件，默认使用docker-compose-cli.yaml-s：指定使用的数据库，可选 goleveldb或couchdb-l：指定chaincode使用的语言，可选golang 或node-i：指定镜像tag，默认 <span class="token string">"latest"</span>详细参数可通过./byfn.sh help查看</code></pre><h1 id="生成证书和密钥"><a href="#生成证书和密钥" class="headerlink" title="生成证书和密钥"></a>生成证书和密钥</h1><p>为各种网络实体生成所有证书和密钥，用于引导订购服务以及配置通道所需的一系列配置事务</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./byfn.sh -m generate</code></pre><h1 id="启动网络"><a href="#启动网络" class="headerlink" title="启动网络"></a>启动网络</h1><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./byfn.sh -m up</code></pre><p>如果启动发生错误,则执行关闭命令后再次执行启动命令</p><p>最后输出如下内容代表启动且测试成功</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> Query on peer1.org2 on channel <span class="token string">'mychannel'</span> is successful <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> All GOOD, BYFN execution completed <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> </code></pre><blockquote><p>或者通过Node.js启动网络<code>./byfn.sh \-m up \-l node</code></p></blockquote><p>first-network会生成1个orderer+4个peer+1个CLI的网络结构，整个网络包括2个org</p><h1 id="关闭网络"><a href="#关闭网络" class="headerlink" title="关闭网络"></a>关闭网络</h1><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./byfn.sh -m down</code></pre><p>关闭网络之后, 可以一步一步地探索网络设置. 将杀死容器, 删除加密文件, 并从Docker Registry中删除链码图像</p><p>若在启动网络时遇到如下错误</p><pre class="language-bash" data-language="bash"><code class="language-bash">OCI runtime <span class="token builtin class-name">exec</span> failed: <span class="token builtin class-name">exec</span> failed: container_linux.go:348: starting container process caused <span class="token string">"exec: <span class="token entity" title="\&quot;">\"</span>scripts/script.sh<span class="token entity" title="\&quot;">\"</span>: stat scripts/script.sh: no such file or directory"</span><span class="token builtin class-name">:</span> unknown</code></pre><p>或者</p><pre class="language-bash" data-language="bash"><code class="language-bash">ERROR: Encountered errors <span class="token keyword">while</span> bringing up the project.ERROR <span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span> Unable to start network</code></pre><p>则执行<code>./byfn.sh down</code> 清除网络后再启动</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabric 超级账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLedger Fabric - 超级账本（1）环境搭建</title>
      <link href="/2018/06/19/hyperledger-fabric-chao-ji-zhang-ben-1-huan-jing-da-jian/"/>
      <url>/2018/06/19/hyperledger-fabric-chao-ji-zhang-ben-1-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>快速入门: <a href="http://hyperledger-fabric.readthedocs.io/en/release-1.1/getting_started.html">http://hyperledger-fabric.readthedocs.io/en/release-1.1/getting_started.html</a></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> update$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span></code></pre><h4 id="安装curl"><a href="#安装curl" class="headerlink" title="安装curl"></a>安装curl</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span></code></pre><h4 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span></code></pre><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> update$ <span class="token function">docker</span> --version$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker.io</code></pre><h4 id="查看Docker版本信息"><a href="#查看Docker版本信息" class="headerlink" title="查看Docker版本信息"></a>查看Docker版本信息</h4><p>version 1.12+</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> --version</code></pre><p>输出: <code>Docker version 1.13.1, build 092cba3</code></p><h3 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> --version$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">docker-compose</span></code></pre><h4 id="查看DockerCompose版本信息"><a href="#查看DockerCompose版本信息" class="headerlink" title="查看DockerCompose版本信息"></a>查看DockerCompose版本信息</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> --version</code></pre><p>输出: </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> version <span class="token number">1.8</span>.0, build unknown</code></pre><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><p>Fabric1.1.0版本要求Go1.9+</p><p>Fabric1.0.0版本要求Go1.7+</p><p>上传go1.10.1.linux-amd64.tar.gz</p><h4 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> -zxvf go1.10.1.linux-amd64.tar.gz</code></pre><h4 id="编辑环境变量文件"><a href="#编辑环境变量文件" class="headerlink" title="编辑环境变量文件"></a>编辑环境变量文件</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> .bashrc </code></pre><p>添加如下内容:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/gocode<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOROOT</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/go<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$GOROOT</span>/bin:<span class="token environment constant">$PATH</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">source</span> .bashrc$ go version</code></pre><p>输出:</p><pre class="language-bash" data-language="bash"><code class="language-bash">go version go1.10.1 linux/amd64</code></pre><blockquote><p>如果系统中有旧版本的golang,则使用如下命令卸载旧版本的golang,然后再重新安装</p><pre class="language-none"><code class="language-none">$ su -# apt-get remove golang-go --purge &amp;&amp; apt-get autoremove --purge &amp;&amp; apt-get clean</code></pre></blockquote><h3 id="安装Node与npm"><a href="#安装Node与npm" class="headerlink" title="安装Node与npm"></a>安装Node与npm</h3><h4 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> update$ <span class="token function">curl</span> -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.10/install.sh <span class="token operator">|</span> <span class="token function">bash</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.nvm"</span>$ <span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> </code></pre><h4 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ nvm <span class="token function">install</span> v8.11.1</code></pre><h4 id="检查Node版本"><a href="#检查Node版本" class="headerlink" title="检查Node版本"></a>检查Node版本</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span> -v</code></pre><p>输出: </p><pre class="language-bash" data-language="bash"><code class="language-bash">v8.11.1</code></pre><h4 id="检查npm版本"><a href="#检查npm版本" class="headerlink" title="检查npm版本"></a>检查npm版本</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> -v</code></pre><p>输出: </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">5.6</span>.0</code></pre><h3 id="Hyperledger-Fabric-Samples-下载安装"><a href="#Hyperledger-Fabric-Samples-下载安装" class="headerlink" title="Hyperledger Fabric Samples 下载安装"></a>Hyperledger Fabric Samples 下载安装</h3><h4 id="创建一个空目录"><a href="#创建一个空目录" class="headerlink" title="创建一个空目录"></a>创建一个空目录</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> hyfa</code></pre><h4 id="进入该目录"><a href="#进入该目录" class="headerlink" title="进入该目录"></a>进入该目录</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> hyfa</code></pre><h5 id="下载方式一"><a href="#下载方式一" class="headerlink" title="下载方式一:"></a>下载方式一:</h5><p><strong>新建文件bootstrap.sh</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> bootstrap.sh</code></pre><p>将<code>https://github.com/hyperledger/fabric/blob/master/scripts/bootstrap.sh</code>中的内容拷贝保存退出</p><p><strong>赋予bootstrap.sh可执行权限并运行</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> +x bootstrap.sh</code></pre><p><strong>配置docker加速器</strong></p><p>配置docker加速器的目的是为了在下载docker镜像文件时加速</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> -sSL https://get.daocloud.io/daotools/set_mirror.sh <span class="token operator">|</span> <span class="token function">sh</span> -s http://8890cb8b.m.daocloud.io</code></pre><p><strong>重启docker服务</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl restart docker.service</code></pre><p><strong>执行<code>bootstrap.sh</code></strong></p><p><strong>确定网络稳定,否则会导致各种问题，例如下载到一半时网络超时，下载失败等等</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./bootstrap.sh <span class="token number">1.1</span>.0</code></pre><p>下载完成后, 查看相关输出内容, 如果下载有失败的镜像, 可再次执行 <code>$ sudo ./bootstrap.sh 1.1.0</code> 命令</p><h5 id="下载方式二"><a href="#下载方式二" class="headerlink" title="下载方式二:"></a>下载方式二:</h5><blockquote><p><strong>建议使用方式一进行下载</strong></p></blockquote><p><strong>配置docker加速器,</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> -sSL https://get.daocloud.io/daotools/set_mirror.sh <span class="token operator">|</span> <span class="token function">sh</span> -s http://8890cb8b.m.daocloud.io</code></pre><p><strong>重启docker服务</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl restart docker.service</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span>  https://github.com/hyperledger/fabric/blob/master/scripts/bootstrap.sh <span class="token operator">|</span> <span class="token function">bash</span> -s <span class="token number">1.1</span>.0</code></pre><hr><p>安装完成后输出:</p><pre class="language-bash" data-language="bash"><code class="language-bash">hyperledger/fabric-ca          latest          72617b4fa9b4   <span class="token number">5</span> weeks ago    <span class="token number">299</span> MBhyperledger/fabric-ca          x86_64-1.1.0    72617b4fa9b4   <span class="token number">5</span> weeks ago    <span class="token number">299</span> MBhyperledger/fabric-tools       latest          b7bfddf508bc   <span class="token number">5</span> weeks ago    <span class="token number">1.46</span> GBhyperledger/fabric-tools       x86_64-1.1.0    b7bfddf508bc   <span class="token number">5</span> weeks ago    <span class="token number">1.46</span> GBhyperledger/fabric-orderer     latest          ce0c810df36a   <span class="token number">5</span> weeks ago    <span class="token number">180</span> MBhyperledger/fabric-orderer     x86_64-1.1.0    ce0c810df36a   <span class="token number">5</span> weeks ago    <span class="token number">180</span> MBhyperledger/fabric-peer        latest          b023f9be0771   <span class="token number">5</span> weeks ago    <span class="token number">187</span> MBhyperledger/fabric-peer        x86_64-1.1.0    b023f9be0771   <span class="token number">5</span> weeks ago    <span class="token number">187</span> MBhyperledger/fabric-javaenv     latest          82098abb1a17   <span class="token number">5</span> weeks ago    <span class="token number">1.52</span> GBhyperledger/fabric-javaenv     x86_64-1.1.0    82098abb1a17   <span class="token number">5</span> weeks ago    <span class="token number">1.52</span> GBhyperledger/fabric-ccenv       latest          c8b4909d8d46   <span class="token number">5</span> weeks ago    <span class="token number">1.39</span> GBhyperledger/fabric-ccenv       x86_64-1.1.0    c8b4909d8d46   <span class="token number">5</span> weeks ago    <span class="token number">1.39</span> GBhyperledger/fabric-zookeeper   latest          92cbb952b6f8   <span class="token number">2</span> months ago   <span class="token number">1.39</span> GBhyperledger/fabric-zookeeper   x86_64-0.4.6    92cbb952b6f8   <span class="token number">2</span> months ago   <span class="token number">1.39</span> GBhyperledger/fabric-kafka       latest          554c591b86a8   <span class="token number">2</span> months ago   <span class="token number">1.4</span> GBhyperledger/fabric-kafka       x86_64-0.4.6    554c591b86a8   <span class="token number">2</span> months ago   <span class="token number">1.4</span> GBhyperledger/fabric-couchdb     latest          7e73c828fc5b   <span class="token number">2</span> months ago   <span class="token number">1.56</span> GBhyperledger/fabric-couchdb     x86_64-0.4.6    7e73c828fc5b   <span class="token number">2</span> months ago   <span class="token number">1.56</span> GB</code></pre><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token operator">&lt;</span>path to download location<span class="token operator">&gt;</span>/bin:<span class="token environment constant">$PATH</span></code></pre><p>注: 表示下载的<code>fabric-samples</code>文件目录所在路径</p><pre class="language-bash" data-language="bash"><code class="language-bash">例:  $ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/hyfa/fabric-samples/bin:<span class="token environment constant">$PATH</span></code></pre><p><code>HyperLedger Fabric</code>环境搭建完成</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabric 超级账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊源码解析 - 以太坊P2P协议</title>
      <link href="/2018/06/18/yi-tai-fang-yuan-ma-jie-xi-yi-tai-fang-p2p-xie-yi/"/>
      <url>/2018/06/18/yi-tai-fang-yuan-ma-jie-xi-yi-tai-fang-p2p-xie-yi/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="创建P2P-server"><a href="#创建P2P-server" class="headerlink" title="创建P2P server"></a>创建P2P server</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token comment">// Initialize the p2p server. This creates the node key and</span><span class="token comment">// discovery databases.</span>n<span class="token punctuation">.</span>serverConfig <span class="token operator">=</span> n<span class="token punctuation">.</span>config<span class="token punctuation">.</span>P2Pn<span class="token punctuation">.</span>serverConfig<span class="token punctuation">.</span>PrivateKey <span class="token operator">=</span> n<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">NodeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>n<span class="token punctuation">.</span>serverConfig<span class="token punctuation">.</span>Name <span class="token operator">=</span> n<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">NodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>n<span class="token punctuation">.</span>serverConfig<span class="token punctuation">.</span>Logger <span class="token operator">=</span> n<span class="token punctuation">.</span>log<span class="token keyword">if</span> n<span class="token punctuation">.</span>serverConfig<span class="token punctuation">.</span>StaticNodes <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>n<span class="token punctuation">.</span>serverConfig<span class="token punctuation">.</span>StaticNodes <span class="token operator">=</span> n<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">StaticNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> n<span class="token punctuation">.</span>serverConfig<span class="token punctuation">.</span>TrustedNodes <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>n<span class="token punctuation">.</span>serverConfig<span class="token punctuation">.</span>TrustedNodes <span class="token operator">=</span> n<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">TrustedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> n<span class="token punctuation">.</span>serverConfig<span class="token punctuation">.</span>NodeDatabase <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>n<span class="token punctuation">.</span>serverConfig<span class="token punctuation">.</span>NodeDatabase <span class="token operator">=</span> n<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">NodeDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>running <span class="token operator">:=</span> <span class="token operator">&amp;</span>p2p<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>Config<span class="token punctuation">:</span> n<span class="token punctuation">.</span>serverConfig<span class="token punctuation">}</span>n<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Starting peer-to-peer node"</span><span class="token punctuation">,</span> <span class="token string">"instance"</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>serverConfig<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>代码首先做了一些检查工作：加锁、判断结点是否已经运行、检查datadir是否可以打开，然后初始化P2P server配置，最后用该配置创建了一个p2p.Server实例。首先初始化Node中的services字段，然后遍历serviceFuncs，也就是之前注册的所有Service的构造函数列表。在创建Service实例之前，先为每个Service创建一个ServiceContext，之前提到过，ServiceContext里存储的是从Node继承过来的一些信息。接着通过构造函数创建Service实例，然后加入到service这个map中。</p><h2 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h2><pre class="language-golang" data-language="golang"><code class="language-golang">// Otherwise copy and specialize the P2P configurationservices := make(map[reflect.Type]Service)for _, constructor := range n.serviceFuncs {// Create a new context for the particular servicectx := &amp;ServiceContext{config:         n.config,services:       make(map[reflect.Type]Service),EventMux:       n.eventmux,AccountManager: n.accman,}for kind, s := range services { // copy needed for threaded accessctx.services[kind] = s}// Construct and save the serviceservice, err := constructor(ctx)if err != nil {return err}kind := reflect.TypeOf(service)if _, exists := services[kind]; exists {return &amp;DuplicateServiceError{Kind: kind}}services[kind] = service}</code></pre><p>首先初始化Node中的services字段，然后遍历serviceFuncs，也就是之前注册的所有Service的构造函数列表。在创建Service实例之前，先为每个Service创建一个ServiceContext，之前提到过，ServiceContext里存储的是从Node继承过来的一些信息。接着通过构造函数创建Service实例，然后加入到service这个map中。</p><h2 id="启动P2P-server"><a href="#启动P2P-server" class="headerlink" title="启动P2P server"></a>启动P2P server</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// Gather the protocols and start the freshly assembled P2P server  </span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> service <span class="token operator">:=</span> <span class="token keyword">range</span> services <span class="token punctuation">{</span>          running<span class="token punctuation">.</span>Protocols <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>running<span class="token punctuation">.</span>Protocols<span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">Protocols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> err <span class="token operator">:=</span> running<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">convertFileLockError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  </code></pre><p>首先把所有Service支持的协议集合到一起，然后调用p2p.Server的Start()方法启动P2P server（代码位于p2p/server.go）。P2P server会绑定一个UDP端口和一个TCP端口，端口号是相同的（默认30303）。UDP端口主要用于结点发现，TCP端口主要用于业务数据传输，基于RLPx加密传输协议。所以具体来说，Start()方法做了以下几件事情：</p><ul><li><p>侦听UDP端口：用于结点发现</p></li><li><p>发起UDP请求获取结点表：内部会启动goroutine来完成</p></li><li><p>侦听TCP端口：用于业务数据传输，基于RLPx协议</p></li><li><p>发起TCP请求连接到其他结点：也是启动goroutine完成</p></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// p2p/server.go</span><span class="token comment">// Servers can not be re-used after stopping.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>srv<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> srv<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> srv<span class="token punctuation">.</span>running <span class="token punctuation">{</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"server already running"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>srv<span class="token punctuation">.</span>running <span class="token operator">=</span> <span class="token boolean">true</span>srv<span class="token punctuation">.</span>log <span class="token operator">=</span> srv<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>Logger<span class="token keyword">if</span> srv<span class="token punctuation">.</span>log <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>srv<span class="token punctuation">.</span>log <span class="token operator">=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>srv<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Starting P2P networking"</span><span class="token punctuation">)</span><span class="token comment">// static fields</span><span class="token keyword">if</span> srv<span class="token punctuation">.</span>PrivateKey <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Server.PrivateKey must be set to a non-nil key"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> srv<span class="token punctuation">.</span>newTransport <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>srv<span class="token punctuation">.</span>newTransport <span class="token operator">=</span> newRLPX<span class="token punctuation">}</span><span class="token keyword">if</span> srv<span class="token punctuation">.</span>Dialer <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>srv<span class="token punctuation">.</span>Dialer <span class="token operator">=</span> TCPDialer<span class="token punctuation">{</span><span class="token operator">&amp;</span>net<span class="token punctuation">.</span>Dialer<span class="token punctuation">{</span>Timeout<span class="token punctuation">:</span> defaultDialTimeout<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>srv<span class="token punctuation">.</span>quit <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>srv<span class="token punctuation">.</span>addpeer <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>conn<span class="token punctuation">)</span>srv<span class="token punctuation">.</span>delpeer <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> peerDrop<span class="token punctuation">)</span>srv<span class="token punctuation">.</span>posthandshake <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>conn<span class="token punctuation">)</span>srv<span class="token punctuation">.</span>addstatic <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>discover<span class="token punctuation">.</span>Node<span class="token punctuation">)</span>srv<span class="token punctuation">.</span>removestatic <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>discover<span class="token punctuation">.</span>Node<span class="token punctuation">)</span>srv<span class="token punctuation">.</span>peerOp <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> peerOpFunc<span class="token punctuation">)</span>srv<span class="token punctuation">.</span>peerOpDone <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>conn      <span class="token operator">*</span>net<span class="token punctuation">.</span>UDPConnsconn     <span class="token operator">*</span>sharedUDPConnrealaddr  <span class="token operator">*</span>net<span class="token punctuation">.</span>UDPAddrunhandled <span class="token keyword">chan</span> discover<span class="token punctuation">.</span>ReadPacket<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>srv<span class="token punctuation">.</span>NoDiscovery <span class="token operator">||</span> srv<span class="token punctuation">.</span>DiscoveryV5 <span class="token punctuation">{</span>addr<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ResolveUDPAddr</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> srv<span class="token punctuation">.</span>ListenAddr<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span>conn<span class="token punctuation">,</span> err <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span>realaddr <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">LocalAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">)</span><span class="token keyword">if</span> srv<span class="token punctuation">.</span>NAT <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token operator">!</span>realaddr<span class="token punctuation">.</span>IP<span class="token punctuation">.</span><span class="token function">IsLoopback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">go</span> nat<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>NAT<span class="token punctuation">,</span> srv<span class="token punctuation">.</span>quit<span class="token punctuation">,</span> <span class="token string">"udp"</span><span class="token punctuation">,</span> realaddr<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> realaddr<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> <span class="token string">"ethereum discovery"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// TODO: react to external IP changes over time.</span><span class="token keyword">if</span> ext<span class="token punctuation">,</span> err <span class="token operator">:=</span> srv<span class="token punctuation">.</span>NAT<span class="token punctuation">.</span><span class="token function">ExternalIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>realaddr <span class="token operator">=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> ext<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> realaddr<span class="token punctuation">.</span>Port<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token operator">!</span>srv<span class="token punctuation">.</span>NoDiscovery <span class="token operator">&amp;&amp;</span> srv<span class="token punctuation">.</span>DiscoveryV5 <span class="token punctuation">{</span>unhandled <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> discover<span class="token punctuation">.</span>ReadPacket<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>sconn <span class="token operator">=</span> <span class="token operator">&amp;</span>sharedUDPConn<span class="token punctuation">{</span>conn<span class="token punctuation">,</span> unhandled<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// node table</span><span class="token keyword">if</span> <span class="token operator">!</span>srv<span class="token punctuation">.</span>NoDiscovery <span class="token punctuation">{</span>cfg <span class="token operator">:=</span> discover<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>PrivateKey<span class="token punctuation">:</span>   srv<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">,</span>AnnounceAddr<span class="token punctuation">:</span> realaddr<span class="token punctuation">,</span>NodeDBPath<span class="token punctuation">:</span>   srv<span class="token punctuation">.</span>NodeDatabase<span class="token punctuation">,</span>NetRestrict<span class="token punctuation">:</span>  srv<span class="token punctuation">.</span>NetRestrict<span class="token punctuation">,</span>Bootnodes<span class="token punctuation">:</span>    srv<span class="token punctuation">.</span>BootstrapNodes<span class="token punctuation">,</span>Unhandled<span class="token punctuation">:</span>    unhandled<span class="token punctuation">,</span><span class="token punctuation">}</span>ntab<span class="token punctuation">,</span> err <span class="token operator">:=</span> discover<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span>srv<span class="token punctuation">.</span>ntab <span class="token operator">=</span> ntab<span class="token punctuation">}</span><span class="token keyword">if</span> srv<span class="token punctuation">.</span>DiscoveryV5 <span class="token punctuation">{</span><span class="token keyword">var</span> <span class="token punctuation">(</span>ntab <span class="token operator">*</span>discv5<span class="token punctuation">.</span>Networkerr  <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">if</span> sconn <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>ntab<span class="token punctuation">,</span> err <span class="token operator">=</span> discv5<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">,</span> sconn<span class="token punctuation">,</span> realaddr<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> srv<span class="token punctuation">.</span>NetRestrict<span class="token punctuation">)</span> <span class="token comment">//srv.NodeDatabase)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>ntab<span class="token punctuation">,</span> err <span class="token operator">=</span> discv5<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">,</span> conn<span class="token punctuation">,</span> realaddr<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> srv<span class="token punctuation">.</span>NetRestrict<span class="token punctuation">)</span> <span class="token comment">//srv.NodeDatabase)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> ntab<span class="token punctuation">.</span><span class="token function">SetFallbackNodes</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>BootstrapNodesV5<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span>srv<span class="token punctuation">.</span>DiscV5 <span class="token operator">=</span> ntab<span class="token punctuation">}</span>dynPeers <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">maxDialedConns</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dialer <span class="token operator">:=</span> <span class="token function">newDialState</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>StaticNodes<span class="token punctuation">,</span> srv<span class="token punctuation">.</span>BootstrapNodes<span class="token punctuation">,</span> srv<span class="token punctuation">.</span>ntab<span class="token punctuation">,</span> dynPeers<span class="token punctuation">,</span> srv<span class="token punctuation">.</span>NetRestrict<span class="token punctuation">)</span><span class="token comment">// handshake</span>srv<span class="token punctuation">.</span>ourHandshake <span class="token operator">=</span> <span class="token operator">&amp;</span>protoHandshake<span class="token punctuation">{</span>Version<span class="token punctuation">:</span> baseProtocolVersion<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> srv<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> ID<span class="token punctuation">:</span> discover<span class="token punctuation">.</span><span class="token function">PubkeyID</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>srv<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> srv<span class="token punctuation">.</span>Protocols <span class="token punctuation">{</span>srv<span class="token punctuation">.</span>ourHandshake<span class="token punctuation">.</span>Caps <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>ourHandshake<span class="token punctuation">.</span>Caps<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// listen/dial</span><span class="token keyword">if</span> srv<span class="token punctuation">.</span>ListenAddr <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">startListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> srv<span class="token punctuation">.</span>NoDial <span class="token operator">&amp;&amp;</span> srv<span class="token punctuation">.</span>ListenAddr <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>srv<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">"P2P server will be useless, neither dialing nor listening"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>srv<span class="token punctuation">.</span>loopWG<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> srv<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>dialer<span class="token punctuation">)</span>srv<span class="token punctuation">.</span>running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h2 id="启动Service"><a href="#启动Service" class="headerlink" title="启动Service"></a>启动Service</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// Start each of the services</span>started <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> kind<span class="token punctuation">,</span> service <span class="token operator">:=</span> <span class="token keyword">range</span> services <span class="token punctuation">{</span>    <span class="token comment">// Start the next service, stopping all previous upon failure</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>running<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> kind <span class="token operator">:=</span> <span class="token keyword">range</span> started <span class="token punctuation">{</span>            services<span class="token punctuation">[</span>kind<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        running<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token comment">// Mark the service started for potential cleanup</span>    started <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>started<span class="token punctuation">,</span> kind<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>主要就是依次调用每个Service的Start()方法，然后把启动的Service的类型存储到started表中。之前提到 Ethereum 作为一个service，被Node注册进去。Node start的时候会启动其注册的所有服务，Ethereum service也是一样。</p><h2 id="ethereum-service"><a href="#ethereum-service" class="headerlink" title="ethereum service"></a>ethereum service</h2><h3 id="ethereum-service的初始化"><a href="#ethereum-service的初始化" class="headerlink" title="ethereum service的初始化"></a>ethereum service的初始化</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// eth/backend.go</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>node<span class="token punctuation">.</span>ServiceContext<span class="token punctuation">,</span> config <span class="token operator">*</span>Config<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Ethereum<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> config<span class="token punctuation">.</span>SyncMode <span class="token operator">==</span> downloader<span class="token punctuation">.</span>LightSync <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"can't run eth.Ethereum in light sync mode, use les.LightEthereum"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token operator">!</span>config<span class="token punctuation">.</span>SyncMode<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"invalid sync mode %d"</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>SyncMode<span class="token punctuation">)</span><span class="token punctuation">}</span>chainDb<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">CreateDB</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token string">"chaindata"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>chainConfig<span class="token punctuation">,</span> genesisHash<span class="token punctuation">,</span> genesisErr <span class="token operator">:=</span> core<span class="token punctuation">.</span><span class="token function">SetupGenesisBlock</span><span class="token punctuation">(</span>chainDb<span class="token punctuation">,</span> config<span class="token punctuation">.</span>Genesis<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> genesisErr<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>params<span class="token punctuation">.</span>ConfigCompatError<span class="token punctuation">)</span><span class="token punctuation">;</span> genesisErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> genesisErr<span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Initialised chain configuration"</span><span class="token punctuation">,</span> <span class="token string">"config"</span><span class="token punctuation">,</span> chainConfig<span class="token punctuation">)</span>eth <span class="token operator">:=</span> <span class="token operator">&amp;</span>Ethereum<span class="token punctuation">{</span>config<span class="token punctuation">:</span>         config<span class="token punctuation">,</span>chainDb<span class="token punctuation">:</span>        chainDb<span class="token punctuation">,</span>chainConfig<span class="token punctuation">:</span>    chainConfig<span class="token punctuation">,</span>eventMux<span class="token punctuation">:</span>       ctx<span class="token punctuation">.</span>EventMux<span class="token punctuation">,</span>accountManager<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>AccountManager<span class="token punctuation">,</span>engine<span class="token punctuation">:</span>         <span class="token function">CreateConsensusEngine</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>config<span class="token punctuation">.</span>Ethash<span class="token punctuation">,</span> chainConfig<span class="token punctuation">,</span> chainDb<span class="token punctuation">)</span><span class="token punctuation">,</span>shutdownChan<span class="token punctuation">:</span>   <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">,</span>networkId<span class="token punctuation">:</span>      config<span class="token punctuation">.</span>NetworkId<span class="token punctuation">,</span>gasPrice<span class="token punctuation">:</span>       config<span class="token punctuation">.</span>GasPrice<span class="token punctuation">,</span>etherbase<span class="token punctuation">:</span>      config<span class="token punctuation">.</span>Etherbase<span class="token punctuation">,</span>bloomRequests<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">chan</span> <span class="token operator">*</span>bloombits<span class="token punctuation">.</span>Retrieval<span class="token punctuation">)</span><span class="token punctuation">,</span>bloomIndexer<span class="token punctuation">:</span>   <span class="token function">NewBloomIndexer</span><span class="token punctuation">(</span>chainDb<span class="token punctuation">,</span> params<span class="token punctuation">.</span>BloomBitsBlocks<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Initialising Ethereum protocol"</span><span class="token punctuation">,</span> <span class="token string">"versions"</span><span class="token punctuation">,</span> ProtocolVersions<span class="token punctuation">,</span> <span class="token string">"network"</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>NetworkId<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>config<span class="token punctuation">.</span>SkipBcVersionCheck <span class="token punctuation">{</span>bcVersion <span class="token operator">:=</span> rawdb<span class="token punctuation">.</span><span class="token function">ReadDatabaseVersion</span><span class="token punctuation">(</span>chainDb<span class="token punctuation">)</span><span class="token keyword">if</span> bcVersion <span class="token operator">!=</span> core<span class="token punctuation">.</span>BlockChainVersion <span class="token operator">&amp;&amp;</span> bcVersion <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Blockchain DB version mismatch (%d / %d). Run geth upgradedb.\n"</span><span class="token punctuation">,</span> bcVersion<span class="token punctuation">,</span> core<span class="token punctuation">.</span>BlockChainVersion<span class="token punctuation">)</span><span class="token punctuation">}</span>rawdb<span class="token punctuation">.</span><span class="token function">WriteDatabaseVersion</span><span class="token punctuation">(</span>chainDb<span class="token punctuation">,</span> core<span class="token punctuation">.</span>BlockChainVersion<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token punctuation">(</span>vmConfig    <span class="token operator">=</span> vm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>EnablePreimageRecording<span class="token punctuation">:</span> config<span class="token punctuation">.</span>EnablePreimageRecording<span class="token punctuation">}</span>cacheConfig <span class="token operator">=</span> <span class="token operator">&amp;</span>core<span class="token punctuation">.</span>CacheConfig<span class="token punctuation">{</span>Disabled<span class="token punctuation">:</span> config<span class="token punctuation">.</span>NoPruning<span class="token punctuation">,</span> TrieNodeLimit<span class="token punctuation">:</span> config<span class="token punctuation">.</span>TrieCache<span class="token punctuation">,</span> TrieTimeLimit<span class="token punctuation">:</span> config<span class="token punctuation">.</span>TrieTimeout<span class="token punctuation">}</span><span class="token punctuation">)</span>eth<span class="token punctuation">.</span>blockchain<span class="token punctuation">,</span> err <span class="token operator">=</span> core<span class="token punctuation">.</span><span class="token function">NewBlockChain</span><span class="token punctuation">(</span>chainDb<span class="token punctuation">,</span> cacheConfig<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>chainConfig<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>engine<span class="token punctuation">,</span> vmConfig<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// Rewind the chain in case of an incompatible config upgrade.</span><span class="token keyword">if</span> compat<span class="token punctuation">,</span> ok <span class="token operator">:=</span> genesisErr<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>params<span class="token punctuation">.</span>ConfigCompatError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">"Rewinding chain to upgrade configuration"</span><span class="token punctuation">,</span> <span class="token string">"err"</span><span class="token punctuation">,</span> compat<span class="token punctuation">)</span>eth<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">SetHead</span><span class="token punctuation">(</span>compat<span class="token punctuation">.</span>RewindTo<span class="token punctuation">)</span>rawdb<span class="token punctuation">.</span><span class="token function">WriteChainConfig</span><span class="token punctuation">(</span>chainDb<span class="token punctuation">,</span> genesisHash<span class="token punctuation">,</span> chainConfig<span class="token punctuation">)</span><span class="token punctuation">}</span>eth<span class="token punctuation">.</span>bloomIndexer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>eth<span class="token punctuation">.</span>blockchain<span class="token punctuation">)</span><span class="token keyword">if</span> config<span class="token punctuation">.</span>TxPool<span class="token punctuation">.</span>Journal <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>config<span class="token punctuation">.</span>TxPool<span class="token punctuation">.</span>Journal <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">ResolvePath</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>TxPool<span class="token punctuation">.</span>Journal<span class="token punctuation">)</span><span class="token punctuation">}</span>eth<span class="token punctuation">.</span>txPool <span class="token operator">=</span> core<span class="token punctuation">.</span><span class="token function">NewTxPool</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>TxPool<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>chainConfig<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>blockchain<span class="token punctuation">)</span><span class="token keyword">if</span> eth<span class="token punctuation">.</span>protocolManager<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">NewProtocolManager</span><span class="token punctuation">(</span>eth<span class="token punctuation">.</span>chainConfig<span class="token punctuation">,</span> config<span class="token punctuation">.</span>SyncMode<span class="token punctuation">,</span> config<span class="token punctuation">.</span>NetworkId<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>eventMux<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>txPool<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>engine<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>blockchain<span class="token punctuation">,</span> chainDb<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>eth<span class="token punctuation">.</span>miner <span class="token operator">=</span> miner<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>eth<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>chainConfig<span class="token punctuation">,</span> eth<span class="token punctuation">.</span><span class="token function">EventMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eth<span class="token punctuation">.</span>engine<span class="token punctuation">)</span>eth<span class="token punctuation">.</span>miner<span class="token punctuation">.</span><span class="token function">SetExtra</span><span class="token punctuation">(</span><span class="token function">makeExtraData</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ExtraData<span class="token punctuation">)</span><span class="token punctuation">)</span>eth<span class="token punctuation">.</span>APIBackend <span class="token operator">=</span> <span class="token operator">&amp;</span>EthAPIBackend<span class="token punctuation">{</span>eth<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>gpoParams <span class="token operator">:=</span> config<span class="token punctuation">.</span>GPO<span class="token keyword">if</span> gpoParams<span class="token punctuation">.</span>Default <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>gpoParams<span class="token punctuation">.</span>Default <span class="token operator">=</span> config<span class="token punctuation">.</span>GasPrice<span class="token punctuation">}</span>eth<span class="token punctuation">.</span>APIBackend<span class="token punctuation">.</span>gpo <span class="token operator">=</span> gasprice<span class="token punctuation">.</span><span class="token function">NewOracle</span><span class="token punctuation">(</span>eth<span class="token punctuation">.</span>APIBackend<span class="token punctuation">,</span> gpoParams<span class="token punctuation">)</span><span class="token keyword">return</span> eth<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><ul><li>如果config.SyncMode 是 downloader.LightSync，走的是les/backend.go的初始化方法。</li><li>chainDb, err := CreateDB(ctx, config, “chaindata”)打开leveldb，leveldb是eth存储数据库。</li><li>stopDbUpgrade := upgradeDeduplicateData(chainDb) 检查chainDb版本，如果需要的话，启动后台进程进行升级。</li><li>chainConfig, genesisHash, genesisErr := core.SetupGenesisBlock(chainDb, config.Genesis)装载创世区块。 根据节点条件判断是从数据库里面读取，还是从默认配置文件读取，还是从自定义配置文件读取，或者是从代码里面获取默认值。并返回区块链的config和创世块的hash。</li><li>装载Etherum struct的各个成员。eventMux和accountManager 是Node 启动 eth service的时候传入的。eventMux可以认为是一个全局的事件多路复用器，accountManager认为是一个全局的账户管理器。engine创建共识引擎。etherbase 配置此Etherum的主账号地址。初始化bloomRequests 通道和bloom过滤器。</li><li>判断客户端版本号和数据库版本号是否一致</li><li>eth.blockchain, err = core.NewBlockChain(chainDb, cacheConfig, eth.chainConfig, eth.engine, vmConfig) 初始化eth的blockchain，也就是eth的区块链</li><li>eth.blockchain.SetHead(compat.RewindTo) 根据创始区块设置区块头</li><li>eth.bloomIndexer.Start(eth.blockchain)启动bloomIndexer</li><li>eth.txPool = core.NewTxPool(config.TxPool, eth.chainConfig, eth.blockchain) 初始化eth 区块链的交易池，存储本地生产的和P2P网络同步过来的交易。</li><li>eth.protocolManager, err = NewProtocolManager(eth.chainConfig, config.SyncMode, config.NetworkId, eth.eventMux, eth.txPool, eth.engine, eth.blockchain, chainDb)初始化以太坊协议管理器，用于区块链P2P通讯</li><li>miner.New(eth, eth.chainConfig, eth.EventMux(), eth.engine) 初始化矿工</li><li>eth.ApiBackend.gpo = gasprice.NewOracle(eth.ApiBackend, gpoParams) 创建预言最新gasprice的预言机</li></ul><h3 id="ethereum-service-启动"><a href="#ethereum-service-启动" class="headerlink" title="ethereum service 启动"></a>ethereum service 启动</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Ethereum<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span>srvr <span class="token operator">*</span>p2p<span class="token punctuation">.</span>Server<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token comment">// Start the bloom bits servicing goroutines</span>s<span class="token punctuation">.</span><span class="token function">startBloomHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Start the RPC service</span>s<span class="token punctuation">.</span>netRPCService <span class="token operator">=</span> ethapi<span class="token punctuation">.</span><span class="token function">NewPublicNetAPI</span><span class="token punctuation">(</span>srvr<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">NetVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Figure out a max peers count based on the server limits</span>maxPeers <span class="token operator">:=</span> srvr<span class="token punctuation">.</span>MaxPeers<span class="token keyword">if</span> s<span class="token punctuation">.</span>config<span class="token punctuation">.</span>LightServ <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>config<span class="token punctuation">.</span>LightPeers <span class="token operator">&gt;=</span> srvr<span class="token punctuation">.</span>MaxPeers <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"invalid peer config: light peer count (%d) &gt;= total peer count (%d)"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>config<span class="token punctuation">.</span>LightPeers<span class="token punctuation">,</span> srvr<span class="token punctuation">.</span>MaxPeers<span class="token punctuation">)</span><span class="token punctuation">}</span>maxPeers <span class="token operator">-=</span> s<span class="token punctuation">.</span>config<span class="token punctuation">.</span>LightPeers<span class="token punctuation">}</span><span class="token comment">// Start the networking layer and the light server if requested</span>s<span class="token punctuation">.</span>protocolManager<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>maxPeers<span class="token punctuation">)</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>lesServer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>lesServer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>srvr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>首先启动bloom过滤器 eth 的net 相关Api 加入RPC 服务。<br>s.protocolManager.Start(maxPeers) 设置最大同步节点数，并启动eth P2P通讯。<br>如果ethereum service 出问题了才会启动lesServer。</p><h3 id="ProtocolManager-以太坊P2P通讯协议管理"><a href="#ProtocolManager-以太坊P2P通讯协议管理" class="headerlink" title="ProtocolManager 以太坊P2P通讯协议管理"></a>ProtocolManager 以太坊P2P通讯协议管理</h3><p>ethereum service的初始化 也会调用 <code>NewProtocolManager</code>。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>node<span class="token punctuation">.</span>ServiceContext<span class="token punctuation">,</span> config <span class="token operator">*</span>Config<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Ethereum<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">if</span> eth<span class="token punctuation">.</span>protocolManager<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">NewProtocolManager</span><span class="token punctuation">(</span>eth<span class="token punctuation">.</span>chainConfig<span class="token punctuation">,</span> config<span class="token punctuation">.</span>SyncMode<span class="token punctuation">,</span> config<span class="token punctuation">.</span>NetworkId<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>eventMux<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>txPool<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>engine<span class="token punctuation">,</span> eth<span class="token punctuation">.</span>blockchain<span class="token punctuation">,</span> chainDb<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>        <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong>ProtocolManager 的初始化方法</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewProtocolManager</span><span class="token punctuation">(</span>config <span class="token operator">*</span>params<span class="token punctuation">.</span>ChainConfig<span class="token punctuation">,</span> mode downloader<span class="token punctuation">.</span>SyncMode<span class="token punctuation">,</span> networkId <span class="token builtin">uint64</span><span class="token punctuation">,</span> mux <span class="token operator">*</span>event<span class="token punctuation">.</span>TypeMux<span class="token punctuation">,</span> txpool txPool<span class="token punctuation">,</span> engine consensus<span class="token punctuation">.</span>Engine<span class="token punctuation">,</span> blockchain <span class="token operator">*</span>core<span class="token punctuation">.</span>BlockChain<span class="token punctuation">,</span> chaindb ethdb<span class="token punctuation">.</span>Database<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ProtocolManager<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Create the protocol manager with the base fields</span>manager <span class="token operator">:=</span> <span class="token operator">&amp;</span>ProtocolManager<span class="token punctuation">{</span>networkId<span class="token punctuation">:</span>   networkId<span class="token punctuation">,</span>eventMux<span class="token punctuation">:</span>    mux<span class="token punctuation">,</span>txpool<span class="token punctuation">:</span>      txpool<span class="token punctuation">,</span>blockchain<span class="token punctuation">:</span>  blockchain<span class="token punctuation">,</span>chainconfig<span class="token punctuation">:</span> config<span class="token punctuation">,</span>peers<span class="token punctuation">:</span>       <span class="token function">newPeerSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>newPeerCh<span class="token punctuation">:</span>   <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>peer<span class="token punctuation">)</span><span class="token punctuation">,</span>noMorePeers<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>txsyncCh<span class="token punctuation">:</span>    <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>txsync<span class="token punctuation">)</span><span class="token punctuation">,</span>quitSync<span class="token punctuation">:</span>    <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// Figure out whether to allow fast sync or not</span><span class="token keyword">if</span> mode <span class="token operator">==</span> downloader<span class="token punctuation">.</span>FastSync <span class="token operator">&amp;&amp;</span> blockchain<span class="token punctuation">.</span><span class="token function">CurrentBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">"Blockchain not empty, fast sync disabled"</span><span class="token punctuation">)</span>mode <span class="token operator">=</span> downloader<span class="token punctuation">.</span>FullSync<span class="token punctuation">}</span><span class="token keyword">if</span> mode <span class="token operator">==</span> downloader<span class="token punctuation">.</span>FastSync <span class="token punctuation">{</span>manager<span class="token punctuation">.</span>fastSync <span class="token operator">=</span> <span class="token function">uint32</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Initiate a sub-protocol for every implemented version we can handle</span>manager<span class="token punctuation">.</span>SubProtocols <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>p2p<span class="token punctuation">.</span>Protocol<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ProtocolVersions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> version <span class="token operator">:=</span> <span class="token keyword">range</span> ProtocolVersions <span class="token punctuation">{</span><span class="token comment">// Skip protocol version if incompatible with the mode of operation</span><span class="token keyword">if</span> mode <span class="token operator">==</span> downloader<span class="token punctuation">.</span>FastSync <span class="token operator">&amp;&amp;</span> version <span class="token operator">&lt;</span> eth63 <span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token comment">// Compatible; initialise the sub-protocol</span>version <span class="token operator">:=</span> version <span class="token comment">// Closure for the run</span>manager<span class="token punctuation">.</span>SubProtocols <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>manager<span class="token punctuation">.</span>SubProtocols<span class="token punctuation">,</span> p2p<span class="token punctuation">.</span>Protocol<span class="token punctuation">{</span>Name<span class="token punctuation">:</span>    ProtocolName<span class="token punctuation">,</span>Version<span class="token punctuation">:</span> version<span class="token punctuation">,</span>Length<span class="token punctuation">:</span>  ProtocolLengths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>Run<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>p <span class="token operator">*</span>p2p<span class="token punctuation">.</span>Peer<span class="token punctuation">,</span> rw p2p<span class="token punctuation">.</span>MsgReadWriter<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>peer <span class="token operator">:=</span> manager<span class="token punctuation">.</span><span class="token function">newPeer</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> rw<span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> manager<span class="token punctuation">.</span>newPeerCh <span class="token operator">&lt;-</span> peer<span class="token punctuation">:</span>manager<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">defer</span> manager<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> manager<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>peer<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>manager<span class="token punctuation">.</span>quitSync<span class="token punctuation">:</span><span class="token keyword">return</span> p2p<span class="token punctuation">.</span>DiscQuitting<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>NodeInfo<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">return</span> manager<span class="token punctuation">.</span><span class="token function">NodeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>PeerInfo<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>id discover<span class="token punctuation">.</span>NodeID<span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">if</span> p <span class="token operator">:=</span> manager<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">Peer</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>manager<span class="token punctuation">.</span>SubProtocols<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errIncompatibleConfig<span class="token punctuation">}</span><span class="token comment">// Construct the different synchronisation mechanisms</span>manager<span class="token punctuation">.</span>downloader <span class="token operator">=</span> downloader<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> chaindb<span class="token punctuation">,</span> manager<span class="token punctuation">.</span>eventMux<span class="token punctuation">,</span> blockchain<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> manager<span class="token punctuation">.</span>removePeer<span class="token punctuation">)</span>validator <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>header <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token keyword">return</span> engine<span class="token punctuation">.</span><span class="token function">VerifyHeader</span><span class="token punctuation">(</span>blockchain<span class="token punctuation">,</span> header<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span>heighter <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">{</span><span class="token keyword">return</span> blockchain<span class="token punctuation">.</span><span class="token function">CurrentBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>inserter <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>blocks types<span class="token punctuation">.</span>Blocks<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// If fast sync is running, deny importing weird blocks</span><span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>manager<span class="token punctuation">.</span>fastSync<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">"Discarded bad propagated block"</span><span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">,</span> blocks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> blocks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>atomic<span class="token punctuation">.</span><span class="token function">StoreUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>manager<span class="token punctuation">.</span>acceptTxs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Mark initial sync done on any fetcher import</span><span class="token keyword">return</span> manager<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">InsertChain</span><span class="token punctuation">(</span>blocks<span class="token punctuation">)</span><span class="token punctuation">}</span>manager<span class="token punctuation">.</span>fetcher <span class="token operator">=</span> fetcher<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>blockchain<span class="token punctuation">.</span>GetBlockByHash<span class="token punctuation">,</span> validator<span class="token punctuation">,</span> manager<span class="token punctuation">.</span>BroadcastBlock<span class="token punctuation">,</span> heighter<span class="token punctuation">,</span> inserter<span class="token punctuation">,</span> manager<span class="token punctuation">.</span>removePeer<span class="token punctuation">)</span><span class="token keyword">return</span> manager<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><ul><li>peers 为以太坊临近的同步网络节点，newPeerCh、noMorePeers、txsyncCh、quitSync对应同步的通知</li><li>manager.SubProtocols 创建以太坊 P2P server 的 通讯协议，通常只有一个值。manager.SubProtocols，在Node start的时候传给以太坊 P2P server并同时start P2P server。协议里面三个函数指针（Run、NodeInfo、PeerInfo）非常重要，后面会用到。</li><li>manager.downloader = downloader.New(mode, chaindb, manager.eventMux, blockchain, nil, manager.removePeer)<br>创建了一个下载器，从远程网络节点中获取hashes和blocks。</li><li>manager.fetcher = fetcher.New(blockchain.GetBlockByHash, validator, manager.BroadcastBlock, heighter, inserter, manager.removePeer)收集网络其他以太坊节点发过来的同步通知，进行验证，并做出相应的处理。初始化传入的几个参数 都是用于处理同步区块链数据的函数指针</li></ul><p>Ethereum service 启动的时候会同时启动 ProtocolManager。</p><p><strong>ProtocolManager的start()方法：</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span>maxPeers <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pm<span class="token punctuation">.</span>maxPeers <span class="token operator">=</span> maxPeers<span class="token comment">// broadcast transactions</span>pm<span class="token punctuation">.</span>txsCh <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> core<span class="token punctuation">.</span>NewTxsEvent<span class="token punctuation">,</span> txChanSize<span class="token punctuation">)</span>pm<span class="token punctuation">.</span>txsSub <span class="token operator">=</span> pm<span class="token punctuation">.</span>txpool<span class="token punctuation">.</span><span class="token function">SubscribeNewTxsEvent</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>txsCh<span class="token punctuation">)</span><span class="token keyword">go</span> pm<span class="token punctuation">.</span><span class="token function">txBroadcastLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// broadcast mined blocks</span>pm<span class="token punctuation">.</span>minedBlockSub <span class="token operator">=</span> pm<span class="token punctuation">.</span>eventMux<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span>core<span class="token punctuation">.</span>NewMinedBlockEvent<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">go</span> pm<span class="token punctuation">.</span><span class="token function">minedBroadcastLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// start sync handlers</span><span class="token keyword">go</span> pm<span class="token punctuation">.</span><span class="token function">syncer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">go</span> pm<span class="token punctuation">.</span><span class="token function">txsyncLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>创建一个新交易的订阅通道，并启动交易广播的goroutine</li><li>创建一个挖坑的订阅通道，并启动</li><li>pm.syncer() 启动同步goroutine，定时的和网络其他节点同步，并处理网络节点的相关通知</li><li>pm.txsyncLoop() 启动交易同步goroutine，把新的交易均匀的同步给网路节点</li></ul><p><strong>ProtocolManager主动向网络节点广播</strong></p><p>ProtocolManager Start()方法里面的4个goroutine都是处理ProtocolManager向以太坊网络节点进行广播的。</p><ul><li>pm.txBroadcastLoop()方法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">txBroadcastLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> event <span class="token operator">:=</span> <span class="token operator">&lt;-</span>pm<span class="token punctuation">.</span>txsCh<span class="token punctuation">:</span>pm<span class="token punctuation">.</span><span class="token function">BroadcastTxs</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>Txs<span class="token punctuation">)</span><span class="token comment">// Err() channel will be closed when unsubscribing.</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>pm<span class="token punctuation">.</span>txsSub<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>core/tx_pool.go 产生新的交易的时候会send self.txCh，这时候会激活 self.BroadcastTx(event.Tx.Hash(), event.Tx)</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">BroadcastTx</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> tx <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Broadcast transaction to a batch of peers not knowing about it</span>    peers <span class="token operator">:=</span> pm<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">PeersWithoutTx</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>    <span class="token comment">//FIXME include this again: peers = peers[:int(math.Sqrt(float64(len(peers))))]</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> peer <span class="token operator">:=</span> <span class="token keyword">range</span> peers <span class="token punctuation">{</span>        peer<span class="token punctuation">.</span><span class="token function">SendTransactions</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Transactions<span class="token punctuation">{</span>tx<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Broadcast transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">"recipients"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>peers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>向缓存的没有这个交易hash的网络节点广播此次交易。</p><ul><li>pm.minedBroadcastLoop()方法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// Mined broadcast loop</span><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">minedBroadcastLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// automatically stops if unsubscribe</span>    <span class="token keyword">for</span> obj <span class="token operator">:=</span> <span class="token keyword">range</span> self<span class="token punctuation">.</span>minedBlockSub<span class="token punctuation">.</span><span class="token function">Chan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> ev <span class="token operator">:=</span> obj<span class="token punctuation">.</span>Data<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> core<span class="token punctuation">.</span>NewMinedBlockEvent<span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token function">BroadcastBlock</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// First propagate block to peers</span>            self<span class="token punctuation">.</span><span class="token function">BroadcastBlock</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// Only then announce to the rest</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>收到 <code>miner.go</code> 里面 <code>NewMinedBlockEvent</code> 挖到新区块的事件通知，激活self.BroadcastBlock(ev.Block, true)</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">BroadcastBlock</span><span class="token punctuation">(</span>block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> propagate <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    hash <span class="token operator">:=</span> block<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    peers <span class="token operator">:=</span> pm<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">PeersWithoutBlock</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>    <span class="token comment">// If propagation is requested, send to a subset of the peer</span>    <span class="token keyword">if</span> propagate <span class="token punctuation">{</span>        <span class="token comment">// Calculate the TD of the block (it's not imported yet, so block.Td is not valid)</span>        <span class="token keyword">var</span> td <span class="token operator">*</span>big<span class="token punctuation">.</span>Int        <span class="token keyword">if</span> parent <span class="token operator">:=</span> pm<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">GetBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">ParentHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> parent <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            td <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">Difficulty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pm<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">GetTd</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">ParentHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Propagating dangling block"</span><span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment">// Send the block to a subset of our peers</span>        transfer <span class="token operator">:=</span> peers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>peers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> peer <span class="token operator">:=</span> <span class="token keyword">range</span> transfer <span class="token punctuation">{</span>            peer<span class="token punctuation">.</span><span class="token function">SendNewBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> td<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Propagated block"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">"recipients"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>transfer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"duration"</span><span class="token punctuation">,</span> common<span class="token punctuation">.</span><span class="token function">PrettyDuration</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>ReceivedAt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment">// Otherwise if the block is indeed in out own chain, announce it</span>    <span class="token keyword">if</span> pm<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">HasBlock</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> peer <span class="token operator">:=</span> <span class="token keyword">range</span> peers <span class="token punctuation">{</span>            peer<span class="token punctuation">.</span><span class="token function">SendNewBlockHashes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span>hash<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">{</span>block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Announced block"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">"recipients"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>peers<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"duration"</span><span class="token punctuation">,</span> common<span class="token punctuation">.</span><span class="token function">PrettyDuration</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>ReceivedAt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果propagate为true 向网络节点广播整个挖到的block，为false 只广播挖到的区块的hash值和number值。广播的区块还包括这个区块打包的所有交易。</p><ul><li>pm.syncer() 方法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">syncer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Start and ensure cleanup of sync mechanisms</span>    pm<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> pm<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> pm<span class="token punctuation">.</span>downloader<span class="token punctuation">.</span><span class="token function">Terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// Wait for different events to fire synchronisation operations</span>    forceSync <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>forceSyncCycle<span class="token punctuation">)</span>    <span class="token keyword">defer</span> forceSync<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>pm<span class="token punctuation">.</span>newPeerCh<span class="token punctuation">:</span>            <span class="token comment">// Make sure we have peers to select from, then sync</span>            <span class="token keyword">if</span> pm<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> minDesiredPeerCount <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>            <span class="token keyword">go</span> pm<span class="token punctuation">.</span><span class="token function">synchronise</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">BestPeer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>forceSync<span class="token punctuation">.</span>C<span class="token punctuation">:</span>            <span class="token comment">// Force a sync even if not enough peers are present</span>            <span class="token keyword">go</span> pm<span class="token punctuation">.</span><span class="token function">synchronise</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">BestPeer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>pm<span class="token punctuation">.</span>noMorePeers<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>pm.fetcher.Start()启动 fetcher，辅助同步区块数据</p><p>当P2P server执行 ProtocolManager 的p2p.Protocol 的Run指针的时候会send pm.newPeerCh，这时候选择最优的网络节点（TD 总难度最大的）启动pm.synchronise(pm.peers.BestPeer()) goroutine。</p><ul><li>pm.txsyncLoop()方法</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">txsyncLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        pending <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>discover<span class="token punctuation">.</span>NodeID<span class="token punctuation">]</span><span class="token operator">*</span>txsync<span class="token punctuation">)</span>        sending <span class="token operator">=</span> <span class="token boolean">false</span>               <span class="token comment">// whether a send is active</span>        pack    <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>txsync<span class="token punctuation">)</span>         <span class="token comment">// the pack that is being sent</span>        done    <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// result of the send</span>    <span class="token punctuation">)</span>    <span class="token comment">// send starts a sending a pack of transactions from the sync.</span>    send <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>txsync<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Fill pack with transactions up to the target size.</span>        size <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">StorageSize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        pack<span class="token punctuation">.</span>p <span class="token operator">=</span> s<span class="token punctuation">.</span>p        pack<span class="token punctuation">.</span>txs <span class="token operator">=</span> pack<span class="token punctuation">.</span>txs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>txs<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">&lt;</span> txsyncPackSize<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            pack<span class="token punctuation">.</span>txs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>pack<span class="token punctuation">.</span>txs<span class="token punctuation">,</span> s<span class="token punctuation">.</span>txs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            size <span class="token operator">+=</span> s<span class="token punctuation">.</span>txs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment">// Remove the transactions that will be sent.</span>        s<span class="token punctuation">.</span>txs <span class="token operator">=</span> s<span class="token punctuation">.</span>txs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">copy</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>txs<span class="token punctuation">,</span> s<span class="token punctuation">.</span>txs<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>pack<span class="token punctuation">.</span>txs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>txs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token function">delete</span><span class="token punctuation">(</span>pending<span class="token punctuation">,</span> s<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment">// Send the pack in the background.</span>        s<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Sending batch of transactions"</span><span class="token punctuation">,</span> <span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>pack<span class="token punctuation">.</span>txs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"bytes"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>        sending <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> done <span class="token operator">&lt;-</span> pack<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">SendTransactions</span><span class="token punctuation">(</span>pack<span class="token punctuation">.</span>txs<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// pick chooses the next pending sync.</span>    pick <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>txsync <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>pending<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>        n <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pending<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> pending <span class="token punctuation">{</span>            <span class="token keyword">if</span> n<span class="token operator">--</span><span class="token punctuation">;</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> s            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> s <span class="token operator">:=</span> <span class="token operator">&lt;-</span>pm<span class="token punctuation">.</span>txsyncCh<span class="token punctuation">:</span>            pending<span class="token punctuation">[</span>s<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> s            <span class="token keyword">if</span> <span class="token operator">!</span>sending <span class="token punctuation">{</span>                <span class="token function">send</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token keyword">case</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>            sending <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token comment">// Stop tracking peers that cause send failures.</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                pack<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"Transaction send failed"</span><span class="token punctuation">,</span> <span class="token string">"err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>                <span class="token function">delete</span><span class="token punctuation">(</span>pending<span class="token punctuation">,</span> pack<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment">// Schedule the next send.</span>            <span class="token keyword">if</span> s <span class="token operator">:=</span> <span class="token function">pick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token function">send</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>pm<span class="token punctuation">.</span>quitSync<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当从网络节点同步过来最新的交易数据后，本地也会把新同步下来的交易数据广播给网络中的其他节点。这四个goroutine 基本上就在不停的做广播区块、广播交易，同步到区块、同步到交易，再广播区块、广播交易。</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 P2P </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公钥基础设施( PKI )</title>
      <link href="/2018/06/03/gong-yao-ji-chu-she-shi-pki/"/>
      <url>/2018/06/03/gong-yao-ji-chu-she-shi-pki/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="什么是证书"><a href="#什么是证书" class="headerlink" title="什么是证书"></a>什么是证书</h2><p>要开车得先考驾照，驾照上面记有本人的照片、姓名、出生日期等个人信息，以及有效期、准驾车辆的类型等信息，并由公安局在上面盖章。我们只要看到驾照，就可以知道公安局认定此人具有驾驶车辆的资格。</p><p><strong>公钥证书</strong>( Public-Key Certificate, PKC)其实和驾照很相似，里面记有姓名、组织、邮箱地址等个人信息，以及属于此人的公钥，并由认证机构(Certification Authority. Certifying Authority, CA)施加数字签名。只要看到公钥证书，我们就可以知道认证机构认定该公钥的确属于此人。公钥证书也简称为证书(certificate)。</p><h2 id="什么是公钥基础设施"><a href="#什么是公钥基础设施" class="headerlink" title="什么是公钥基础设施"></a>什么是公钥基础设施</h2><p>公钥基础设施(Public-Key Infrastructure)是为了能够更有效地运用公钥而制定的一系列规范和规格的总称。公钥基础设施一般根据其英语缩写而简称为PKI。</p><p>PKI只是一个总称，而并非指某一个单独的规范或规格。例如，RSA公司所制定的PKCS(Public-Key Cryptography Standards,公钥密码标准)系列规范也是PKI的一种，而互联网规格RFC(Request for Comments)中也有很多与PKI相关的文档。X.509这样的规范也是PKI的一种。</p><h2 id="PKI的组成要素"><a href="#PKI的组成要素" class="headerlink" title="PKI的组成要素"></a>PKI的组成要素</h2><p>PKI的组成要素主要有以下3个。</p><ul><li>用户一使用PKI的人</li><li>认证机构一颁发证书的人</li><li>仓库一保存证书的数据库</li></ul><p>由于PKI中用户和认证机构不仅限于“人”(也有可能是计算机)，因此我们可以给他们起一个特殊的名字，叫作实体(entitiy)。实体就是进行证书和密钥相关处理的行为主体。</p><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>用户包括两种：</p><ul><li>一种是希望使用PKI注册自己的公钥的人</li><li>另一种是希望使用已注册的公钥人。</li></ul><p>我们来具体看一下这两种用户所要进行的操作。</p><p><strong>注册公钥的用户所进行的操作</strong></p><ul><li>生成密钥对(也可以由认证机构生成)</li><li>在认证机构注册公钥</li><li>向认证机构申请证书</li><li>根据需要申请作废已注册的公钥</li><li>解密接收到的密文</li><li>对消息进行数字签名</li></ul><p><strong>使用已注册公钥的用户所进行的操作</strong></p><ul><li>将消息加密后发送给接收者</li><li>验证数字签名</li></ul><h3 id="认证机构-CA"><a href="#认证机构-CA" class="headerlink" title="认证机构(CA)"></a>认证机构(CA)</h3><p>认证机构(Certification Authority, CA)是对证书进行管理的人。</p><p>认证机构具体所进行的操作如下：</p><ul><li>生成密钥对(也可以由用户生成)<br>在注册公钥时对本人身份进行认证</li><li>生成并颁发证书</li><li>作废证书</li></ul><p>认证机构的工作中，公钥注册和本人身份认证这一部分可以由 <strong>注册机构</strong> (Registration Authority, RA)来分担。这样一来，认证机构就可以将精力集中到颁发证书上，从而减轻了认证机构的负担。不过，引入注册机构也有弊端，比如说认证机构需要对注册机构本身进行认证，而且随着组成要素的增加，沟通过程也会变得复杂，容易遭受攻击的点也会增加。</p><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>仓库(repository)是一个保存证书的数据库，PKI 用户在需要的时候可以从中获取证书，它的作用有点像打电话时用的电话本。仓库也叫作证书目录。</p><h2 id="为什么需要证书"><a href="#为什么需要证书" class="headerlink" title="为什么需要证书"></a>为什么需要证书</h2><p>如果从认证机构获取公钥，就可以降低遭到中间人攻击的风险。因为带有证书的公钥是经过认证机构进行数字签名的，事实上无法被篡改。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>椭圆曲线加密算法</title>
      <link href="/2018/06/03/tuo-yuan-qu-xian-jia-mi-suan-fa/"/>
      <url>/2018/06/03/tuo-yuan-qu-xian-jia-mi-suan-fa/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>椭圆曲线加密算法，即：Elliptic Curve Cryptography，简称ECC，是基于椭圆曲线数学理论实现的一种非对称加密算法。相比RSA，ECC优势是可以使用更短的密钥，来实现与RSA相当或更高的安全。据研究，160位ECC加密安全性相当于1024位RSA加密，210位ECC加密安全性相当于2048位RSA加密。</p><p>椭圆曲线在密码学中的使用，是1985年由Neal Koblitz和Victor Miller分别独立提出的。　　</p><h2 id="椭圆曲线"><a href="#椭圆曲线" class="headerlink" title="椭圆曲线"></a>椭圆曲线</h2><p>一般情况下，椭圆曲线可用下列方程式来表示，其中a,b,c,d为系数。</p><blockquote><p>E:y<sup>2</sup>=ax<sup>3</sup>+ bx<sup>2</sup>+cx+d</p></blockquote><p>例如，当a=1,b=0,c=-2,d=4时，所得到的椭圆曲线为:</p><blockquote><p>E:y<sup>2</sup>=x<sup>3</sup>-2x+4</p></blockquote><p>该椭圆曲线E的图像如图X-1所示，可以看出根本就不是椭圆形。　　</p><p><img src="https://img-blog.csdnimg.cn/img_convert/974cb942e9737b1bbde36873a8e36633.png" alt="image"></p><h2 id="定义椭圆曲线的运算规则"><a href="#定义椭圆曲线的运算规则" class="headerlink" title="定义椭圆曲线的运算规则"></a>定义椭圆曲线的运算规则</h2><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>过曲线上的两点A、B画一条直线，找到直线与椭圆曲线的交点，交点关于x轴对称位置的点，定义为A+B，即为加法。如下图所示：A + B = C</p><p><img src="https://img-blog.csdnimg.cn/img_convert/07b0afb7d292cb87de3dbc2b2c658b8a.png" alt="image"></p><h3 id="二倍运算"><a href="#二倍运算" class="headerlink" title="二倍运算"></a>二倍运算</h3><p>上述方法无法解释A + A，即两点重合的情况。因此在这种情况下，将椭圆曲线在A点的切线，与椭圆曲线的交点，交点关于x轴对称位置的点，定义为A + A，即2A，即为二倍运算。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/38a3a7998203d7a6bf63daf7bf54f21f.png" alt="image"></p><h3 id="正负取反"><a href="#正负取反" class="headerlink" title="正负取反"></a>正负取反</h3><p>将A关于x轴对称位置的点定义为-A，即椭圆曲线的正负取反运算。如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3fe34163bcadecfa5dc02172fbcbf19a.png" alt="image"></p><h3 id="无穷远点"><a href="#无穷远点" class="headerlink" title="无穷远点"></a>无穷远点</h3><p>如果将A与-A相加，过A与-A的直线平行于y轴，可以认为直线与椭圆曲线相交于无穷远点。</p><p>综上，定义了A+B、2A运算，因此给定椭圆曲线的某一点G，可以求出2G、3G（即G + 2G）、4G……。即：当给定G点时，已知x，求xG点并不困难。反之，已知xG点，求x则非常困难。此即为椭圆曲线加密算法背后的数学原理。</p><h2 id="有限域上的椭圆曲线运算"><a href="#有限域上的椭圆曲线运算" class="headerlink" title="有限域上的椭圆曲线运算"></a>有限域上的椭圆曲线运算</h2><p>椭圆曲线要形成一条光滑的曲线，要求x,y取值均为实数，即实数域上的椭圆曲线。但椭圆曲线加密算法，并非使用实数域，而是使用有限域。按数论定义，有限域GF(p)指给定某个质数p，由0、1、2……p-1共p个元素组成的整数集合中定义的加减乘除运算。</p><p>　　假设椭圆曲线为y² = x³ + x + 1，其在有限域GF(23)上时，写作：<br>　　y² ≡ x³ + x + 1 (mod 23)</p><p>　　此时，椭圆曲线不再是一条光滑曲线，而是一些不连续的点，如下图所示。以点(1,7)为例，7² ≡ 1³ + 1 + 1 ≡ 3 (mod 23)。如此还有如下点：</p><p>　　(0,1) (0,22)<br>　　(1,7) (1,16)<br>　　(3,10) (3,13)<br>　　(4,0)<br>　　(5,4) (5,19)<br>　　(6,4) (6,19)<br>　　(7,11) (7,12)<br>　　(9,7) (9,16)<br>　　(11,3) (11,20)<br>　　等等。</p><p>　　另外，如果P(x,y)为椭圆曲线上的点，则-P即(x,-y)也为椭圆曲线上的点。如点P(0,1)，-P=(0,-1)=(0,22)也为椭圆曲线上的点。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/487f951500f4d79b447af7ce22aea65f.png" alt="image"></p><h3 id="计算xG"><a href="#计算xG" class="headerlink" title="计算xG"></a>计算xG</h3><p>　　相关公式如下：<br>　　有限域GF(p)上的椭圆曲线y² = x³ + ax + b，若P(Xp, Yp), Q(Xq, Yq)，且P≠-Q，则R(Xr,Yr) = P+Q 由如下规则确定：</p><p>　　Xr = (λ² - Xp - Xq) mod p<br>　　Yr = (λ(Xp - Xr) - Yp) mod p<br>　　其中λ = (Yq - Yp)/(Xq - Xp) mod p（若P≠Q）, λ = (3Xp² + a)/2Yp mod p（若P=Q）</p><p>　　因此，有限域GF(23)上的椭圆曲线y² ≡ x³ + x + 1 (mod 23)，假设以(0,1)为G点，计算2G、3G、4G…xG等等，方法如下：</p><p>　　计算2G：<br>　　λ = (3x0² + 1)/2x1 mod 23 = (1/2) mod 23 = 12<br>　　Xr = (12² - 0 - 0) mod 23 = 6<br>　　Yr = (12(0 - 6) - 1) mod 23 = 19<br>　　即2G为点(6,19)</p><p>　　计算3G：<br>　　3G = G + 2G，即(0,1) + (6,19)<br>　　λ = (19 - 1)/(6 - 0) mod 23 = 3<br>　　Xr = (3² - 0 - 6) mod 23 = 3<br>　　Yr = (3(0 - 3) - 1) mod 23 = 13<br>　　即3G为点(3, 13)</p><p>　　同理计算4G、5G…xG，分布如下图：<br>　　<br>　　[图片上传失败…(image-2d5c43-1526642990683)]　　</p><h2 id="椭圆曲线加解密算法原理"><a href="#椭圆曲线加解密算法原理" class="headerlink" title="椭圆曲线加解密算法原理"></a>椭圆曲线加解密算法原理</h2><p>　　建立基于椭圆曲线的加密机制，需要找到类似RSA质因子分解或其他求离散对数这样的难题。而椭圆曲线上的已知G和xG求x，是非常困难的，此即为椭圆曲线上的的离散对数问题。此处x即为私钥，xG即为公钥。</p><p>　　椭圆曲线加密算法原理如下：</p><p>　　设私钥、公钥分别为k、K，即K = kG，其中G为G点。</p><p>　　公钥加密：<br>　　选择随机数r，将消息M生成密文C，该密文是一个点对，即：<br>　　C = {rG, M+rK}，其中K为公钥</p><p>　　私钥解密：<br>　　M + rK - k(rG) = M + r(kG) - k(rG) = M<br>　　其中k、K分别为私钥、公钥。</p><h2 id="椭圆曲线签名算法原理"><a href="#椭圆曲线签名算法原理" class="headerlink" title="椭圆曲线签名算法原理"></a>椭圆曲线签名算法原理</h2><p>　　椭圆曲线签名算法，即ECDSA。<br>　　设私钥、公钥分别为k、K，即K = kG，其中G为G点。</p><p>　　私钥签名：<br>　　1、选择随机数r，计算点rG(x, y)。<br>　　2、根据随机数r、消息M的哈希h、私钥k，计算s = (h + kx)/r。<br>　　3、将消息M、和签名{rG, s}发给接收方。</p><p>　　公钥验证签名：<br>　　1、接收方收到消息M、以及签名{rG=(x,y), s}。<br>　　2、根据消息求哈希h。<br>　　3、使用发送方公钥K计算：hG/s + xK/s，并与rG比较，如相等即验签成功。</p><p>　　原理如下：<br>　　hG/s + xK/s = hG/s + x(kG)/s = (h+xk)G/s<br>　　= r(h+xk)G / (h+kx) = rG</p><p>##代码实现：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/ecdsa"</span><span class="token string">"crypto/elliptic"</span><span class="token string">"crypto/rand"</span><span class="token string">"crypto/sha256"</span><span class="token string">"math/big"</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//通过椭圆曲线完成签名和验证</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//声明明文</span>message <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token comment">//生成私钥</span>privateKey<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ecdsa<span class="token punctuation">.</span><span class="token function">GenerateKey</span><span class="token punctuation">(</span>elliptic<span class="token punctuation">.</span><span class="token function">P256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rand<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span><span class="token comment">//生成公钥</span>pub <span class="token operator">:=</span> privateKey<span class="token punctuation">.</span>PublicKey<span class="token comment">//将明文散列</span>digest <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token comment">//签名</span>r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ecdsa<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> digest<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//设置私钥的参数类型为曲线类型</span>param <span class="token operator">:=</span> privateKey<span class="token punctuation">.</span>Curve<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获得私钥byte长度</span>curveOrderByteSize <span class="token operator">:=</span> param<span class="token punctuation">.</span>P<span class="token punctuation">.</span><span class="token function">BitLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token comment">//获得签名返回值的字节</span>rByte<span class="token punctuation">,</span> sByte <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//创建数组</span>signature <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> curveOrderByteSize<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//通过数组保存了签名结果的返回值</span><span class="token function">copy</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span>curveOrderByteSize<span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>rByte<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rByte<span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span>curveOrderByteSize<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>sByte<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sByte<span class="token punctuation">)</span><span class="token comment">//认证</span><span class="token comment">//将明文做hash散列，为了验证的内容对比</span>digest <span class="token operator">=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>curveOrderByteSize <span class="token operator">=</span> pub<span class="token punctuation">.</span>Curve<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>P<span class="token punctuation">.</span><span class="token function">BitLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token comment">//创建两个整形对象</span>r<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token comment">//设置证书值</span>r<span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span><span class="token punctuation">:</span>curveOrderByteSize<span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span>curveOrderByteSize<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">//认证</span>        e <span class="token operator">:=</span> ecdsa<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pub<span class="token punctuation">,</span> digest<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">if</span> e <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"failed"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实现数字签名</title>
      <link href="/2018/06/03/shi-xian-shu-zi-qian-ming/"/>
      <url>/2018/06/03/shi-xian-shu-zi-qian-ming/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="数字签名算法-DSA"><a href="#数字签名算法-DSA" class="headerlink" title="数字签名算法(DSA)"></a>数字签名算法(DSA)</h2><p>数字签名算法（DSA，Digital Signature Algorithm），是一种公开密钥算法，不能用于加密，只能用于数字签名。主要用作为接收者验证数字的完整性和数据发送者的身份，DSA算法的安全性基于解离散对数的困难性。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"crypto/dsa"</span>    <span class="token string">"crypto/rand"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> params dsa<span class="token punctuation">.</span>Parameters    <span class="token comment">//生成参数 </span>    <span class="token keyword">if</span> e <span class="token operator">:=</span> dsa<span class="token punctuation">.</span><span class="token function">GenerateParameters</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>params<span class="token punctuation">,</span> rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> dsa<span class="token punctuation">.</span>L1024N160<span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//生成私钥 </span>    <span class="token keyword">var</span> priv dsa<span class="token punctuation">.</span>PrivateKey    priv<span class="token punctuation">.</span>Parameters <span class="token operator">=</span> params    <span class="token keyword">if</span> e <span class="token operator">:=</span> dsa<span class="token punctuation">.</span><span class="token function">GenerateKey</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>priv<span class="token punctuation">,</span> rand<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//根据私钥生成公钥 </span>    pub <span class="token operator">:=</span> priv<span class="token punctuation">.</span>PublicKey    <span class="token comment">//消息 </span>    message <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>    <span class="token comment">//使用私钥进行签名，产生整数对(r,s) </span>    r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e <span class="token operator">:=</span> dsa<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> <span class="token operator">&amp;</span>priv<span class="token punctuation">,</span> message<span class="token punctuation">)</span>    <span class="token keyword">if</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//认证 </span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"认证 %q (r:%s,s:%s)\n"</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token keyword">if</span> dsa<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pub<span class="token punctuation">,</span> message<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"认证正确！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"认证失败！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="公钥加密算法-RSA"><a href="#公钥加密算法-RSA" class="headerlink" title="公钥加密算法(RSA)"></a>公钥加密算法(RSA)</h2><p>公钥加密算法于1987年首次公开，RSA是提出这个算法的三人姓氏开头字母组成，可用于加密，也可以用于数字签名。RSA的安全性基于大数分解的困难性。</p><p>加密算法：</p><ul><li><p>最优非对称加密填充（OAEP，Optimal Asymmetric Encryption Padding），在随机预言模型下，用来处理非对称加密前的明文；</p></li><li><p>公钥密码学标准（PKCS，The Public-Key Cryptography Standards），是由美国RSA数据安全公司及其合作伙伴制定的一组公钥密码学标准，其中包括证书申请、证书更新、证书作废表发布、扩展证书内容以及数字签名、数字信封的格式等方面的一系列相关协议。</p></li></ul><p>签名认证：</p><ul><li><p>公钥密码学标准（PKCS）；</p><ul><li>概率签名方案（PSS，Probabilistic Signature Scheme），与PKCS不同的是，它支持添加盐（Salt）。</li></ul></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"crypto"</span>    <span class="token string">"crypto/md5"</span>    <span class="token string">"crypto/rand"</span>    <span class="token string">"crypto/rsa"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//生成私钥 </span>    priv<span class="token punctuation">,</span> e <span class="token operator">:=</span> rsa<span class="token punctuation">.</span><span class="token function">GenerateKey</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//根据私钥产生公钥 </span>    pub <span class="token operator">:=</span> <span class="token operator">&amp;</span>priv<span class="token punctuation">.</span>PublicKey    <span class="token comment">//明文 </span>    plaintext <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span>    <span class="token comment">//加密生成密文 </span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%q\n加密:\n"</span><span class="token punctuation">,</span> plaintext<span class="token punctuation">)</span>    ciphertext<span class="token punctuation">,</span> e <span class="token operator">:=</span> rsa<span class="token punctuation">.</span><span class="token function">EncryptOAEP</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> pub<span class="token punctuation">,</span> plaintext<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\t%x\n"</span><span class="token punctuation">,</span> ciphertext<span class="token punctuation">)</span>    <span class="token comment">//解密得到明文 </span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"解密:\n"</span><span class="token punctuation">)</span>    plaintext<span class="token punctuation">,</span> e <span class="token operator">=</span> rsa<span class="token punctuation">.</span><span class="token function">DecryptOAEP</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> priv<span class="token punctuation">,</span> ciphertext<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\t%q\n"</span><span class="token punctuation">,</span> plaintext<span class="token punctuation">)</span>    <span class="token comment">//消息先进行Hash处理 </span>    h <span class="token operator">:=</span> md5<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span>    hashed <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%q MD5 Hashed:\n\t%x\n"</span><span class="token punctuation">,</span> plaintext<span class="token punctuation">,</span> hashed<span class="token punctuation">)</span>    <span class="token comment">//签名 </span>    opts <span class="token operator">:=</span> <span class="token operator">&amp;</span>rsa<span class="token punctuation">.</span>PSSOptions<span class="token punctuation">{</span>SaltLength<span class="token punctuation">:</span> rsa<span class="token punctuation">.</span>PSSSaltLengthAuto<span class="token punctuation">,</span> Hash<span class="token punctuation">:</span> crypto<span class="token punctuation">.</span>MD5<span class="token punctuation">}</span>    sig<span class="token punctuation">,</span> e <span class="token operator">:=</span> rsa<span class="token punctuation">.</span><span class="token function">SignPSS</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> priv<span class="token punctuation">,</span> crypto<span class="token punctuation">.</span>MD5<span class="token punctuation">,</span> hashed<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>    <span class="token keyword">if</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"签名:\n\t%x\n"</span><span class="token punctuation">,</span> sig<span class="token punctuation">)</span>    <span class="token comment">//认证 </span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"验证结果:"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> e <span class="token operator">:=</span> rsa<span class="token punctuation">.</span><span class="token function">VerifyPSS</span><span class="token punctuation">(</span>pub<span class="token punctuation">,</span> crypto<span class="token punctuation">.</span>MD5<span class="token punctuation">,</span> hashed<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"失败:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成功."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="椭圆曲线加密算法"><a href="#椭圆曲线加密算法" class="headerlink" title="椭圆曲线加密算法"></a>椭圆曲线加密算法</h2><p>ECDSA的全名是Elliptic Curve DSA，即椭圆曲线DSA。它是Digital Signature Algorithm (DSA)应用了椭圆曲线加密算法的变种。椭圆曲线算法的原理很复杂，但是具有很好的公开密钥算法特性，通过公钥无法逆向获得私钥。</p><ol><li><p>签名过程</p><p>假设要签名的消息是一个字符串：“Hello World!”。DSA签名的第一个步骤是对待签名的消息生成一个消息摘要。不同的签名算法使用不同的消息摘要算法。而ECDSA256使用SHA256生成256比特的摘要。<br>摘要生成结束后，应用签名算法对摘要进行签名：<br>产生一个随机数k<br>利用随机数k，计算出两个大数r和s。将r和s拼在一起就构成了对消息摘要的签名。<br>这里需要注意的是，因为随机数k的存在，对于同一条消息，使用同一个算法，产生的签名是不一样的。从函数的角度来理解，签名函数对同样的输入会产生不同的输出。因为函数内部会将随机值混入签名的过程。</p></li><li><p>验证过程<br>关于验证过程，这里不讨论它的算法细节。从宏观上看，消息的接收方从签名中分离出r和s，然后利用公开的密钥信息和s计算出r。如果计算出的r和接收到的r值相同，则表示验证成功。否则，表示验证失败。</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"crypto/ecdsa"</span>    <span class="token string">"crypto/elliptic"</span>    <span class="token string">"crypto/rand"</span>    <span class="token string">"crypto/sha256"</span>    <span class="token string">"math/big"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//明文 </span>    message <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span>    key<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">NewSigningKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    signature<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">Sign</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"签名后：%x\n"</span><span class="token punctuation">,</span> signature<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">Verify</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"验证失败！"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"验证成功！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewSigningKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ecdsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key<span class="token punctuation">,</span> err <span class="token operator">:=</span> ecdsa<span class="token punctuation">.</span><span class="token function">GenerateKey</span><span class="token punctuation">(</span>elliptic<span class="token punctuation">.</span><span class="token function">P256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rand<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span>    <span class="token keyword">return</span> key<span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// Sign signs arbitrary data using ECDSA.</span><span class="token keyword">func</span> <span class="token function">Sign</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> privkey <span class="token operator">*</span>ecdsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// hash message</span>    digest <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment">// sign the hash</span>    r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> err <span class="token operator">:=</span> ecdsa<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> privkey<span class="token punctuation">,</span> digest<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment">// encode the signature {R, S}</span>    <span class="token comment">// big.Int.Bytes() will need padding in the case of leading zero bytes</span>    params <span class="token operator">:=</span> privkey<span class="token punctuation">.</span>Curve<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    curveOrderByteSize <span class="token operator">:=</span> params<span class="token punctuation">.</span>P<span class="token punctuation">.</span><span class="token function">BitLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span>    rBytes<span class="token punctuation">,</span> sBytes <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    signature <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> curveOrderByteSize<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token function">copy</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span>curveOrderByteSize<span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>rBytes<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rBytes<span class="token punctuation">)</span>    <span class="token function">copy</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span>curveOrderByteSize<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>sBytes<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sBytes<span class="token punctuation">)</span>    <span class="token keyword">return</span> signature<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// Verify checks a raw ECDSA signature.</span><span class="token comment">// Returns true if it's valid and false if not.</span><span class="token keyword">func</span> <span class="token function">Verify</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> signature <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> pubkey <span class="token operator">*</span>ecdsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token comment">// hash message</span>    digest <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    curveOrderByteSize <span class="token operator">:=</span> pubkey<span class="token punctuation">.</span>Curve<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>P<span class="token punctuation">.</span><span class="token function">BitLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span>    r<span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span><span class="token punctuation">:</span>curveOrderByteSize<span class="token punctuation">]</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span>curveOrderByteSize<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ecdsa<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span>pubkey<span class="token punctuation">,</span> digest<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字签名</title>
      <link href="/2018/06/03/shu-zi-qian-ming/"/>
      <url>/2018/06/03/shu-zi-qian-ming/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="什么是数字签名"><a href="#什么是数字签名" class="headerlink" title="什么是数字签名"></a>什么是数字签名</h2><p>数字签名就是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。</p><h2 id="签名的生成和验证"><a href="#签名的生成和验证" class="headerlink" title="签名的生成和验证"></a>签名的生成和验证</h2><h3 id="生成消息签名的行为"><a href="#生成消息签名的行为" class="headerlink" title="生成消息签名的行为"></a>生成消息签名的行为</h3><p>生成消息签名这一行为是由消息的发送者来完成的，也称为“对消息签名”。生成签名就是根据消息内容计算数字签名的值，这个行为意味着“我认可该消息的内容”。</p><h3 id="验证消息签名的行为"><a href="#验证消息签名的行为" class="headerlink" title="验证消息签名的行为"></a>验证消息签名的行为</h3><p>验证数字签名这一行为一般是由消息的接收者来完成的，但也可以由需要验证消息的第三方来完成，这里的第三方在本书中被命名为验证者。验证签名就是检查该消息的签名是否真的属于发送者,验证的结果可以是成功或者失败，成功就意味着这个签名是属于发送者的，失败则意味着这个签名不是属于发送者的。</p><h2 id="公钥密码与数字签名"><a href="#公钥密码与数字签名" class="headerlink" title="公钥密码与数字签名"></a>公钥密码与数字签名</h2><p>在数字签名中，生成签名和验证签名这两个行为需要使用各自专用的密钥来完成。发送者使用“签名密钥”来生成消息的签名，而验证者则使用“验证密钥”来验证消息的签名。数字签名对签名密钥和验证密钥进行了区分，使用验证密钥是无法生成签名的。此外，签名密钥只能由签名的人持有，而验证密钥则是任何需要验证签名的人都可以持有。</p><h3 id="公钥密码机制"><a href="#公钥密码机制" class="headerlink" title="公钥密码机制"></a>公钥密码机制</h3><p>公钥密码包括一个由公钥和私钥组成的密钥对，其中公钥用于加密，私钥用于解密。用公钥加密所得到的密文只有<br>用与之对应的私钥才能正确解密。</p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>数字签名中也同样会使用公钥和私钥组成的密钥对，不过这两个密钥的用法和公钥密码是相反的，即用 <strong>私钥加密</strong> 相当于 <strong>生成签名</strong>，而用 <strong>公钥解密</strong> 则相当于<strong>验证签名</strong>。</p><h2 id="数字签名的方法"><a href="#数字签名的方法" class="headerlink" title="数字签名的方法"></a>数字签名的方法</h2><h3 id="直接对消息签名"><a href="#直接对消息签名" class="headerlink" title="直接对消息签名"></a>直接对消息签名</h3><p>Alice需要事先生成一个包括公钥和私钥的密钥对，而需要验证签名的Bob则需要得到Alice的公钥。在此基础上，签名和验证的过程如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-82b9a9aa48c4f2b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="对消息的散列值签名"><a href="#对消息的散列值签名" class="headerlink" title="对消息的散列值签名"></a>对消息的散列值签名</h3><p>先用单向散列函数求出消息的散列值，然后再将散列值进行加密(对散列值签名)就可以了。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-2b671f5e065094fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="数字签名算法"><a href="#数字签名算法" class="headerlink" title="数字签名算法"></a>数字签名算法</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>RSA是提出这个算法的三人姓氏开头字母组成，可用于加密，也可以用于数字签名。</p><h3 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h3><p>DSA ( Digital Signature Algorithm)是一种数字签名算法，是由NIST ( National Institute of Standards and Technology,美国国家标准技术研究所)于1991年制定的数字签名规范( DSS)。DSA是Schnorr算法与ElGammal方式的变体，只能被用于数字签名。</p><h3 id="ECDSA"><a href="#ECDSA" class="headerlink" title="ECDSA"></a>ECDSA</h3><p>ECDSA ( Elliptic Curve Digital Signature Algorithm)是一~种利用椭圆曲线密码来实现的数字<br>签名算法( NIST FIPS 186-3 )。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RSA加密和解密的实现</title>
      <link href="/2018/06/03/rsa-jia-mi-he-jie-mi-de-shi-xian/"/>
      <url>/2018/06/03/rsa-jia-mi-he-jie-mi-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="openssl生成私钥"><a href="#openssl生成私钥" class="headerlink" title="openssl生成私钥"></a>openssl生成私钥</h2><pre class="language-bash" data-language="bash"><code class="language-bash">openssl genrsa -out rsa_private_key.pem <span class="token number">1024</span>  </code></pre><h2 id="openssl生成公钥"><a href="#openssl生成公钥" class="headerlink" title="openssl生成公钥"></a>openssl生成公钥</h2><pre class="language-bash" data-language="bash"><code class="language-bash">openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem  </code></pre><h2 id="实现-RSA-加密解密"><a href="#实现-RSA-加密解密" class="headerlink" title="实现 RSA 加密解密"></a>实现 RSA 加密解密</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main  <span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"crypto/rand"</span>      <span class="token string">"crypto/rsa"</span>      <span class="token string">"crypto/x509"</span>      <span class="token string">"encoding/base64"</span>      <span class="token string">"encoding/pem"</span>      <span class="token string">"errors"</span>      <span class="token string">"fmt"</span>  <span class="token punctuation">)</span>  <span class="token comment">// 可通过openssl产生  </span><span class="token comment">//openssl genrsa -out rsa_private_key.pem 1024  </span><span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">`  -----BEGIN RSA PRIVATE KEY-----MIICXQIBAAKBgQDfw1/P15GQzGGYvNwVmXIGGxea8Pb2wJcF7ZW7tmFdLSjOItn9kvUsbQgS5yxx+f2sAv1ocxbPTsFdRc6yUTJdeQolDOkEzNP0B8XKm+Lxy4giwwR5LJQTANkqe4w/d9u129bRhTu/SUzSUIr65zZ/s6TUGQD6QzKY1Y8xS+FoQQIDAQABAoGAbSNg7wHomORm0dWDzvEpwTqjl8nh2tZyksyf1I+PC6BEH8613k04UfPYFUg10F2rUaOfr7s6q+BwxaqPtz+NPUotMjeVrEmmYM4rrYkrnd0lRiAxmkQUBlLrCBiFu+bluDkHXF7+TUfJm4AZAvbtR2wO5DUAOZ244FfJueYyZHECQQD+V5/WrgKkBlYyXhioQBXff7TLCrmMlUziJcQ295kIn8n1GaKzunJkhreoMbiRe0hpIIgPYb9E57tT/mP/MoYtAkEA4Ti6XiOXgxzV5gcB+fhJyb8PJCVkgP2wg0OQp2DKPp+5xsmRuUXv720oExv92jv6X65x631VGjDmfJNb99wq5QJBAMSHUKrBqqizfMdOjh7z5fLc6wY5M0a91rqoFAWlLErNrXAGbwIRf3LN5fvA76z6ZelViczY6sKDjOxKFVqL38ECQG0SpxdOT2M9BM45GJjxyPJ+qBuOTGU391Mq1pRpCKlZe4QtPHioyTGAAMd4Z/FX2MKb3in48c0UX5t3VjPsmY0CQQCc1jmEoB83JmTHYByvDpc8kzsD8+GmiPVrausrjj4py2DQpGmUic2zqCxl6qXMpBGtFEhrUbKhOiVOJbRNGvWW-----END RSA PRIVATE KEY-----`</span><span class="token punctuation">)</span>  <span class="token comment">//openssl  </span><span class="token comment">//openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem  </span><span class="token keyword">var</span> publicKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">`  -----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDfw1/P15GQzGGYvNwVmXIGGxea8Pb2wJcF7ZW7tmFdLSjOItn9kvUsbQgS5yxx+f2sAv1ocxbPTsFdRc6yUTJdeQolDOkEzNP0B8XKm+Lxy4giwwR5LJQTANkqe4w/d9u129bRhTu/SUzSUIr65zZ/s6TUGQD6QzKY1Y8xS+FoQQIDAQAB-----END PUBLIC KEY-----    `</span><span class="token punctuation">)</span>  <span class="token comment">// 加密  </span><span class="token keyword">func</span> <span class="token function">RsaEncrypt</span><span class="token punctuation">(</span>origData <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//解密pem格式的公钥  </span>    block<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> pem<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span>      <span class="token keyword">if</span> block <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"public key error"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment">// 解析公钥  </span>    pubInterface<span class="token punctuation">,</span> err <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">ParsePKIXPublicKey</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Bytes<span class="token punctuation">)</span>      <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err      <span class="token punctuation">}</span>      <span class="token comment">// 类型断言  </span>    pub <span class="token operator">:=</span> pubInterface<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span>      <span class="token comment">//加密  </span>    <span class="token keyword">return</span> rsa<span class="token punctuation">.</span><span class="token function">EncryptPKCS1v15</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> pub<span class="token punctuation">,</span> origData<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 解密  </span><span class="token keyword">func</span> <span class="token function">RsaDecrypt</span><span class="token punctuation">(</span>ciphertext <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//解密  </span>    block<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> pem<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span>      <span class="token keyword">if</span> block <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"private key error!"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment">//解析PKCS1格式的私钥  </span>    priv<span class="token punctuation">,</span> err <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">ParsePKCS1PrivateKey</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Bytes<span class="token punctuation">)</span>      <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err      <span class="token punctuation">}</span>      <span class="token comment">// 解密  </span>    <span class="token keyword">return</span> rsa<span class="token punctuation">.</span><span class="token function">DecryptPKCS1v15</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> priv<span class="token punctuation">,</span> ciphertext<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">RsaEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>      origData<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">RsaDecrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RSA加密解密</title>
      <link href="/2018/06/03/rsa-jia-mi-jie-mi/"/>
      <url>/2018/06/03/rsa-jia-mi-jie-mi/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="什么是RSA"><a href="#什么是RSA" class="headerlink" title="什么是RSA"></a>什么是RSA</h2><p>RSA是一种公钥密码算法，它的名字是由它的三位开发者，即Ron Rivest、Adi Shamir 和 Leonard Adleman的姓氏的首字母组成的( Rivest-Shamir-Adleman )。</p><p>RSA可以被用于公钥密码和数字签名。</p><h2 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h2><p>在RSA中，明文、密钥和密文都是数字。RSA的加密过程可以用下列公式来表达：</p><p><strong>密文=明文E mod N</strong> (RSA加密)</p><p>RSA的密文是对代表明文的数字的E次方求mod N的结果。换句话说，就是将<br>明文和自己做E次乘法,然后将其结果除以N求余数，这个余数就是密文。</p><p>加密公式中出现的两个数<code>E</code>和 <code>N</code>，到底都是什么数呢? RSA的加密是求明文的<br><code>E</code>次方mod <code>N</code>，因此只要知道E和N这两个数，任何人都可以完成加密的运算。所以说，<code>E</code> 和 <code>N</code>是RSA加密的密钥，也就是说，<code>E</code> 和 <code>N</code>的组合就是公钥。</p><h2 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h2><p>RSA的解密和加密一样简单，可以用下面的公式来表达:</p><p><strong>明文=密文 D mod N</strong> ( RSA解密)</p><p>表示密文的数字的D次方求 mod N就可以得到明文。</p><p>这里所使用的数字N和加密时使用的数字N是相同的。数 <code>D</code> 和数 <code>N</code> 组合起来就是RSA的解密密钥，因此D和N的组合就是私钥。</p><p>在RSA中，加密和解密的形式是相同的。加密是求“明文的E次方的 mod<br>N”，而解密则是求“密文的D次方的 mod N”。</p><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2><p>在RSA中，加密是求“明文的E次方的 mod<br>N”，而解密则是求“密文的D次方的 mod N”。</p><p>由于E和N是公钥，D和N是私钥，因此求E、D和N这三个数就是生成密钥对。RSA密钥对的生成步骤如下：</p><ol><li>求N</li><li>求L( L是仅在生成密钥对的过程中使用的数)</li><li>求E</li><li>求D</li></ol><h3 id="求N"><a href="#求N" class="headerlink" title="求N"></a>求N</h3><p>首先准备两个很大的质数。这两个很大的质数为p和q。p和q太小的话，密码会变得容易破译，但太大的话计算时间又会变得很长。</p><p>判断一个数是不是质数并不是看它能不能分解质因数，而是通过数学上的判断方法来完成。</p><p>准备好两个很大的质数之后，我们将这两个数相乘，其结果就是数N。也就是说，数 N 可以用下列公式来表达：</p><pre class="language-bash" data-language="bash"><code class="language-bash">N <span class="token operator">=</span> p x q <span class="token punctuation">(</span>p、q为质数<span class="token punctuation">)</span></code></pre><h3 id="求L"><a href="#求L" class="headerlink" title="求L"></a>求L</h3><p><code>L</code> 这个数在RSA的加密和解密过程中都不出现，它只出现在生成密钥对的过程中。</p><p><code>L</code> 是 <code>p-1</code> 和 <code>q-1</code> 的最小公倍数( least common multiple, lcm )。</p><p>如果用lcm(X, Y) 来表示 “X和Y的最小公倍数”，则L可以写成下列形式。</p><pre class="language-none"><code class="language-none">L= lcm(p-1,q-1) ( L是p-1和q-1的最小公倍数)</code></pre><h3 id="求E"><a href="#求E" class="headerlink" title="求E"></a>求E</h3><p>E是一个比1大、比L小的数。此外，E和L的最大公约数( greatest common divisor, gcd)必须为1。</p><p>如果用gcd(X, Y)来表示X和Y的最大公约数，则E和L之间存在下列关系。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span> <span class="token operator">&lt;</span> E <span class="token operator">&lt;</span> Lgcd<span class="token punctuation">(</span>E,L<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">1</span></code></pre><h3 id="求D"><a href="#求D" class="headerlink" title="求D"></a>求D</h3><p>数D是由数E计算得到的。D、E和L之间必须具备下列关系。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span> <span class="token operator">&lt;</span> D <span class="token operator">&lt;</span> LE x D mod L <span class="token operator">=</span> <span class="token number">1</span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/11383699-7851948dee589d20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="举个密钥对生成的例子"><a href="#举个密钥对生成的例子" class="headerlink" title="举个密钥对生成的例子"></a>举个密钥对生成的例子</h3><ul><li><strong>求N</strong></li></ul><p>首先我们准备两个质数p、q,这里我们选择17和19,它们都是质数。</p><pre class="language-bash" data-language="bash"><code class="language-bash">N <span class="token operator">=</span> p x q  <span class="token operator">=</span> <span class="token number">17</span> x <span class="token number">19</span>  <span class="token operator">=</span> <span class="token number">323</span></code></pre><ul><li><strong>求L</strong></li></ul><p>L是p-1和q- 1的最小公倍数。</p><pre class="language-bash" data-language="bash"><code class="language-bash">L <span class="token operator">=</span> lcm<span class="token punctuation">(</span>p-1,q-1<span class="token punctuation">)</span>  <span class="token operator">=</span> lcm<span class="token punctuation">(</span><span class="token number">16</span>, <span class="token number">18</span><span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token number">144</span></code></pre><ul><li><strong>求E</strong></li></ul><p>E和L的最大公约数必须是1。</p><pre class="language-bash" data-language="bash"><code class="language-bash">gcd<span class="token punctuation">(</span>E,L<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span></code></pre><p>满足条件的E有很多，例如下面这些数都可以。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">5,7</span>,11,13,17,19,23,25,29,31,<span class="token punctuation">..</span>.</code></pre><p>这些数好像都是质数，但其实并不是这样的，比如25就不是质数。这些数称为和 L “互质的数”，也就是相对于L是质数的意思。我们选择5来作为E。</p><p>E=5, N=323 就是公钥。</p><ul><li><strong>求D</strong></li></ul><p>D必须满足下列条件:</p><pre class="language-bash" data-language="bash"><code class="language-bash">E x D mod <span class="token assign-left variable">L</span><span class="token operator">=</span>l</code></pre><p>D = 29可以满足上面的条件，因为:</p><pre class="language-bash" data-language="bash"><code class="language-bash">E x D mod L <span class="token operator">=</span> <span class="token number">5</span> x <span class="token number">29</span> mod <span class="token number">144</span>            <span class="token operator">=</span> <span class="token number">145</span> mod <span class="token number">144</span>            <span class="token operator">=</span><span class="token number">1</span></code></pre><p>我们已经成功生成了密钥对，即:</p><p><strong>公钥</strong>: <code>E=5 N=323</code><br><strong>私钥</strong>: <code>D=29 N=323</code></p><p>公钥(E,N)=(5,323)是可以任意公开的，但是私钥(D,N)= (29,323)必须妥善保管。</p><ul><li><strong>加密</strong></li></ul><p>要加密的明文必须是小于N的数，也就是小于323的数，我们假设要加密的明文是123，加密时使用的是公钥 <code>E=5、N=323</code>。</p><blockquote><p>明文E mod N = 1235 mod 323 = 255</p></blockquote><p>因此密文就是 255。</p><ul><li><strong>解密</strong></li></ul><p>我们对密文225进行解密。解密时使用的是私钥D=29、N=323。</p><blockquote><p>密文 29 mod N = 22529 mod 323 = 123</p></blockquote><h2 id="中间人攻击-man-in-the-middle-attack"><a href="#中间人攻击-man-in-the-middle-attack" class="headerlink" title="中间人攻击( man-in-the-middle attack )"></a>中间人攻击( man-in-the-middle attack )</h2><p>中间人攻击虽然不能破译RSA,但却是一种针对机密性的有效攻击。所谓中间人攻击，就是主动攻击者Mallory混入发送者和接收者的中间，对发送者伪装成<br>接收者，对接收者伪装成发送者的攻击方式，在这里，Mallory就是“中间人”。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-5a8b75afc68e80b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这种攻击不仅针对RSA,而是可以针对任何公钥密码。在这个过程中，公钥密码并没有被破译，所有的密码算法也都正常工作并确保了机密性。然而，所谓的机密性并非在Alice和Bob之间，而是在Alice和Mallory之间，以及Mallory和Bob之间成立的。仅靠公钥密码本身,是无法防御中间人攻击的。</p><p>要防御中间人攻击，还需要一种手段来确认所收到的公钥是否真的属于Bob,这种手段称为认证。在这种情况下，我们可以使用公钥的证书。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>公钥加密</title>
      <link href="/2018/06/03/gong-yao-jia-mi/"/>
      <url>/2018/06/03/gong-yao-jia-mi/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>公钥密码又称为非对称密码，拥有公钥密码的用户分别拥有加密密钥和解密密钥。通过加密密钥不能得到解密密钥。并且加密密钥是公开的。</p><h2 id="什么是密钥配送问题"><a href="#什么是密钥配送问题" class="headerlink" title="什么是密钥配送问题"></a>什么是密钥配送问题</h2><p>在现实世界中使用对称密码时，我们一定会遇到密钥配送问题( key distribution problem)。</p><p>假如 A 给 B 写了一封情书，并使用对称加密，如果不讲加密密钥发送给B，B是无法查看情书的，如果将密钥和情书一起发送给B，就容易被攻击者截获。</p><p><strong>密钥必须要发送，但又不能发送</strong>，这就是对称密码的密钥配送问题。</p><p>解决密钥配送问题的方法：</p><ul><li>通过事先共享密钥来解决</li><li>通过密钥分配中心来解决</li><li>通过Diffie-Hellman密钥交换来解决</li><li>通过公钥密码来解决</li></ul><h3 id="通过事先共享密钥来解决"><a href="#通过事先共享密钥来解决" class="headerlink" title="通过事先共享密钥来解决"></a>通过事先共享密钥来解决</h3><p>密钥配送问题最简单的一种解决方法，就是事先用安全的方式将密钥交给对方，这称为密钥的事先共享。 事先共享的局限性:</p><ul><li>需要一种安全的方式将密钥交给对方。</li><li>即便能够实现事先共享密钥，但在人数很多的情况下，通信所需要的密钥数量也会增大。</li></ul><h3 id="通过密钥分配中心来解决"><a href="#通过密钥分配中心来解决" class="headerlink" title="通过密钥分配中心来解决"></a>通过密钥分配中心来解决</h3><p>如果所有参与加密通信的人都需要事先共享密钥，则密钥的数量会变得巨大，这样额情况下就可以使用密钥分配中心（Key Distribution Center，KDC）来解决密钥配送问题。当需要进行加密通信时，密钥分配中心会生成一个通信密钥，每个人只要和密钥分配中心事先共享密钥就可以了。有多少个人进行通信分配中心就保存了多少密钥。</p><p>局限性：</p><ul><li><p>随着通信人数的增加，密钥分配中心的负荷也会随之增加。如果密钥分配中心计算机发生故障，所有的加密通信就会瘫痪。</p></li><li><p>如果主动攻击者入侵了密钥分配中心计算机，并盗取了密钥数据库，所有人的加密通信都会被破译。</p></li></ul><h3 id="通过Diffie-Hellman密钥交换来解决"><a href="#通过Diffie-Hellman密钥交换来解决" class="headerlink" title="通过Diffie-Hellman密钥交换来解决"></a>通过Diffie-Hellman密钥交换来解决</h3><p>在Diffie-Hellman密钥交换中，进行加密通信的双方需要交换一些信息，而这些信息即便被窃听者听到也没有关系。<br>根据所交换的信息，双方可以各自生成相同的密钥，而窃听者却无法生成相同的密钥。窃听者虽然能够窃听到双方交换的信息但却无法根据这些信息生成和双方相同的密钥。</p><h3 id="通过公钥密码来解决"><a href="#通过公钥密码来解决" class="headerlink" title="通过公钥密码来解决"></a>通过公钥密码来解决</h3><h2 id="什么是公钥密码"><a href="#什么是公钥密码" class="headerlink" title="什么是公钥密码"></a>什么是公钥密码</h2><p>公钥密码( public-key cryptography)，又称为非对称密码，密钥分为加密密钥和解密密钥两种。发送者用加密密钥对消息进行加密，接收者用解密密钥对密文进行解密。</p><p>加密密钥和解密密钥的区别：</p><ul><li>发送者只需要加密密钥</li><li>接收者只需要解密密钥</li><li>解密密钥不可以被窃听者获取</li><li>加密密钥被窃听者获取也没问题</li></ul><p>解密密钥从一开始就是由接收者自己保管的，因此只要将加密密钥发给发送者就可以解决<strong>密钥配送问题</strong>了，而根本不需要配送解密密钥。</p><h2 id="公钥通信的流程"><a href="#公钥通信的流程" class="headerlink" title="公钥通信的流程"></a>公钥通信的流程</h2><p>我们还是假设Alice要给Bob发送一条消息，Alice是发送者，Bob 是接收者，而这次窃听者Eve依然能够窃听到他们之间<br>的通信内容。</p><p>在公钥密码通信中，通信过程是由接收者Bob来启动的。</p><ol><li><p>Bob生成一个包含公钥和私钥的密钥对。私钥由Bob自行妥善保管。</p></li><li><p>Bob 将自己的公钥发送给Alice。</p><p>Bob的公钥被窃听者Eve截获也没关系。<br>将公钥发送给Alice,表示Bob请Alice用这个公钥对消息进行加密并发送给他。</p></li><li><p>Alice用Bob的公钥对消息进行加密。</p><p>加密后的消息只有用Bob的私钥才能够解密。虽然Alice拥有Bob 的公钥，但用Bob的公钥是无法对密文进行解密的。</p></li><li><p>Alice将密文发送给Bob。</p><p>密文被窃听者Eve截获也没关系。Eve可能拥有Bob的公钥，但是用Bob的公钥是无法进行解密的。</p></li><li><p>Bob用自己的私钥对密文进行解密</p></li></ol><p>公钥通信的流程图：</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-164c991a5d3a268b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分组密码的调用</title>
      <link href="/2018/06/03/fen-zu-mi-ma-de-diao-yong/"/>
      <url>/2018/06/03/fen-zu-mi-ma-de-diao-yong/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bytes"</span>    <span class="token string">"crypto/cipher"</span>    <span class="token string">"crypto/aes"</span>    <span class="token string">"encoding/base64"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">PKCS7Padding</span><span class="token punctuation">(</span>ciphertext <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> blockSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    padding <span class="token operator">:=</span> blockSize <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span> <span class="token operator">%</span> blockSize    padtext <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token function">byte</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> padding<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> padtext<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">PKCS7UnPadding</span><span class="token punctuation">(</span>origData <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span>    unpadding <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>origData<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> origData<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">(</span>length <span class="token operator">-</span> unpadding<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AesEncrypt</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    blockSize <span class="token operator">:=</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    origData <span class="token operator">=</span> <span class="token function">PKCS7Padding</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> blockSize<span class="token punctuation">)</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCEncrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span>blockSize<span class="token punctuation">]</span><span class="token punctuation">)</span>    crypted <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> crypted<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AesDecrypt</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    blockSize <span class="token operator">:=</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCDecrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span>blockSize<span class="token punctuation">]</span><span class="token punctuation">)</span>    origData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>crypted<span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> crypted<span class="token punctuation">)</span>    origData <span class="token operator">=</span> <span class="token function">PKCS7UnPadding</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> origData<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"0123456789abcdef"</span><span class="token punctuation">)</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AesEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    origData<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AesDecrypt</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="CFB-模式"><a href="#CFB-模式" class="headerlink" title="CFB 模式"></a>CFB 模式</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"io"</span>    <span class="token string">"crypto/cipher"</span>    <span class="token string">"crypto/aes"</span>    <span class="token string">"crypto/rand"</span>    <span class="token string">"encoding/base64"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">AesEncrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    ciphertext <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> aes<span class="token punctuation">.</span>BlockSize<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">)</span>    iv <span class="token operator">:=</span> ciphertext<span class="token punctuation">[</span><span class="token punctuation">:</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadFull</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    stream <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCFBEncrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    stream<span class="token punctuation">.</span><span class="token function">XORKeyStream</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">[</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> plaintext<span class="token punctuation">)</span>    <span class="token keyword">return</span> ciphertext<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AesDecrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment">// The IV needs to be unique, but not secure. Therefore it's common to</span>    <span class="token comment">// include it at the beginning of the ciphertext.</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span> <span class="token operator">&lt;</span> aes<span class="token punctuation">.</span>BlockSize <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"ciphertext too short"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    iv <span class="token operator">:=</span> ciphertext<span class="token punctuation">[</span><span class="token punctuation">:</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">]</span>    ciphertext <span class="token operator">=</span> ciphertext<span class="token punctuation">[</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">:</span><span class="token punctuation">]</span>    stream <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCFBDecrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    <span class="token comment">// XORKeyStream can work in-place if the two arguments are the same.</span>    stream<span class="token punctuation">.</span><span class="token function">XORKeyStream</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> ciphertext<span class="token punctuation">)</span>    <span class="token keyword">return</span> ciphertext<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"0123456789abcdef"</span><span class="token punctuation">)</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AesEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    origData<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AesDecrypt</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="OFB-模式"><a href="#OFB-模式" class="headerlink" title="OFB 模式"></a>OFB 模式</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"io"</span>    <span class="token string">"crypto/cipher"</span>    <span class="token string">"crypto/aes"</span>    <span class="token string">"crypto/rand"</span>    <span class="token string">"encoding/base64"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">AesEncrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    ciphertext <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> aes<span class="token punctuation">.</span>BlockSize<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">)</span>    iv <span class="token operator">:=</span> ciphertext<span class="token punctuation">[</span><span class="token punctuation">:</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadFull</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    stream <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewOFB</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    stream<span class="token punctuation">.</span><span class="token function">XORKeyStream</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">[</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> plaintext<span class="token punctuation">)</span>    <span class="token keyword">return</span> ciphertext<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AesDecrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment">// The IV needs to be unique, but not secure. Therefore it's common to</span>    <span class="token comment">// include it at the beginning of the ciphertext.</span>    iv <span class="token operator">:=</span> ciphertext<span class="token punctuation">[</span><span class="token punctuation">:</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span> <span class="token operator">&lt;</span> aes<span class="token punctuation">.</span>BlockSize <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"ciphertext too short"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    plaintext2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">)</span>    stream <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewOFB</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    stream<span class="token punctuation">.</span><span class="token function">XORKeyStream</span><span class="token punctuation">(</span>plaintext2<span class="token punctuation">,</span> ciphertext<span class="token punctuation">[</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> plaintext2<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"6368616e676520746869732070617374"</span><span class="token punctuation">)</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AesEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    origData<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AesDecrypt</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="CTR模式"><a href="#CTR模式" class="headerlink" title="CTR模式"></a>CTR模式</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"io"</span>    <span class="token string">"crypto/cipher"</span>    <span class="token string">"crypto/aes"</span>    <span class="token string">"crypto/rand"</span>    <span class="token string">"encoding/base64"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">AesEncrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    ciphertext <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> aes<span class="token punctuation">.</span>BlockSize<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">)</span>    iv <span class="token operator">:=</span> ciphertext<span class="token punctuation">[</span><span class="token punctuation">:</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadFull</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    stream <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCTR</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    stream<span class="token punctuation">.</span><span class="token function">XORKeyStream</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">[</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> plaintext<span class="token punctuation">)</span>    <span class="token keyword">return</span> ciphertext<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AesDecrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment">// The IV needs to be unique, but not secure. Therefore it's common to</span>    <span class="token comment">// include it at the beginning of the ciphertext.</span>    iv <span class="token operator">:=</span> ciphertext<span class="token punctuation">[</span><span class="token punctuation">:</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span> <span class="token operator">&lt;</span> aes<span class="token punctuation">.</span>BlockSize <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"ciphertext too short"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    plaintext2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">)</span>    stream <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCTR</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    stream<span class="token punctuation">.</span><span class="token function">XORKeyStream</span><span class="token punctuation">(</span>plaintext2<span class="token punctuation">,</span> ciphertext<span class="token punctuation">[</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> plaintext2<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"6368616e676520746869732070617374"</span><span class="token punctuation">)</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AesEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    origData<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AesDecrypt</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分组密码</title>
      <link href="/2018/06/02/fen-zu-mi-ma/"/>
      <url>/2018/06/02/fen-zu-mi-ma/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>密码算法可以分为分组密码和流密码两种</p><ul><li><p><strong>分组密码（block cipher）</strong>是每次只能处理特定长度的一块数据的一类密码算法，这里的“一块”就称为分组（block）。一个分组的比特数就称为分组长度（block lenght）。</p><p>例如 DES和3DES的分组长度都是64比特。AES的分组长度为128比特。</p></li><li><p><strong>流密码（stream cipher）</strong>是对数据流进行连续处理的一类密码算法。流密码中一般以1比特、8比特、或32比特等为单位进行加密和解密。</p></li></ul><p>分组密码处理完一个分组就结束了，因此不需要通过内部状态来记录加密的进度；相对地，流密码是对一串数据进行连续处理，因此需要保持内部状态。</p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>分组密码算法只能加密固定长度的分组，但是我们需要加密的明文长度可能会超过分组密码的分组长度，这时就需要对分组密码算法进行迭代，以便将一段很长的明文全部加密。而迭代的方法就称为分组密码的模式（mode）。</p><ul><li>ECB模式：Electronic CodeBook mode（电子密码模式）</li><li>CBC模式：Cipher Block Chaining mode（密码分组链接模式）</li><li>CFB模式：Cipher FeedBack mode（密文反馈模式）</li><li>OFB模式：Output FeedBack mode（输出反馈模式）</li><li>CTR模式：CounTeR mode（计数器模式）</li></ul><h2 id="ECB模式"><a href="#ECB模式" class="headerlink" title="ECB模式"></a>ECB模式</h2><p>在ECB模式中，将明文分组加密之后的结果直接成为密文分组。当最后一个明文分组的内容小于分组长度时，需要用一些特定的数据进行填充（padding）。</p><p><strong>明文分组</strong>：是指分组密码算法中作为加密对象的明文。<br><strong>密文分组</strong>：是指使用分组密码算法中将明文分组加密之后所生成的密文。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-2341de5bf3dffe95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ECB模式"></p><p>使用 ECB 模式加密时，相同的明文分组会转换为相同的密文分组，也就是说，我们可以将其理解为是一个巨大的“明文分组-&gt;密文分组”的对应表，因此 ECB 模式也称为 <strong>电子密码本模式</strong>。</p><h3 id="ECB模式的特点"><a href="#ECB模式的特点" class="headerlink" title="ECB模式的特点"></a>ECB模式的特点</h3><p>ECB模式是所有模式中最简单的一种。ECB的明文分组与密文分组是一一对应的关系，因此，如果明文中存在多个相同的明文分组，则这些明文分组最终都会将被转换为相同的密文分组。这样一来，只要观察一下密文，就可以知道明文中存在怎样的重复组合，并可以以此为线索来破译密码，因此ECB模式是存在风险的。</p><h3 id="对ECB模式的攻击"><a href="#对ECB模式的攻击" class="headerlink" title="对ECB模式的攻击"></a>对ECB模式的攻击</h3><p>假如存在主动攻击者Mallory，它能够改变密文分组的顺序。当接收者对密文进行解密时，由于密文分组的顺序被改变了，因此相应的明文分组的顺序也会改变。也就是说，攻击者Mallory无需破译密码就能够操纵明文。</p><p>列举一个银行转账的简单例子，假设某银行转账数据由以下3个分组构成。</p><pre class="language-bash" data-language="bash"><code class="language-bash">分组1 <span class="token operator">=</span> 付款人的银行账号分组2 <span class="token operator">=</span> 收款人的银行账号分组3 <span class="token operator">=</span> 转转金额</code></pre><p>我们可以制作一个“从 A 账号 向 B账号转账1000元”的数据，用16进制数据表示如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">明文分组1 <span class="token operator">=</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> （付款人：A）明文分组2 <span class="token operator">=</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span>  （收款人： B）明文分组3 <span class="token operator">=</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">40</span>  （转账金额： <span class="token number">1000</span>）</code></pre><p>经过 ECB模式进行加密，</p><pre class="language-bash" data-language="bash"><code class="language-bash">密文分组1 <span class="token operator">=</span> 1A 2C 1A 2C 1A 2C 1A 2C 1A 2C 1A 2C 1A 2C 1A 2C （付款人：*）密文分组2 <span class="token operator">=</span> 2D 3F 2D 3F 2D 3F 2D 3F 2D 3F 2D 3F 2D 3F 2D 3F （收款人： *）密文分组3 <span class="token operator">=</span> 4D 5E 4D 5E 4D 5E 4D 5E 4D 5E 4D 5E 4D 5E 4D 5E （转账金额： **）</code></pre><p>如果攻击者 Mallory 将密文分组1 和 2 内容对调，</p><pre class="language-bash" data-language="bash"><code class="language-bash">密文分组1 <span class="token operator">=</span> 2D 3F 2D 3F 2D 3F 2D 3F 2D 3F 2D 3F 2D 3F 2D 3F （付款人： *）密文分组2 <span class="token operator">=</span> 1A 2C 1A 2C 1A 2C 1A 2C 1A 2C 1A 2C 1A 2C 1A 2C （收款人：*）密文分组3 <span class="token operator">=</span> 4D 5E 4D 5E 4D 5E 4D 5E 4D 5E 4D 5E 4D 5E 4D 5E （转账金额： **）</code></pre><p>那请求内容从A向B转账1000，变成了B向A转账1000。我们可以看出ECB模式的缺点是可以在不破译密文的情况下操纵明文。</p><h2 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h2><p>CBC模式，全称Cipher Block Chaining模式，译为密文分组链接模式，即加密算法的输入是上一个密文分组和下一个明文分组的异或。因为是将上一个密文分组和下一个明文分组的内容混合加密，因此可以避免ECB模式的缺陷。当加密第一个明文分组时，由于不存在上一个密文分组，因此需要准备与分组等长的初始化向量IV，来代替上一个密文分组。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-7c325eb4c24bac7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>初始化向量</strong>：当加密第一个明文分组时，由于不存在“前一个密文分组”，因此需要事先准备一个长度为一个分组的比特序列来代替“前一个密文分组”，这个比特序列称为初始化向量，通常缩写为IV。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewCBCEncrypter</span><span class="token punctuation">(</span>b Block<span class="token punctuation">,</span> iv <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> BlockMode</code></pre><p>当我们使用 CBC模式的时候，需要传入 iv（初始化向量）</p><h3 id="CBC模式的特点"><a href="#CBC模式的特点" class="headerlink" title="CBC模式的特点"></a>CBC模式的特点</h3><ul><li><p>明文分组在加密之前一定会与“前一个密文分组”进行XOR运算，因此即便明文分组1和2的值是相等的，密文分组1和2的值也不一定是相等的。这样ECB模式的缺陷在CBC模式中就不存在了。</p></li><li><p>在CBC模式中，无法单独对一个中间的明文分组进行加密。例如，如果要生成密文分组3，则至少需要凑齐明文分组1、2、3才行。</p></li><li><p>如果密文分组中有一些比特缺失了，即便只缺失了1比特，那么缺失比特的位置之后的密文分组也就全部无法解密了。</p></li></ul><h3 id="对CBC模式的攻击"><a href="#对CBC模式的攻击" class="headerlink" title="对CBC模式的攻击"></a>对CBC模式的攻击</h3><p>假设主动攻击者Mallory的目的是通过修改密文来操纵解密后的明文。如果Mallory能够对初始化向量中任意比特进行反转，则解密后得到的明文分组中相应的比特也会被反转。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-30fc1ff1ca7b47b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CBC模式"></p><h2 id="CFB模式"><a href="#CFB模式" class="headerlink" title="CFB模式"></a>CFB模式</h2><p>CFB模式，全称Cipher FeedBack模式，译为密文反馈模式，即上一个密文分组作为加密算法的输入，输出与明文异或作为下一个分组的密文。在CFB模式中，明文分组和密文分组之间只有一次异或。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-88bbc4f109b05b8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CFB"></p><p>CFB模式与一次性密码本相似，都是通过将明文与随机比特序列进行异或运算来生成密文。但由于CFB模式中密码算法的输出是通过计算得到的，并非真正的随机数，因此不具备一次性密码本那样理论上不可破译的性质。CFB模式可以看做使用分组方式实现流密码的方式。</p><h3 id="对CFB模式的攻击"><a href="#对CFB模式的攻击" class="headerlink" title="对CFB模式的攻击"></a>对CFB模式的攻击</h3><p>对CFB模式可以实施 <strong>重放攻击（replay attack）</strong></p><p>有一天 A 向 B 发送了一条消息，这条消息由4个密文分组组成，攻击者将后3个密文分组保存下来，第二天，A又向 B 发送内容不同的4个密文分组，攻击者将后3个密文分组进行替换。解密的时候就会发现第一个可以解密正确，第2个会出现错误，而第3个和第4个则变成攻击者替换的内容。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-b557579925f50970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CFB模式"></p><h2 id="OFB模式"><a href="#OFB模式" class="headerlink" title="OFB模式"></a>OFB模式</h2><p>OFB模式，全称Output Feedback模式，译为输出反馈模式。OFB模式与CFB模式类似，只是加密算法的输入是上一次加密的输出。</p><p>OFB模式不是通过密码算法对明文直接进行加密的，而是通过将“<strong>明文分组</strong>”和“<strong>密码算法的输出</strong>”进行XOR来产生“密文分组”的。</p><p>OFB模式加密和处理解密逻辑相同，明文与密钥流异或生成密文，密文与密钥流异或生成明文。<br>　　<br><img src="http://upload-images.jianshu.io/upload_images/11383699-20da7de11b97cbd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OFB加密"><br>　　<br><img src="http://upload-images.jianshu.io/upload_images/11383699-0d05040f97a3b0e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OFB解密"></p><h2 id="CTR模式"><a href="#CTR模式" class="headerlink" title="CTR模式"></a>CTR模式</h2><p>CTR模式，全称Counter模式，译为计数器模式。CTR模式中，每个分组对应一个逐次累加的计数器，并通过对计数器进行加密来生成密钥流。也即最终的密文分组是通过将计数器加密得到的比特序列，与明文分组进行异或运算得到的。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-8cc386719b3b3502.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CTR模式"></p><h3 id="CTR模式的特点"><a href="#CTR模式的特点" class="headerlink" title="CTR模式的特点"></a>CTR模式的特点</h3><ul><li><p>CTR模式的加密和解密使用了完全相同的结构，因此在程序实现上比较容易。这一特点和同为流密码的OFB模式是一样的。</p></li><li><p>CTR模式中可以以任意顺序对分组进行加密和解密，因此在加密和解密时需要用到的“计数器”的值可以由nonce和分组序号直接计算出来。能够以任意顺序处理分组，就以为着能够实现并行计算。在支持并行计算的系统中，CTR模式的速度是非常快的。</p></li></ul><h3 id="错误与机密性"><a href="#错误与机密性" class="headerlink" title="错误与机密性"></a>错误与机密性</h3><ul><li><p>假设CTR模式的密文分组中有一个比特被反转了，则解密后明文分组中仅有与之对应的比特会被反转，这一错误不会放大，这一弱点和OFB模式是相同的。</p></li><li><p>在OFB模式中，如果对密钥流的一个分组进行加密后其结果碰巧和加密前是相同的，那么这一分组之后的密钥流就会变成同一值的不断反复。在CTR模式中就不存在这一问题。</p></li></ul><h2 id="分组密码模式比较"><a href="#分组密码模式比较" class="headerlink" title="分组密码模式比较"></a>分组密码模式比较</h2><table><thead><tr><th>模式</th><th>优点</th><th>缺点</th><th>备注</th></tr></thead><tbody><tr><td>ECB模式</td><td>简单<br> 快速<br> 支持并行运算</td><td>明文中的重复排列反映在密文中<br> 通过删除、替换密文分组可以对明文进行操作 <br> 对包含某些比特错误的密文进行解密时对应的分组会出错 <br> 不能抵御重放攻击</td><td>不应使用</td></tr><tr><td>CBC模式</td><td>明文的重复排列不会反映在密文中<br> 支持并行运算（仅解密）<br> 能够解密任意密文分组</td><td>对包含某些错误比特的密文进行解密时，第一个分组的全部比特以及后一个分组的相应比特会出错<br> 加密不支持并行运算</td><td>CRYPRTREC推荐 《应用密码学》推荐</td></tr><tr><td>CFB模式</td><td>不需要填充<br> 支持并行计算（仅解密）<br> 能够解密任意密文分组</td><td>加密不支持并行计算<br> 对包含某些错误比特的密文进行解密时，第一个分组的全部比特以及后一个分组的相应比特会出错<br> 不能抵御重放攻击</td><td>CRYPRTREC推荐</td></tr><tr><td>OFB模式</td><td>不需要填充<br> 可事先进行加密、解密的准备 <br> 加密、解密使用相同结构 <br> 对包含某些错误比特的密文进行解密时，只有明文中相对应的比特会出错</td><td>不支持并行计算 <br> 主动攻击者反转密文分组中的某些比特时，明文分组中相对应的比特也会被反转</td><td>CRYPRTREC推荐</td></tr><tr><td>CTR模式</td><td>不需要填充<br> 可事先进行加密、解密的准备 <br> 加密、解密使用相同结构 <br> 对包含某些错误比特的密文进行解密时，只有明文中相对应的比特会出错 <br> 支持并行计算（加密、解密）</td><td>主动攻击者反转密文分组中的某些比特时，明文分组中相对应的比特也会被反转</td><td>CRYPRTREC推荐 《应用密码学》推荐</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分组密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AES 加密算法的实现</title>
      <link href="/2018/06/02/aes-jia-mi-suan-fa-de-shi-xian/"/>
      <url>/2018/06/02/aes-jia-mi-suan-fa-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="AES加密常用的概念"><a href="#AES加密常用的概念" class="headerlink" title="AES加密常用的概念"></a>AES加密常用的概念</h2><ul><li><p>加密模式</p><ul><li><strong>ECB模式</strong> 全称Electronic Codebook模式，译为电子密码本模式</li><li><strong>CBC模式</strong> 全称Cipher Block Chaining模式，译为密文分组链接模式</li><li><strong>CFB模式</strong> 全称Cipher FeedBack模式，译为密文反馈模式</li><li><strong>OFB模式</strong> 全称Output Feedback模式，译为输出反馈模式。</li><li><strong>CTR模式</strong> 全称Counter模式，译为计数器模式。</li></ul></li><li><p>初始向量</p><p>当加密第一个明文分组时，由于不存在 “前一个密文分组”，因此需要事先准备一个长度为一个分组的比特序列来代替 “前一个密文分组”，这个比特序列称为初始化向量(InitializationVector)，通常缩写为 IV。</p></li><li><p>填充方式</p><p>当明文长度不为分组长度的整数倍时，需要在最后一个分组中填充一些数据使其凑满一个分组长度。</p><ul><li><p>NoPadding</p><p>API或算法本身不对数据进行处理，加密数据由加密双方约定填补算法。例如若对字符串数据进行加解密，可以补充\0或者空格，然后trim</p></li><li><p>PKCS5Padding</p><p>加密前：数据字节长度对8取余，余数为m，若m&gt;0,则补足8-m个字节，字节数值为8-m，即差几个字节就补几个字节，字节数值即为补充的字节数，若为0则补充8个字节的8</p><p>解密后：取最后一个字节，值为m，则从数据尾部删除m个字节，剩余数据即为加密前的原文。</p><p>加密字符串为为AAA，则补位为AAA55555;加密字符串为BBBBBB，则补位为BBBBBB22；加密字符串为CCCCCCCC，则补位为CCCCCCCC88888888。</p></li><li><p>PKCS7Padding</p><p>PKCS7Padding 的填充方式和PKCS5Padding 填充方式一样。只是加密块的字节数不同。PKCS5Padding明确定义了加密块是8字节，PKCS7Padding加密快可以是1-255之间。</p></li></ul></li></ul><h2 id="实现-AES-加密和解密"><a href="#实现-AES-加密和解密" class="headerlink" title="实现 AES 加密和解密"></a>实现 AES 加密和解密</h2><p>使用CBC模式+PKCS7 填充方式实现AES的加密和解密</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bytes"</span>    <span class="token string">"crypto/cipher"</span>    <span class="token string">"crypto/aes"</span>    <span class="token string">"encoding/base64"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">PKCS7Padding</span><span class="token punctuation">(</span>ciphertext <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> blockSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    padding <span class="token operator">:=</span> blockSize <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span> <span class="token operator">%</span> blockSize    padtext <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token function">byte</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> padding<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> padtext<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">PKCS7UnPadding</span><span class="token punctuation">(</span>origData <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span>    unpadding <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>origData<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> origData<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">(</span>length <span class="token operator">-</span> unpadding<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AesEncrypt</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    blockSize <span class="token operator">:=</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    origData <span class="token operator">=</span> <span class="token function">PKCS7Padding</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> blockSize<span class="token punctuation">)</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCEncrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span>blockSize<span class="token punctuation">]</span><span class="token punctuation">)</span>    crypted <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> crypted<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AesDecrypt</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    blockSize <span class="token operator">:=</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCDecrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span>blockSize<span class="token punctuation">]</span><span class="token punctuation">)</span>    origData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>crypted<span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> crypted<span class="token punctuation">)</span>    origData <span class="token operator">=</span> <span class="token function">PKCS7UnPadding</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> origData<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"0123456789abcdef"</span><span class="token punctuation">)</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AesEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    origData<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AesDecrypt</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ go run aes.gowem0Upqsl5MBD0Z39jWO/g<span class="token operator">==</span>hello world</code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AES加密算法原理</title>
      <link href="/2018/06/02/aes-jia-mi-suan-fa-yuan-li/"/>
      <url>/2018/06/02/aes-jia-mi-suan-fa-yuan-li/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>AES加密算法原理</p><p>AES是作为DES的替代标准出现的，全称Advanced Encryption Standard，即：高级加密标准。AES加密算法，经历了公开的选拔，最终2000年，由比利时密码学家Joan Daemen和Vincent Rijmen设计的Rijndael算法被选中，成为了AES标准。<br>　　AES明文分组长度为128位，即16个字节，密钥长度可以为16个字节、24个字节、或32个字节，即128位密钥、192位密钥、或256位密钥。  　　</p><h2 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h2><p>　　AES中没有使用Feistel网络，其结构称为SPN结构。<br>　　<br>　　和DES相同，AES也由多个轮组成，其中每个轮分为SubBytes、ShiftRows、MixColumns、AddRoundKey 4个步骤，即：字节代替、行移位、列混淆和轮密钥加。根据密钥长度不同，所需轮数也不同，128位、192位、256位密钥，分别需要10轮、12轮和14轮。第1轮之前有一次AddRoundKey，即轮密钥加，可以视为第0轮；之后1至N-1轮，执行SubBytes、ShiftRows、MixColumns、AddRoundKey；最后一轮仅包括：SubBytes、MixColumns、AddRoundKey。<br>　　<br>AES总体结构示意图：<br>　　<br><img src="http://upload-images.jianshu.io/upload_images/11383699-a0117050f6ef8539.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构示意图"></p><h3 id="加密整体流程"><a href="#加密整体流程" class="headerlink" title="加密整体流程"></a>加密整体流程</h3><p>加密的代码实现：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">encryptBlockGo</span><span class="token punctuation">(</span>xk <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint32</span><span class="token punctuation">,</span> dst<span class="token punctuation">,</span> src <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> s0<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">,</span> t0<span class="token punctuation">,</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3 <span class="token builtin">uint32</span>    <span class="token comment">//按4x4矩阵排列</span>    s0 <span class="token operator">=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    s1 <span class="token operator">=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    s2 <span class="token operator">=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    s3 <span class="token operator">=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 第1次轮密钥加</span>    s0 <span class="token operator">^=</span> xk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    s1 <span class="token operator">^=</span> xk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    s2 <span class="token operator">^=</span> xk<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    s3 <span class="token operator">^=</span> xk<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token comment">//nr为中间重复轮数</span>    <span class="token comment">//例如128位密钥，44字子密钥，此处为9轮</span>    <span class="token comment">//-2位去除开头和结尾轮</span>    nr <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>xk<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">2</span>     <span class="token comment">//4表示已使用了4个字子密钥</span>    k <span class="token operator">:=</span> <span class="token number">4</span>    <span class="token keyword">for</span> r <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> nr<span class="token punctuation">;</span> r<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment">//此处代码包括字节代替、行移位、列混淆、轮密钥加</span>        t0 <span class="token operator">=</span> xk<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> te0<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s0<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te1<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s1<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te2<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s2<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te3<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">]</span>        t1 <span class="token operator">=</span> xk<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> te0<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s1<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te1<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s2<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te2<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s3<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te3<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">]</span>        t2 <span class="token operator">=</span> xk<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> te0<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s2<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te1<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s3<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te2<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s0<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te3<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span>        t3 <span class="token operator">=</span> xk<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> te0<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s3<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te1<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s0<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te2<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s1<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> te3<span class="token punctuation">[</span><span class="token function">uint8</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">]</span>        k <span class="token operator">+=</span> <span class="token number">4</span>        s0<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3 <span class="token operator">=</span> t0<span class="token punctuation">,</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3    <span class="token punctuation">}</span>    <span class="token comment">//最后一轮仅包括字节代替、行移位、轮密钥加</span>    <span class="token comment">//此处为字节代替和行移位</span>    s0 <span class="token operator">=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t0<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t1<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t2<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t3<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    s1 <span class="token operator">=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t1<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t2<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t3<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t0<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    s2 <span class="token operator">=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t2<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t3<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t0<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t1<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    s3 <span class="token operator">=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t3<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t0<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t1<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sbox0<span class="token punctuation">[</span>t2<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">//轮密钥加</span>    s0 <span class="token operator">^=</span> xk<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span>    s1 <span class="token operator">^=</span> xk<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>    s2 <span class="token operator">^=</span> xk<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>    s3 <span class="token operator">^=</span> xk<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token comment">//输出</span>    dst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byte</span><span class="token punctuation">(</span>s0<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s0<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s0<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span>    dst<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byte</span><span class="token punctuation">(</span>s1<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s1<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s1<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    dst<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byte</span><span class="token punctuation">(</span>s2<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s2<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s2<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    dst<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byte</span><span class="token punctuation">(</span>s3<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s3<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s3<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h3><p>Nk表示初始密钥的字数，一个字为4个字节，以16字节初始密钥为例，初始密钥共计4个字。AES加密过程共计需Nk+7个子密钥，即4(Nk + 7)个字，以16字节初始密钥为例，共计需11个子密钥，44个字。其中前Nk个字作为种子密钥，由初始密钥填充。以16字节初始密钥为例，前4个字，由初始密钥填充。之后的每个字，W[i]等于前边一个字W[i-1]与Nk个字之前的字W[i-Nk]异或。但是对于Nk整数倍位置的字，在异或之前先对W[i-1]做如下变换：字节循环移位、S盒变换，并异或轮常数。</p><p>密钥扩展示意图</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-ddb89aa1d456e90d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><pre class="language-golang" data-language="golang"><code class="language-golang">func expandKeyGo(key []byte, enc, dec []uint32) {    // Encryption key setup.    var i int    nk := len(key) / 4    for i = 0; i &lt; nk; i++ {        //其中前Nk个字作为种子密钥，由初始密钥填充        //以16字节初始密钥为例，前4个字，由初始密钥填充        enc[i] = uint32(key[4*i])&lt;&lt;24 | uint32(key[4*i+1])&lt;&lt;16 | uint32(key[4*i+2])&lt;&lt;8 | uint32(key[4*i+3])    }    for ; i &lt; len(enc); i++ {        t := enc[i-1]        if i%nk == 0 {            //但是对于Nk整数倍位置的字，在异或之前先对W[i-1]做如下变换：字节循环移位、S盒变换，并异或轮常数            t = subw(rotw(t)) ^ (uint32(powx[i/nk-1]) &lt;&lt; 24)        } else if nk &gt; 6 &amp;&amp; i%nk == 4 {            t = subw(t)        }        //之后的每个字，W[i]等于前边一个字W[i-1]与Nk个字之前的字W[i-Nk]异或        enc[i] = enc[i-nk] ^ t    }    //enc为加密子密钥组    //dec为解密子密钥组，dec为enc逆序    if dec == nil {        return    }    n := len(enc)    for i := 0; i &lt; n; i += 4 {        ei := n - i - 4        for j := 0; j &lt; 4; j++ {            x := enc[ei+j]            if i &gt; 0 &amp;&amp; i+4 &lt; n {                x = td0[sbox0[x&gt;&gt;24]] ^ td1[sbox0[x&gt;&gt;16&amp;0xff]] ^ td2[sbox0[x&gt;&gt;8&amp;0xff]] ^ td3[sbox0[x&amp;0xff]]            }            dec[i+j] = x        }    }}</code></pre><h3 id="字节代替SubBytes"><a href="#字节代替SubBytes" class="headerlink" title="字节代替SubBytes"></a>字节代替SubBytes</h3><p>AES定义了一个S盒，它由16x16个字节组成的矩阵，包含了8位所能表示的256个数的一个置换表。AES的分组长度128位，即16字节，每个字节高4位作为行值、低4位作为列值，从S盒中查找指定行、列的值作为输出。AES输入的16个字节，每个字节按上述方式映射为新的字节，即字节代替。</p><h3 id="行移位ShiftRows"><a href="#行移位ShiftRows" class="headerlink" title="行移位ShiftRows"></a>行移位ShiftRows</h3><p>AES输入的16个字节组成4x4字节矩阵，行移位即：第1行保持不变，第2行循环左移1个字节，第3行循环左移2个字节，第4行循环左移3个字节。逆向行移位为后3行做行移位的反向操作，如第2行循环右移1个字节，其他行类似处理。</p><p>行移位示意图如下<br><img src="http://upload-images.jianshu.io/upload_images/11383699-f36bd831076a18ed.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="列混淆MixColumns"><a href="#列混淆MixColumns" class="headerlink" title="列混淆MixColumns"></a>列混淆MixColumns</h3><p>　　列混淆和逆向列混淆，实际上是使用乘法矩阵，但是其加法和乘法均为定义在有限域上的加法和乘法。</p><p>　　如下为正向列混淆：<br>　　<br>　　<img src="http://upload-images.jianshu.io/upload_images/11383699-0aec16ddb3741724.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br>　　<br>　　如下为逆向列混淆：<br>　　<br>　　<img src="http://upload-images.jianshu.io/upload_images/11383699-a19bb2648d394781.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image">  　　</p><h3 id="轮密钥加AddRoundKey"><a href="#轮密钥加AddRoundKey" class="headerlink" title="轮密钥加AddRoundKey"></a>轮密钥加AddRoundKey</h3><p>轮密钥加，即128位输入与128位轮密钥做异或运算。</p><h2 id="动画演示AES"><a href="#动画演示AES" class="headerlink" title="动画演示AES"></a>动画演示AES</h2><p><a href="https://coolshell.cn/articles/3161.html">https://coolshell.cn/articles/3161.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DES、3DES 加密算法的调用</title>
      <link href="/2018/06/02/des-3des-jia-mi-suan-fa-de-diao-yong/"/>
      <url>/2018/06/02/des-3des-jia-mi-suan-fa-de-diao-yong/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="DES加密常用的概念"><a href="#DES加密常用的概念" class="headerlink" title="DES加密常用的概念"></a>DES加密常用的概念</h2><ul><li><p>加密模式</p><ul><li><strong>ECB模式</strong> 全称Electronic Codebook模式，译为电子密码本模式</li><li><strong>CBC模式</strong> 全称Cipher Block Chaining模式，译为密文分组链接模式</li><li><strong>CFB模式</strong> 全称Cipher FeedBack模式，译为密文反馈模式</li><li><strong>OFB模式</strong> 全称Output Feedback模式，译为输出反馈模式。</li><li><strong>CTR模式</strong> 全称Counter模式，译为计数器模式。</li></ul></li><li><p>初始向量</p><p>当加密第一个明文分组时，由于不存在 “前一个密文分组”，因此需要事先准备一个长度为一个分组的比特序列来代替 “前一个密文分组”，这个比特序列称为初始化向量(InitializationVector)，通常缩写为 IV。</p></li><li><p>填充方式</p><p>当明文长度不为分组长度的整数倍时，需要在最后一个分组中填充一些数据使其凑满一个分组长度。</p><ul><li><p>NoPadding</p><p>API或算法本身不对数据进行处理，加密数据由加密双方约定填补算法。例如若对字符串数据进行加解密，可以补充\0或者空格，然后trim</p></li><li><p>PKCS5Padding</p><p>加密前：数据字节长度对8取余，余数为m，若m&gt;0,则补足8-m个字节，字节数值为8-m，即差几个字节就补几个字节，字节数值即为补充的字节数，若为0则补充8个字节的8</p><p>解密后：取最后一个字节，值为m，则从数据尾部删除m个字节，剩余数据即为加密前的原文。</p><p>加密字符串为为AAA，则补位为AAA55555;加密字符串为BBBBBB，则补位为BBBBBB22；加密字符串为CCCCCCCC，则补位为CCCCCCCC88888888。</p></li><li><p>PKCS7Padding</p><p>PKCS7Padding 的填充方式和PKCS5Padding 填充方式一样。只是加密块的字节数不同。PKCS5Padding明确定义了加密块是8字节，PKCS7Padding加密快可以是1-255之间。</p></li></ul></li></ul><h2 id="实现-DES-加密和解密"><a href="#实现-DES-加密和解密" class="headerlink" title="实现 DES 加密和解密"></a>实现 DES 加密和解密</h2><p>采用3DES、CBC模式、pkcs5padding，初始向量用key充当；另外，对于zero padding，还得约定好，对于数据长度刚好是block size的整数倍时，是否需要额外填充。</p><h3 id="crypto-x2F-des包"><a href="#crypto-x2F-des包" class="headerlink" title="crypto/des包"></a>crypto/des包</h3><p>Go中crypto/des包实现了 Data Encryption Standard (DES) and the Triple Data Encryption Algorithm (TDEA)。<a href="https://golang.org/pkg/crypto/des/">查看该包文档</a>，发现相当简单：定义了DES块大小（8bytes），定义了一个KeySizeError。另外定义了两个我们需要特别关注的函数，即</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewCipher</span><span class="token punctuation">(</span>key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">NewTripleDESCipher</span><span class="token punctuation">(</span>key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><p>他们都是用来获得一个cipher.Block。从名字可以很容易知道，DES使用NewCipher，3DES使用NewTripleDESCipher。参数都是密钥（key）</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>使用DES加密 <code>（des.NewCipher）</code> ，加密模式为CBC <code>（cipher.NewCBCEncrypter(block, key)）</code>，填充方式 <code>PKCS5Padding</code></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DesEncrypt</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> des<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    origData <span class="token operator">=</span> <span class="token function">PKCS5Padding</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCEncrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    crypted <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> crypted<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DesDecrypt</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> des<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCDecrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    origData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>crypted<span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> crypted<span class="token punctuation">)</span>    origData <span class="token operator">=</span> <span class="token function">PKCS5UnPadding</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> origData<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="des加密的详细代码"><a href="#des加密的详细代码" class="headerlink" title="des加密的详细代码"></a>des加密的详细代码</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bytes"</span>    <span class="token string">"crypto/cipher"</span>    <span class="token string">"crypto/des"</span>    <span class="token string">"encoding/base64"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"12345678"</span><span class="token punctuation">)</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">DesEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    origData<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">DesDecrypt</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">DesEncrypt</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> des<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    origData <span class="token operator">=</span> <span class="token function">PKCS5Padding</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCEncrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    crypted <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> crypted<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">DesDecrypt</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> des<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCDecrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    origData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>crypted<span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> crypted<span class="token punctuation">)</span>    origData <span class="token operator">=</span> <span class="token function">PKCS5UnPadding</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> origData<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">PKCS5Padding</span><span class="token punctuation">(</span>ciphertext <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> blockSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    padding <span class="token operator">:=</span> blockSize <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token operator">%</span>blockSize    padtext <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token function">byte</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> padding<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> padtext<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">PKCS5UnPadding</span><span class="token punctuation">(</span>origData <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span>    <span class="token comment">// 去掉最后一个字节 unpadding 次</span>    unpadding <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>origData<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> origData<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">(</span>length <span class="token operator">-</span> unpadding<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="3DES-加密及解密"><a href="#3DES-加密及解密" class="headerlink" title="3DES 加密及解密"></a>3DES 加密及解密</h2><h3 id="加密-1"><a href="#加密-1" class="headerlink" title="加密"></a>加密</h3><p>对比DES，发现只是换了NewTripleDESCipher。不过，需要注意的是，密钥长度必须24byte，否则直接返回错误。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TripleDesEncrypt</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> des<span class="token punctuation">.</span><span class="token function">NewTripleDESCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    origData <span class="token operator">=</span> <span class="token function">PKCS5Padding</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCEncrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    crypted <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> crypted<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 3DES加解密</span>    key <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"123456789012345678901234"</span><span class="token punctuation">)</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">TripleDesEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    origData<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">TripleDesDecrypt</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>如果我们把主函数中 <code>key</code> 改为25位的 <code>1234567890123456789012345</code> 运行 <code>go run 3des.go</code>，提示出现如下错误：</p><pre class="language-bash" data-language="bash"><code class="language-bash">go run 3des.gopanic: crypto/des: invalid key size <span class="token number">25</span>goroutine <span class="token number">1</span> <span class="token punctuation">[</span>running<span class="token punctuation">]</span>:</code></pre><h3 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bytes"</span>    <span class="token string">"crypto/cipher"</span>    <span class="token string">"crypto/des"</span>    <span class="token string">"encoding/base64"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 3DES加解密</span>    key <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"123456789012345678901234"</span><span class="token punctuation">)</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">TripleDesEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    origData<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">TripleDesDecrypt</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 3DES加密</span><span class="token keyword">func</span> <span class="token function">TripleDesEncrypt</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> des<span class="token punctuation">.</span><span class="token function">NewTripleDESCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    origData <span class="token operator">=</span> <span class="token function">PKCS5Padding</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCEncrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    crypted <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> crypted<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// 3DES解密</span><span class="token keyword">func</span> <span class="token function">TripleDesDecrypt</span><span class="token punctuation">(</span>crypted<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> des<span class="token punctuation">.</span><span class="token function">NewTripleDESCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    blockMode <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCBCDecrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    origData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>crypted<span class="token punctuation">)</span><span class="token punctuation">)</span>    blockMode<span class="token punctuation">.</span><span class="token function">CryptBlocks</span><span class="token punctuation">(</span>origData<span class="token punctuation">,</span> crypted<span class="token punctuation">)</span>    origData <span class="token operator">=</span> <span class="token function">PKCS5UnPadding</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span>    <span class="token keyword">return</span> origData<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">PKCS5Padding</span><span class="token punctuation">(</span>ciphertext <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> blockSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    padding <span class="token operator">:=</span> blockSize <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token operator">%</span>blockSize    padtext <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token function">byte</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> padding<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> padtext<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">PKCS5UnPadding</span><span class="token punctuation">(</span>origData <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>origData<span class="token punctuation">)</span>    <span class="token comment">// 去掉最后一个字节 unpadding 次</span>    unpadding <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>origData<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> origData<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">(</span>length <span class="token operator">-</span> unpadding<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DES 3DES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DES、3DES加密算法</title>
      <link href="/2018/06/02/des-3des-jia-mi-suan-fa/"/>
      <url>/2018/06/02/des-3des-jia-mi-suan-fa/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>DES加密算法，为对称加密算法中的一种。70年代初由IBM研发，后1977年被美国国家标准局采纳为数据加密标准，即DES全称的由来：Data Encryption Standard。对称加密算法，是相对于非对称加密算法而言的。两者区别在于，对称加密在加密和解密时使用同一密钥，而非对称加密在加密和解密时使用不同的密钥，即公钥和私钥。常见的DES、3DES、AES均为对称加密算法，而RSA、椭圆曲线加密算法，均为非对称加密算法。</p><p>DES是以64比特的明文为一个单位来进行加密的，超过64比特的数据，要求按固定的64比特的大小分组，分组有很多模式，后续单独总结，暂时先介绍DES加密算法。DES使用的密钥长度为64比特，但由于每隔7个比特设置一个奇偶校验位，因此其密钥长度实际为56比特。奇偶校验为最简单的错误检测码，即根据一组二进制代码中1的个数是奇数或偶数来检测错误。</p><h2 id="Feistel网络"><a href="#Feistel网络" class="headerlink" title="Feistel网络"></a>Feistel网络</h2><p>DES的基本结构，由IBM公司的Horst Feistel设计，因此称Feistel网络。在Feistel网络中，加密的每个步骤称为轮，经过初始置换后的64位明文，进行了16轮Feistel轮的加密过程，最后经过终结置换后形成最终的64位密文。如下为Feistel网络的示意图：</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-f1050aac829e53d4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>64位明文被分为左、右两部分处理，右侧数据和子密钥经过轮函数f生成用于加密左侧数据的比特序列，与左侧数据异或运算，运算结果输出为加密后的左侧，右侧数据则直接输出为右侧。<br>　　其中子密钥为本轮加密使用的密钥，每次Feistel均使用不同的子密钥。子密钥的计算，以及轮函数的细节，稍后下文介绍。由于一次Feistel轮并不会加密右侧，因此需要将上一轮输出后的左右两侧对调后，重复Feistel轮的过程，DES算法共计进行16次Feistel轮，最后一轮输出后左右两侧无需对调。</p><p>DES加密和解密的过程一致，均使用Feistel网络实现，区别仅在于解密时，密文作为输入，并逆序使用子密钥。<br>go标准库中DES算法实现如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">cryptBlock</span><span class="token punctuation">(</span>subkeys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> dst<span class="token punctuation">,</span> src <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> decrypt <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b <span class="token operator">:=</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>    <span class="token comment">//初始置换</span>    b <span class="token operator">=</span> <span class="token function">permuteInitialBlock</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>b<span class="token operator">&gt;&gt;</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint32</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    left <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span>    right <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>right <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span>    <span class="token comment">//共计16次feistel轮</span>    <span class="token keyword">if</span> decrypt <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token function">feistel</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> subkeys<span class="token punctuation">[</span><span class="token number">15</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> subkeys<span class="token punctuation">[</span><span class="token number">15</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token function">feistel</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> subkeys<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> subkeys<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    left <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>    right <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>right <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// 左右切换并执行最终置换</span>    preOutput <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">uint64</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>    binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">PutUint64</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token function">permuteFinalBlock</span><span class="token punctuation">(</span>preOutput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>DES算法共计进行16次Feistel轮，上面却只有循环了8次<br>这是由于 feistel 方法中一次操作了左右两个参数，所以循环次数减半</p></blockquote><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">feistel</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token builtin">uint32</span><span class="token punctuation">,</span> k0<span class="token punctuation">,</span> k1 <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>lout<span class="token punctuation">,</span> rout <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> t <span class="token builtin">uint32</span>    t <span class="token operator">=</span> r <span class="token operator">^</span> <span class="token function">uint32</span><span class="token punctuation">(</span>k0<span class="token operator">&gt;&gt;</span><span class="token number">32</span><span class="token punctuation">)</span>    l <span class="token operator">^=</span> feistelBox<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">uint32</span><span class="token punctuation">(</span>k0<span class="token punctuation">)</span>    l <span class="token operator">^=</span> feistelBox<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span>    t <span class="token operator">=</span> l <span class="token operator">^</span> <span class="token function">uint32</span><span class="token punctuation">(</span>k1<span class="token operator">&gt;&gt;</span><span class="token number">32</span><span class="token punctuation">)</span>    r <span class="token operator">^=</span> feistelBox<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">uint32</span><span class="token punctuation">(</span>k1<span class="token punctuation">)</span>    r <span class="token operator">^=</span> feistelBox<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> l<span class="token punctuation">,</span> r<span class="token punctuation">}</span></code></pre><h3 id="初始置换和终结置换"><a href="#初始置换和终结置换" class="headerlink" title="初始置换和终结置换"></a>初始置换和终结置换</h3><p>进入Feistel轮之前，64位明文需做一次初始置换。Feistel轮结束后，需做一次反向操作，即终结置换。</p><p>go标准库中使用的初始置换表和终结置换表如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 初始置换表</span><span class="token keyword">var</span> initialPermutation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span>    <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span>    <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// 终结置换表</span><span class="token keyword">var</span> finalPermutation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span>    <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span>    <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span>    <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span>    <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span>    <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span>    <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span>    <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span>    <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="子密钥的计算"><a href="#子密钥的计算" class="headerlink" title="子密钥的计算"></a>子密钥的计算</h3><p>DES初始密钥为64位，其中8位用于奇偶校验，实际密钥为56位，64位初始密钥经过PC-1密钥置换后，生成56位串。经PC-1置换后56位的串，分为左右两部分，各28位，分别左移1位，形成C0和D0，C0和D0合并成56位，经PC-2置换后生成48位子密钥K0。C0和D0分别左移1位，形成C1和D1，C1和D1合并成56位，经PC-2置换后生成子密钥K1。以此类推，直至生成子密钥K15。但注意每轮循环左移的位数，有如下规定：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> ksRotations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/11383699-69ffa70d75344238.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>DES子密钥计算的代码如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// creates 16 56-bit subkeys from the original key</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>desCipher<span class="token punctuation">)</span> <span class="token function">generateSubkeys</span><span class="token punctuation">(</span>keyBytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// PC-1密钥置换，生成56位串</span>    key <span class="token operator">:=</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span>    permutedKey <span class="token operator">:=</span> <span class="token function">permuteBlock</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> permutedChoice1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 56位串分左右两部分，各28位</span>    leftRotations <span class="token operator">:=</span> <span class="token function">ksRotate</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>permutedKey <span class="token operator">&gt;&gt;</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    rightRotations <span class="token operator">:=</span> <span class="token function">ksRotate</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>permutedKey<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment">// 生成子密钥</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment">//合并左右两部分，之后PC-2置换</span>        pc2Input <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>leftRotations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">28</span> <span class="token operator">|</span> <span class="token function">uint64</span><span class="token punctuation">(</span>rightRotations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>subkeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token function">permuteBlock</span><span class="token punctuation">(</span>pc2Input<span class="token punctuation">,</span> permutedChoice2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h2><p>DES是一个经典的对称加密算法，但也缺陷明显，即56位的密钥安全性不足，已被证实可以在短时间内破解。为解决此问题，出现了3DES，也称Triple DES，3DES为DES向AES过渡的加密算法，它使用3条56位的密钥对数据进行三次加密。为了兼容普通的DES，3DES并没有直接使用 <code>加密-&gt;加密-&gt;加密</code> 的方式，而是采用了<code>加密-&gt;解密-&gt;加密</code> 的方式。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-15c57c1f6159f7a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>当三重密钥均相同时，前两步相互抵消，相当于仅实现了一次加密，因此可实现对普通DES加密算法的兼容。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-870a69a63e62bcd5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>3DES解密过程，与加密过程相反，即逆序使用密钥。是以密钥3、密钥2、密钥1的顺序执行 <code>解密-&gt;加密-&gt;解密</code>。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-b4e5e0dd87674898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>相比DES，3DES因密钥长度变长，安全性有所提高，但其处理速度不高。因此又出现了AES加密算法，AES较于3DES速度更快、安全性更高。</p><h1 id="006-DES、3DES加密算法"><a href="#006-DES、3DES加密算法" class="headerlink" title="006 DES、3DES加密算法"></a>006 DES、3DES加密算法</h1><p>DES加密算法，为对称加密算法中的一种。70年代初由IBM研发，后1977年被美国国家标准局采纳为数据加密标准，即DES全称的由来：Data Encryption Standard。对称加密算法，是相对于非对称加密算法而言的。两者区别在于，对称加密在加密和解密时使用同一密钥，而非对称加密在加密和解密时使用不同的密钥，即公钥和私钥。常见的DES、3DES、AES均为对称加密算法，而RSA、椭圆曲线加密算法，均为非对称加密算法。  </p><p>DES是以64比特的明文为一个单位来进行加密的，超过64比特的数据，要求按固定的64比特的大小分组，分组有很多模式，后续单独总结，暂时先介绍DES加密算法。DES使用的密钥长度为64比特，但由于每隔7个比特设置一个奇偶校验位，因此其密钥长度实际为56比特。奇偶校验为最简单的错误检测码，即根据一组二进制代码中1的个数是奇数或偶数来检测错误。</p><h2 id="Feistel网络-1"><a href="#Feistel网络-1" class="headerlink" title="Feistel网络"></a>Feistel网络</h2><p>DES的基本结构，由IBM公司的Horst Feistel设计，因此称Feistel网络。在Feistel网络中，加密的每个步骤称为轮，经过初始置换后的64位明文，进行了16轮Feistel轮的加密过程，最后经过终结置换后形成最终的64位密文。如下为Feistel网络的示意图：</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-f1050aac829e53d4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>64位明文被分为左、右两部分处理，右侧数据和子密钥经过轮函数f生成用于加密左侧数据的比特序列，与左侧数据异或运算，运算结果输出为加密后的左侧，右侧数据则直接输出为右侧。<br>　　其中子密钥为本轮加密使用的密钥，每次Feistel均使用不同的子密钥。子密钥的计算，以及轮函数的细节，稍后下文介绍。由于一次Feistel轮并不会加密右侧，因此需要将上一轮输出后的左右两侧对调后，重复Feistel轮的过程，DES算法共计进行16次Feistel轮，最后一轮输出后左右两侧无需对调。</p><p>DES加密和解密的过程一致，均使用Feistel网络实现，区别仅在于解密时，密文作为输入，并逆序使用子密钥。<br>go标准库中DES算法实现如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">cryptBlock</span><span class="token punctuation">(</span>subkeys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> dst<span class="token punctuation">,</span> src <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> decrypt <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b <span class="token operator">:=</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>    <span class="token comment">//初始置换</span>    b <span class="token operator">=</span> <span class="token function">permuteInitialBlock</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>b<span class="token operator">&gt;&gt;</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint32</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    left <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span>    right <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>right <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span>    <span class="token comment">//共计16次feistel轮</span>    <span class="token keyword">if</span> decrypt <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token function">feistel</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> subkeys<span class="token punctuation">[</span><span class="token number">15</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> subkeys<span class="token punctuation">[</span><span class="token number">15</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token function">feistel</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> subkeys<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> subkeys<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    left <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>    right <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>right <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// 左右切换并执行最终置换</span>    preOutput <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">uint64</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>    binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">PutUint64</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token function">permuteFinalBlock</span><span class="token punctuation">(</span>preOutput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>DES算法共计进行16次Feistel轮，上面却只有循环了8次<br>这是由于 feistel 方法中一次操作了左右两个参数，所以循环次数减半</p></blockquote><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">feistel</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token builtin">uint32</span><span class="token punctuation">,</span> k0<span class="token punctuation">,</span> k1 <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>lout<span class="token punctuation">,</span> rout <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> t <span class="token builtin">uint32</span>    t <span class="token operator">=</span> r <span class="token operator">^</span> <span class="token function">uint32</span><span class="token punctuation">(</span>k0<span class="token operator">&gt;&gt;</span><span class="token number">32</span><span class="token punctuation">)</span>    l <span class="token operator">^=</span> feistelBox<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">uint32</span><span class="token punctuation">(</span>k0<span class="token punctuation">)</span>    l <span class="token operator">^=</span> feistelBox<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span>    t <span class="token operator">=</span> l <span class="token operator">^</span> <span class="token function">uint32</span><span class="token punctuation">(</span>k1<span class="token operator">&gt;&gt;</span><span class="token number">32</span><span class="token punctuation">)</span>    r <span class="token operator">^=</span> feistelBox<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">uint32</span><span class="token punctuation">(</span>k1<span class="token punctuation">)</span>    r <span class="token operator">^=</span> feistelBox<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span> <span class="token operator">^</span>        feistelBox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> l<span class="token punctuation">,</span> r<span class="token punctuation">}</span></code></pre><h3 id="初始置换和终结置换-1"><a href="#初始置换和终结置换-1" class="headerlink" title="初始置换和终结置换"></a>初始置换和终结置换</h3><p>进入Feistel轮之前，64位明文需做一次初始置换。Feistel轮结束后，需做一次反向操作，即终结置换。</p><p>go标准库中使用的初始置换表和终结置换表如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 初始置换表</span><span class="token keyword">var</span> initialPermutation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span>    <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span>    <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// 终结置换表</span><span class="token keyword">var</span> finalPermutation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span>    <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span>    <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span>    <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span>    <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span>    <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span>    <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span>    <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span>    <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="子密钥的计算-1"><a href="#子密钥的计算-1" class="headerlink" title="子密钥的计算"></a>子密钥的计算</h3><p>DES初始密钥为64位，其中8位用于奇偶校验，实际密钥为56位，64位初始密钥经过PC-1密钥置换后，生成56位串。经PC-1置换后56位的串，分为左右两部分，各28位，分别左移1位，形成C0和D0，C0和D0合并成56位，经PC-2置换后生成48位子密钥K0。C0和D0分别左移1位，形成C1和D1，C1和D1合并成56位，经PC-2置换后生成子密钥K1。以此类推，直至生成子密钥K15。但注意每轮循环左移的位数，有如下规定：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> ksRotations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/11383699-69ffa70d75344238.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>DES子密钥计算的代码如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// creates 16 56-bit subkeys from the original key</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>desCipher<span class="token punctuation">)</span> <span class="token function">generateSubkeys</span><span class="token punctuation">(</span>keyBytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// PC-1密钥置换，生成56位串</span>    key <span class="token operator">:=</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span>    permutedKey <span class="token operator">:=</span> <span class="token function">permuteBlock</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> permutedChoice1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 56位串分左右两部分，各28位</span>    leftRotations <span class="token operator">:=</span> <span class="token function">ksRotate</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>permutedKey <span class="token operator">&gt;&gt;</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    rightRotations <span class="token operator">:=</span> <span class="token function">ksRotate</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>permutedKey<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment">// 生成子密钥</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment">//合并左右两部分，之后PC-2置换</span>        pc2Input <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>leftRotations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">28</span> <span class="token operator">|</span> <span class="token function">uint64</span><span class="token punctuation">(</span>rightRotations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>subkeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token function">permuteBlock</span><span class="token punctuation">(</span>pc2Input<span class="token punctuation">,</span> permutedChoice2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3DES-1"><a href="#3DES-1" class="headerlink" title="3DES"></a>3DES</h2><p>DES是一个经典的对称加密算法，但也缺陷明显，即56位的密钥安全性不足，已被证实可以在短时间内破解。为解决此问题，出现了3DES，也称Triple DES，3DES为DES向AES过渡的加密算法，它使用3条56位的密钥对数据进行三次加密。为了兼容普通的DES，3DES并没有直接使用 <code>加密-&gt;加密-&gt;加密</code> 的方式，而是采用了<code>加密-&gt;解密-&gt;加密</code> 的方式。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-15c57c1f6159f7a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>当三重密钥均相同时，前两步相互抵消，相当于仅实现了一次加密，因此可实现对普通DES加密算法的兼容。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-870a69a63e62bcd5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="解密-1"><a href="#解密-1" class="headerlink" title="解密"></a>解密</h3><p>3DES解密过程，与加密过程相反，即逆序使用密钥。是以密钥3、密钥2、密钥1的顺序执行 <code>解密-&gt;加密-&gt;解密</code>。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-b4e5e0dd87674898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>相比DES，3DES因密钥长度变长，安全性有所提高，但其处理速度不高。因此又出现了AES加密算法，AES较于3DES速度更快、安全性更高。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ripemd160 加密算法</title>
      <link href="/2018/06/02/ripemd160-jia-mi-suan-fa/"/>
      <url>/2018/06/02/ripemd160-jia-mi-suan-fa/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>哈希值的输出值一般是<code>16</code>进制的字符串。而<code>16</code>进制字符串，每两个字符占一个字节。我们知道，一个字节<code>=8bit</code>.</p><p>以<code>sha256</code>为例：<br><code>256bit-&gt;64</code>位<code>16</code>进制字符。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"crypto/sha256"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    hasher <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    hasher<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"The quick brown fox jumps over the lazy dog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    hashBytes <span class="token operator">:=</span> hasher<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>    hashString <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> hashBytes<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>hashString<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">$ d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592</code></pre><p>而<code>ripemd</code>:<br><code>160bit-&gt;40</code>位<code>16</code>进制字符。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src  <span class="token function">mkdir</span> golang.org<span class="token builtin class-name">cd</span> golang.org  <span class="token function">mkdir</span> x <span class="token builtin class-name">cd</span> x  $ <span class="token function">git</span> clone <span class="token operator">&lt;</span>https://github.com/golang/crypto.git<span class="token operator">&gt;</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"golang.org/x/crypto/ripemd160"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    hasher <span class="token operator">:=</span> ripemd160<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    hasher<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"The quick brown fox jumps over the lazy dog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    hashBytes <span class="token operator">:=</span> hasher<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>    hashString <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> hashBytes<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>hashString<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">$ 37f332f68db77bd9d7edd4969571ad671cf9dd3b</code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>golang - sha256 加密算法</title>
      <link href="/2018/06/02/golang-sha256-jia-mi-suan-fa/"/>
      <url>/2018/06/02/golang-sha256-jia-mi-suan-fa/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="go-调用-sha256-加密"><a href="#go-调用-sha256-加密" class="headerlink" title="go 调用 sha256 加密"></a>go 调用 sha256 加密</h2><h3 id="字符串哈希值"><a href="#字符串哈希值" class="headerlink" title="字符串哈希值"></a>字符串哈希值</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span><span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"crypto/sha256"</span>    <span class="token string">"io"</span>    <span class="token string">"log"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 第一种调用方法</span>    sum <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span>    <span class="token comment">// 第二种调用方法</span>    h <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="文件哈希值"><a href="#文件哈希值" class="headerlink" title="文件哈希值"></a>文件哈希值</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 对文件加密</span>f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h <span class="token operator">=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>源码下载：<a href="https://github.com/didianV5/blockchain/tree/master/encryption/sha256">https://github.com/didianV5/blockchain/tree/master/encryption/sha256</a></p><h2 id="sha256-实现原理"><a href="#sha256-实现原理" class="headerlink" title="sha256 实现原理"></a>sha256 实现原理</h2><p>SHA-256 算法输入报文的最大长度不超过2^64 bit，输入按512-bit 分组进行处理，产生的输出是一个256-bit 的报文摘要。</p><ul><li><p><strong>附加填充比特</strong>：对报文进行填充使报文长度与448 模512 同余（长度=448 mod 512），填充的比特数范围是1 到512，填充比特串的最高位为1，其余位为0。就是先在报文后面加一个 1，再加很多个0，直到长度 满足 mod 512=448.为什么是448，因为448+64=512. 第二步会加上一个 64bit的 原始报文的 长度信息。</p></li><li><p><strong>附加长度值</strong> 将用64-bit 表示的初始报文（填充前）的位长度附加在步骤1 的结果后（低位字节优先）。</p></li><li><p><strong>初始化缓存</strong>：使用一个256-bit 的缓存来存放该散列函数的中间及最终结果。 该缓存表示为</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>  init0     <span class="token operator">=</span> <span class="token number">0x6A09E667</span>  init1     <span class="token operator">=</span> <span class="token number">0xBB67AE85</span>  init2     <span class="token operator">=</span> <span class="token number">0x3C6EF372</span>  init3     <span class="token operator">=</span> <span class="token number">0xA54FF53A</span>  init4     <span class="token operator">=</span> <span class="token number">0x510E527F</span>  init5     <span class="token operator">=</span> <span class="token number">0x9B05688C</span>  init6     <span class="token operator">=</span> <span class="token number">0x1F83D9AB</span>  init7     <span class="token operator">=</span> <span class="token number">0x5BE0CD19</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>处理512-bit（16 个字）报文分组序列</strong>：该算法使用了六种基本逻辑函数，由64步迭代运算组成。每步都以256-bit 缓存值ABCDEFGH 为输入，然后更新缓存内容。 每步使用一个32-bit 常数值Kt 和一个32-bit Wt。</p><ul><li>常数K为</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> _K <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint32</span><span class="token punctuation">{</span>  <span class="token number">0x428a2f98</span><span class="token punctuation">,</span>  <span class="token number">0x71374491</span><span class="token punctuation">,</span>  <span class="token number">0xb5c0fbcf</span><span class="token punctuation">,</span>  <span class="token number">0xe9b5dba5</span><span class="token punctuation">,</span>  <span class="token number">0x3956c25b</span><span class="token punctuation">,</span>  <span class="token number">0x59f111f1</span><span class="token punctuation">,</span>  <span class="token number">0x923f82a4</span><span class="token punctuation">,</span>  <span class="token number">0xab1c5ed5</span><span class="token punctuation">,</span>  <span class="token number">0xd807aa98</span><span class="token punctuation">,</span>  <span class="token number">0x12835b01</span><span class="token punctuation">,</span>  <span class="token number">0x243185be</span><span class="token punctuation">,</span>  <span class="token number">0x550c7dc3</span><span class="token punctuation">,</span>  <span class="token number">0x72be5d74</span><span class="token punctuation">,</span>  <span class="token number">0x80deb1fe</span><span class="token punctuation">,</span>  <span class="token number">0x9bdc06a7</span><span class="token punctuation">,</span>  <span class="token number">0xc19bf174</span><span class="token punctuation">,</span>  <span class="token number">0xe49b69c1</span><span class="token punctuation">,</span>  <span class="token number">0xefbe4786</span><span class="token punctuation">,</span>  <span class="token number">0x0fc19dc6</span><span class="token punctuation">,</span>  <span class="token number">0x240ca1cc</span><span class="token punctuation">,</span>  <span class="token number">0x2de92c6f</span><span class="token punctuation">,</span>  <span class="token number">0x4a7484aa</span><span class="token punctuation">,</span>  <span class="token number">0x5cb0a9dc</span><span class="token punctuation">,</span>  <span class="token number">0x76f988da</span><span class="token punctuation">,</span>  <span class="token number">0x983e5152</span><span class="token punctuation">,</span>  <span class="token number">0xa831c66d</span><span class="token punctuation">,</span>  <span class="token number">0xb00327c8</span><span class="token punctuation">,</span>  <span class="token number">0xbf597fc7</span><span class="token punctuation">,</span>  <span class="token number">0xc6e00bf3</span><span class="token punctuation">,</span>  <span class="token number">0xd5a79147</span><span class="token punctuation">,</span>  <span class="token number">0x06ca6351</span><span class="token punctuation">,</span>  <span class="token number">0x14292967</span><span class="token punctuation">,</span>  <span class="token number">0x27b70a85</span><span class="token punctuation">,</span>  <span class="token number">0x2e1b2138</span><span class="token punctuation">,</span>  <span class="token number">0x4d2c6dfc</span><span class="token punctuation">,</span>  <span class="token number">0x53380d13</span><span class="token punctuation">,</span>  <span class="token number">0x650a7354</span><span class="token punctuation">,</span>  <span class="token number">0x766a0abb</span><span class="token punctuation">,</span>  <span class="token number">0x81c2c92e</span><span class="token punctuation">,</span>  <span class="token number">0x92722c85</span><span class="token punctuation">,</span>  <span class="token number">0xa2bfe8a1</span><span class="token punctuation">,</span>  <span class="token number">0xa81a664b</span><span class="token punctuation">,</span>  <span class="token number">0xc24b8b70</span><span class="token punctuation">,</span>  <span class="token number">0xc76c51a3</span><span class="token punctuation">,</span>  <span class="token number">0xd192e819</span><span class="token punctuation">,</span>  <span class="token number">0xd6990624</span><span class="token punctuation">,</span>  <span class="token number">0xf40e3585</span><span class="token punctuation">,</span>  <span class="token number">0x106aa070</span><span class="token punctuation">,</span>  <span class="token number">0x19a4c116</span><span class="token punctuation">,</span>  <span class="token number">0x1e376c08</span><span class="token punctuation">,</span>  <span class="token number">0x2748774c</span><span class="token punctuation">,</span>  <span class="token number">0x34b0bcb5</span><span class="token punctuation">,</span>  <span class="token number">0x391c0cb3</span><span class="token punctuation">,</span>  <span class="token number">0x4ed8aa4a</span><span class="token punctuation">,</span>  <span class="token number">0x5b9cca4f</span><span class="token punctuation">,</span>  <span class="token number">0x682e6ff3</span><span class="token punctuation">,</span>  <span class="token number">0x748f82ee</span><span class="token punctuation">,</span>  <span class="token number">0x78a5636f</span><span class="token punctuation">,</span>  <span class="token number">0x84c87814</span><span class="token punctuation">,</span>  <span class="token number">0x8cc70208</span><span class="token punctuation">,</span>  <span class="token number">0x90befffa</span><span class="token punctuation">,</span>  <span class="token number">0xa4506ceb</span><span class="token punctuation">,</span>  <span class="token number">0xbef9a3f7</span><span class="token punctuation">,</span>  <span class="token number">0xc67178f2</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li>Wt 是 分组之后的报文</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>      j <span class="token operator">:=</span> i <span class="token operator">*</span> <span class="token number">4</span>      w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">uint32</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">16</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>      v1 <span class="token operator">:=</span> w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>      t1 <span class="token operator">:=</span> <span class="token punctuation">(</span>v1<span class="token operator">&gt;&gt;</span><span class="token number">17</span> <span class="token operator">|</span> v1<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v1<span class="token operator">&gt;&gt;</span><span class="token number">19</span> <span class="token operator">|</span> v1<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v1 <span class="token operator">&gt;&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>      v2 <span class="token operator">:=</span> w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">]</span>      t2 <span class="token operator">:=</span> <span class="token punctuation">(</span>v2<span class="token operator">&gt;&gt;</span><span class="token number">7</span> <span class="token operator">|</span> v2<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v2<span class="token operator">&gt;&gt;</span><span class="token number">18</span> <span class="token operator">|</span> v2<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v2 <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>      w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t1 <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> t2 <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><ul><li>64步迭代运算</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>      t1 <span class="token operator">:=</span> h <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">&gt;&gt;</span><span class="token number">6</span> <span class="token operator">|</span> e<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>e<span class="token operator">&gt;&gt;</span><span class="token number">11</span> <span class="token operator">|</span> e<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>e<span class="token operator">&gt;&gt;</span><span class="token number">25</span> <span class="token operator">|</span> e<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">&amp;</span> f<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">^</span>e <span class="token operator">&amp;</span> g<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> _K<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      t2 <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">2</span> <span class="token operator">|</span> a<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">13</span> <span class="token operator">|</span> a<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">22</span> <span class="token operator">|</span> a<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>      h <span class="token operator">=</span> g      g <span class="token operator">=</span> f      f <span class="token operator">=</span> e      e <span class="token operator">=</span> d <span class="token operator">+</span> t1      d <span class="token operator">=</span> c      c <span class="token operator">=</span> b      b <span class="token operator">=</span> a      a <span class="token operator">=</span> t1 <span class="token operator">+</span> t2  <span class="token punctuation">}</span>  h0 <span class="token operator">+=</span> a  h1 <span class="token operator">+=</span> b  h2 <span class="token operator">+=</span> c  h3 <span class="token operator">+=</span> d  h4 <span class="token operator">+=</span> e  h5 <span class="token operator">+=</span> f  h6 <span class="token operator">+=</span> g  h7 <span class="token operator">+=</span> h</code></pre></li><li><p><strong>生成256-bit的报文摘要</strong> 所有的512-bit分组处理完毕后，对于SHA-256算法最后一个分组产生的输出便是256-bit的报文摘要。</p><pre class="language-none"><code class="language-none">dig.h[0], dig.h[1], dig.h[2], dig.h[3], dig.h[4], dig.h[5], dig.h[6], dig.h[7] = h0, h1, h2, h3, h4, h5, h6, h7</code></pre></li></ul><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p>源码地址： <a href="https://github.com/didianV5/blockchain/tree/master/encryption/sha256/source">https://github.com/didianV5/blockchain/tree/master/encryption/sha256/source</a></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>golang实现斐波那契数列（兔子问题）</title>
      <link href="/2018/06/02/golang-shi-xian-fei-bo-na-qi-shu-lie-tu-zi-wen-ti/"/>
      <url>/2018/06/02/golang-shi-xian-fei-bo-na-qi-shu-lie-tu-zi-wen-ti/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”。在数学上，斐波纳契数列以如下被以递归的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）。</p><p><strong>斐波那契数列</strong>指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368…<br>这个数列从第3项开始，每一项都等于前两项之和。</p><h1 id="兔子问题"><a href="#兔子问题" class="headerlink" title="兔子问题"></a>兔子问题</h1><p>已知一对兔子每一个月可以生一对小兔子，而一对兔子出生后，第三个月开始生小兔子，假如一年内没有发生死亡，则一对兔子开始，第N个月后会有多少对？</p><p>分析如下：</p><table><thead><tr><th>月份</th><th>一月</th><th>二月</th><th>三月</th><th>四月</th><th>五月</th><th>六月</th><th>七月</th><th>…</th></tr></thead><tbody><tr><td></td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td></td><td>1</td><td>1</td><td>1</td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td>1</td><td>1</td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td>1</td><td>1</td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td>…</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td>…</td></tr><tr><td>总数(对)</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>…</td></tr></tbody></table><p>通过以上分析可以发现，兔子生育规律和斐波那契数列规律相同，从第三个月起，每月的兔子总数是前两个月的兔子之和，代码实现如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">7</span>RS <span class="token operator">:=</span> <span class="token function">Rabit</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>RS2 <span class="token operator">:=</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"递归：第%d个月一共有%d对兔子！\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> RS<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"元组赋值：第%d个月一共有%d对兔子！"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> RS2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//定义一个函数，接收一个年份n</span><span class="token comment">//用递归实现</span><span class="token keyword">func</span> <span class="token function">Rabit</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">Rabit</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Rabit</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//元组赋值</span><span class="token keyword">func</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token punctuation">}</span><span class="token comment">// 这种写法可能有些人会把自己给绕进去，从而看不太懂，这里的y一直记录着当前月份的总兔子数，下面这种写法可能会比较好理解</span><span class="token keyword">func</span> <span class="token function">Fib2</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span><span class="token keyword">return</span> y<span class="token punctuation">}</span></code></pre><p>输出结果为：</p><pre class="language-none"><code class="language-none">递归：第7个月一共有13对儿兔子！元组赋值：第7个月一共有13对儿兔子！Process finished with exit code 0</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斐波那契数列 兔子问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊源码解析 - RLP（理论）</title>
      <link href="/2018/06/02/yi-tai-fang-yuan-ma-jie-xi-rlp-li-lun/"/>
      <url>/2018/06/02/yi-tai-fang-yuan-ma-jie-xi-rlp-li-lun/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>RLP(Recursive Length Prefix)，叫递归长度前缀编码，它是以太坊序列化所采用的编码方式。RLP主要用于以太坊中数据的网络传输和持久化存储。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>RLP实际只给以下两种类型数据编码：</p><ul><li>byte数组</li><li>byte数组的数组，称之为列表</li></ul><h3 id="byte数组"><a href="#byte数组" class="headerlink" title="byte数组"></a>byte数组</h3><p><strong>规则1</strong>：对于值在[0, 127]之间的单个字节，其编码是其本身。</p><p>例：<code>a</code> 的编码是 <code>97</code> 。</p><p><strong>规则2：</strong> 如果byte数组长度l &lt;= 55，编码的结果是数组本身，再加上128+l作为前缀。</p><p>例：<code>abc</code> 编码结果是131 97 98 99，其中131=128+len(“abc”)，97 98 99依次是a b c</p><p><strong>规则3：</strong> 如果数组长度大于55， 编码结果第一个是183加上字符串长度所占用的字节数，然后是数组长度的本身的编码，最后是byte数组的编码。</p><p>编码下面这段字符串：</p><pre class="language-bash" data-language="bash"><code class="language-bash">The length of this sentence is <span class="token function">more</span> than <span class="token number">55</span> bytes, I know it because I pre-designed it</code></pre><p>这段字符串共86个字节，而86的编码只需要一个字节，那就是它自己，因此，编码的结果如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">184</span> <span class="token number">86</span> <span class="token number">84</span> <span class="token number">104</span> <span class="token number">101</span> <span class="token number">32</span> <span class="token number">108</span> <span class="token number">101</span> <span class="token number">110</span> <span class="token number">103</span> <span class="token number">116</span> <span class="token number">104</span> <span class="token number">32</span> <span class="token number">111</span> <span class="token number">102</span> <span class="token number">32</span> <span class="token number">116</span> <span class="token number">104</span> <span class="token number">105</span> <span class="token number">115</span> <span class="token number">32</span> <span class="token number">115</span> <span class="token number">101</span> <span class="token number">110</span> <span class="token number">116</span> <span class="token number">101</span> <span class="token number">110</span> <span class="token number">99</span> <span class="token number">101</span> <span class="token number">32</span> <span class="token number">105</span> <span class="token number">115</span> <span class="token number">32</span> <span class="token number">109</span> <span class="token number">111</span> <span class="token number">114</span> <span class="token number">101</span> <span class="token number">32</span> <span class="token number">116</span> <span class="token number">104</span> <span class="token number">97</span> <span class="token number">110</span> <span class="token number">32</span> <span class="token number">53</span> <span class="token number">53</span> <span class="token number">32</span> <span class="token number">98</span> <span class="token number">121</span> <span class="token number">116</span> <span class="token number">101</span> <span class="token number">115</span> <span class="token number">44</span> <span class="token number">32</span> <span class="token number">73</span> <span class="token number">32</span> <span class="token number">107</span> <span class="token number">110</span> <span class="token number">111</span> <span class="token number">119</span> <span class="token number">32</span> <span class="token number">105</span> <span class="token number">116</span> <span class="token number">32</span> <span class="token number">98</span> <span class="token number">101</span> <span class="token number">99</span> <span class="token number">97</span> <span class="token number">117</span> <span class="token number">115</span> <span class="token number">101</span> <span class="token number">32</span> <span class="token number">73</span> <span class="token number">32</span> <span class="token number">112</span> <span class="token number">114</span> <span class="token number">101</span> <span class="token number">45</span> <span class="token number">100</span> <span class="token number">101</span> <span class="token number">115</span> <span class="token number">105</span> <span class="token number">103</span> <span class="token number">110</span> <span class="token number">101</span> <span class="token number">100</span> <span class="token number">32</span> <span class="token number">105</span> <span class="token number">116</span></code></pre><p>其中前三个字节的计算方式如下：</p><p><code>184 = 183 + 1</code>，因为数组长度86编码后仅占用一个字节。<br><code>86</code>即数组长度86<br><code>84</code>是T的编码</p><p>编码一个重复1024次”a”的字符串，其结果为：<code>185 4 0 97 97 97 97 97 97 ...</code>。</p><p>1024 二进制 00000100 00000000 ，一个字节为8位，所以 1024 的字节数为 2<br>4 0 是数组长度的编码</p><p><code>185=183+2</code> ,数组长度1024占用2个字节</p><p>1024占用了2个字节，根据<strong>规则1</strong>将1024分成两个字节即<code>00000100</code>和<code>00000000</code>，换算成十进制就是<code>4</code>和<code>0</code></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>规则4</strong>：如果列表长度小于55，编码结果第一位是192加列表长度的编码的长度，然后依次连接各子列表的编码。</p><p>例6：[“abc”, “def”]的编码结果是 <code>200 131 97 98 99 131 100 101 102</code>。</p><p>其中 <code>abc</code> 的编码为 <code>131 97 98 99</code> , <code>def</code> 的编码为<code>131 100 101 102</code>。两个子字符串的编码后总长度是<code>8</code>，因此编码结果第一位计算得出：<code>192 + 8 = 200</code>。</p><p><strong>规则5</strong>：如果列表长度超过55，编码结果第一位是247加列表长度的编码长度所占用的字节数，然后是列表长度本身的编码，最后依次连接各子列表的编码。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token string">"The length of this sentence is more than 55 bytes, "</span>, <span class="token string">"I know it because I pre-designed it"</span><span class="token punctuation">]</span></code></pre><p>的编码结果是:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">248</span> <span class="token number">88</span> <span class="token number">179</span> <span class="token number">84</span> <span class="token number">104</span> <span class="token number">101</span> <span class="token number">32</span> <span class="token number">108</span> <span class="token number">101</span> <span class="token number">110</span> <span class="token number">103</span> <span class="token number">116</span> <span class="token number">104</span> <span class="token number">32</span> <span class="token number">111</span> <span class="token number">102</span> <span class="token number">32</span> <span class="token number">116</span> <span class="token number">104</span> <span class="token number">105</span> <span class="token number">115</span> <span class="token number">32</span> <span class="token number">115</span> <span class="token number">101</span> <span class="token number">110</span> <span class="token number">116</span> <span class="token number">101</span> <span class="token number">110</span> <span class="token number">99</span> <span class="token number">101</span> <span class="token number">32</span> <span class="token number">105</span> <span class="token number">115</span> <span class="token number">32</span> <span class="token number">109</span> <span class="token number">111</span> <span class="token number">114</span> <span class="token number">101</span> <span class="token number">32</span> <span class="token number">116</span> <span class="token number">104</span> <span class="token number">97</span> <span class="token number">110</span> <span class="token number">32</span> <span class="token number">53</span> <span class="token number">53</span> <span class="token number">32</span> <span class="token number">98</span> <span class="token number">121</span> <span class="token number">116</span> <span class="token number">101</span> <span class="token number">115</span> <span class="token number">44</span> <span class="token number">32</span> <span class="token number">163</span> <span class="token number">73</span> <span class="token number">32</span> <span class="token number">107</span> <span class="token number">110</span> <span class="token number">111</span> <span class="token number">119</span> <span class="token number">32</span> <span class="token number">105</span> <span class="token number">116</span> <span class="token number">32</span> <span class="token number">98</span> <span class="token number">101</span> <span class="token number">99</span> <span class="token number">97</span> <span class="token number">117</span> <span class="token number">115</span> <span class="token number">101</span> <span class="token number">32</span> <span class="token number">73</span> <span class="token number">32</span> <span class="token number">112</span> <span class="token number">114</span> <span class="token number">101</span> <span class="token number">45</span> <span class="token number">100</span> <span class="token number">101</span> <span class="token number">115</span> <span class="token number">105</span> <span class="token number">103</span> <span class="token number">110</span> <span class="token number">101</span> <span class="token number">100</span> <span class="token number">32</span> <span class="token number">105</span> <span class="token number">116</span></code></pre><p>其中前两个字节的计算方式如下：</p><p>列表长度 88 = 86 + 2，在规则3的示例中，长度为86，而在此例中，由于有两个子字符串，每个子字符串本身的长度的编码各占1字节，因此总共占2字节。</p><p>列表长度的编码长度为 1<br>第1个字节为248 = 247 +1<br>第2个字节为 88</p><p>第3个字节179依据<strong>规则2</strong>得出179 = 128 + 51<br>第55个字节163同样依据<strong>规则2</strong>得出163 = 128 + 35</p><h2 id="RLP解码"><a href="#RLP解码" class="headerlink" title="RLP解码"></a>RLP解码</h2><p>解码时，首先根据编码结果第一个字节f的大小，执行以下的规则判断：</p><ul><li><p>如果f∈ [0,128),　那么它是一个字节本身。</p></li><li><p>如果f∈[128,184)，那么它是一个长度不超过55的byte数组，数组的长度为 <code>l=f-128</code></p></li><li><p>如果f∈[184,192)，那么它是一个长度超过55的数组，长度本身的编码长度<code>ll=f-183</code>,然后从第二个字节开始读取长度为ll的bytes，按照BigEndian编码成整数l，l即为数组的长度。</p></li><li><p>如果f∈(192,247]，那么它是一个编码后总长度不超过55的列表，列表长度为<code>l=f-192</code>。递归使用规则1~4进行解码。</p></li><li><p>如果f∈(247,256]，那么它是编码后长度大于55的列表，其长度本身的编码长度<code>ll=f-247</code>,然后从第二个字节读取长度为ll的bytes,按BigEndian编码成整数l，l即为子列表长度。然后递归根据解码规则进行解码。</p></li></ul><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><table><thead><tr><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 RLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊源码解析 - 交易源码分析</title>
      <link href="/2018/06/02/yi-tai-fang-yuan-ma-jie-xi-jiao-yi-yuan-ma-fen-xi/"/>
      <url>/2018/06/02/yi-tai-fang-yuan-ma-jie-xi-jiao-yi-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>以太坊交易基本流程：</p><p><img src="https://img-blog.csdn.net/20180528174051167" alt="以太坊交易"></p><p>完整流程分为以下几个步骤：</p><ul><li>发起交易：指定目标地址和交易金额，以及需要的gas/gaslimit</li><li>交易签名：使用账户私钥对交易进行签名</li><li>提交交易：把交易加入到交易缓冲池txpool中（会先对交易签名进行验证）</li><li>广播交易：通知EVM执行，同时把交易信息广播给其他结点</li></ul><h2 id="发起交易"><a href="#发起交易" class="headerlink" title="发起交易"></a>发起交易</h2><p>用户通过JSON RPC发起 <code>eth_sendTransaction</code> 请求，最终会调用 <code>PublicTransactionPoolAPI</code> 的 <code>SendTransaction</code> 实现，<br>首先根据from地址查找到对应的wallet，检查一下参数值，</p><ul><li>通过SendTxArgs.toTransaction()创建交易</li><li>通过Wallet.SignTx()对交易进行签名</li><li>通过submitTransaction()提交交易</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//代码位于 `internal/ethapi/api.go`</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>PrivateAccountAPI<span class="token punctuation">)</span> <span class="token function">SendTransaction</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> args SendTxArgs<span class="token punctuation">,</span> passwd <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>Nonce <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">// Hold the addresse's mutex around signing to prevent concurrent assignment of</span><span class="token comment">// the same nonce to multiple accounts.</span>s<span class="token punctuation">.</span>nonceLock<span class="token punctuation">.</span><span class="token function">LockAddr</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>From<span class="token punctuation">)</span><span class="token keyword">defer</span> s<span class="token punctuation">.</span>nonceLock<span class="token punctuation">.</span><span class="token function">UnlockAddr</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>From<span class="token punctuation">)</span><span class="token punctuation">}</span>signed<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">signTransaction</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> args<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">submitTransaction</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> s<span class="token punctuation">.</span>b<span class="token punctuation">,</span> signed<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>交易签名主要实现在 <code>signTransaction</code>，主要功能：</p><p><code>toTransaction()</code> ：创建交易<br><code>wallet.SignTxWithPassphrase(account, passwd, tx, chainID)</code>：对交易进行签名</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>PrivateAccountAPI<span class="token punctuation">)</span> <span class="token function">signTransaction</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> args SendTxArgs<span class="token punctuation">,</span> passwd <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Look up the wallet containing the requested signer</span>account <span class="token operator">:=</span> accounts<span class="token punctuation">.</span>Account<span class="token punctuation">{</span>Address<span class="token punctuation">:</span> args<span class="token punctuation">.</span>From<span class="token punctuation">}</span>wallet<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>am<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// Set some sanity defaults and terminate on failure</span><span class="token keyword">if</span> err <span class="token operator">:=</span> args<span class="token punctuation">.</span><span class="token function">setDefaults</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> s<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// Assemble the transaction and sign with the wallet</span>tx <span class="token operator">:=</span> args<span class="token punctuation">.</span><span class="token function">toTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> chainID <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token keyword">if</span> config <span class="token operator">:=</span> s<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">ChainConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> config<span class="token punctuation">.</span><span class="token function">IsEIP155</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">CurrentBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>chainID <span class="token operator">=</span> config<span class="token punctuation">.</span>ChainId<span class="token punctuation">}</span><span class="token keyword">return</span> wallet<span class="token punctuation">.</span><span class="token function">SignTxWithPassphrase</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> passwd<span class="token punctuation">,</span> tx<span class="token punctuation">,</span> chainID<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="创建交易"><a href="#创建交易" class="headerlink" title="创建交易"></a>创建交易</h2><p><strong>tx := args.toTransaction()</strong> 创建交易</p><p>先看一下SendTxArgs类型的定义：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码 internal/ethapi/api.go</span><span class="token comment">// SendTxArgs represents the arguments to sumbit a new transaction into the transaction pool.</span><span class="token keyword">type</span> SendTxArgs <span class="token keyword">struct</span> <span class="token punctuation">{</span>From     common<span class="token punctuation">.</span>Address  <span class="token string">`json:"from"`</span>To       <span class="token operator">*</span>common<span class="token punctuation">.</span>Address <span class="token string">`json:"to"`</span>Gas      <span class="token operator">*</span>hexutil<span class="token punctuation">.</span>Uint64 <span class="token string">`json:"gas"`</span>GasPrice <span class="token operator">*</span>hexutil<span class="token punctuation">.</span>Big    <span class="token string">`json:"gasPrice"`</span>Value    <span class="token operator">*</span>hexutil<span class="token punctuation">.</span>Big    <span class="token string">`json:"value"`</span>Nonce    <span class="token operator">*</span>hexutil<span class="token punctuation">.</span>Uint64 <span class="token string">`json:"nonce"`</span><span class="token comment">// We accept "data" and "input" for backwards-compatibility reasons. "input" is the</span><span class="token comment">// newer name and should be preferred by clients.</span>Data  <span class="token operator">*</span>hexutil<span class="token punctuation">.</span>Bytes <span class="token string">`json:"data"`</span>Input <span class="token operator">*</span>hexutil<span class="token punctuation">.</span>Bytes <span class="token string">`json:"input"`</span><span class="token punctuation">}</span></code></pre><p>可以看到是和JSON字段相应的，包括了地址、gas、金额这些交易信息，nonce是一个随账户交易次数自增的数字，一般会自动填充。交易还可以携带一些额外数据，存放在data或者input字段中，推荐用input，data是为了向后兼容。</p><p>toTransaction()函数：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码 internal/ethapi/api.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>args <span class="token operator">*</span>SendTxArgs<span class="token punctuation">)</span> <span class="token function">toTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction <span class="token punctuation">{</span><span class="token keyword">var</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>Data <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>input <span class="token operator">=</span> <span class="token operator">*</span>args<span class="token punctuation">.</span>Data<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> args<span class="token punctuation">.</span>Input <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>input <span class="token operator">=</span> <span class="token operator">*</span>args<span class="token punctuation">.</span>Input<span class="token punctuation">}</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>To <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> types<span class="token punctuation">.</span><span class="token function">NewContractCreation</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">.</span>Nonce<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">.</span>Gas<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>GasPrice<span class="token punctuation">)</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> types<span class="token punctuation">.</span><span class="token function">NewTransaction</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">.</span>Nonce<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">.</span>To<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">.</span>Gas<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>GasPrice<span class="token punctuation">)</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>可以看到，如果目标地址为空的话，表示这是一个创建智能合约的交易，调用NewContractCreation()。否则说明这是一个普通交易，调用NewTransaction()。不管调用哪个，最终都会生成一个Transaction实例，我们看一下Transaction类型的定义：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码位于core/types/transaction.go</span><span class="token keyword">type</span> Transaction <span class="token keyword">struct</span> <span class="token punctuation">{</span>data txdata<span class="token comment">// caches</span>hash atomic<span class="token punctuation">.</span>Valuesize atomic<span class="token punctuation">.</span>Valuefrom atomic<span class="token punctuation">.</span>Value<span class="token punctuation">}</span><span class="token keyword">type</span> txdata <span class="token keyword">struct</span> <span class="token punctuation">{</span>AccountNonce <span class="token builtin">uint64</span>          <span class="token string">`json:"nonce"    gencodec:"required"`</span>Price        <span class="token operator">*</span>big<span class="token punctuation">.</span>Int        <span class="token string">`json:"gasPrice" gencodec:"required"`</span>GasLimit     <span class="token builtin">uint64</span>          <span class="token string">`json:"gas"      gencodec:"required"`</span>Recipient    <span class="token operator">*</span>common<span class="token punctuation">.</span>Address <span class="token string">`json:"to"       rlp:"nil"`</span> <span class="token comment">// nil means contract creation</span>Amount       <span class="token operator">*</span>big<span class="token punctuation">.</span>Int        <span class="token string">`json:"value"    gencodec:"required"`</span>Payload      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>          <span class="token string">`json:"input"    gencodec:"required"`</span><span class="token comment">// Signature values</span>V <span class="token operator">*</span>big<span class="token punctuation">.</span>Int <span class="token string">`json:"v" gencodec:"required"`</span>R <span class="token operator">*</span>big<span class="token punctuation">.</span>Int <span class="token string">`json:"r" gencodec:"required"`</span>S <span class="token operator">*</span>big<span class="token punctuation">.</span>Int <span class="token string">`json:"s" gencodec:"required"`</span><span class="token comment">// This is only used when marshaling to JSON.</span>Hash <span class="token operator">*</span>common<span class="token punctuation">.</span>Hash <span class="token string">`json:"hash" rlp:"-"`</span><span class="token punctuation">}</span></code></pre><h2 id="交易签名"><a href="#交易签名" class="headerlink" title="交易签名"></a>交易签名</h2><p><strong>wallet.SignTxWithPassphrase</strong> 代码</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// accounts/keystore/keystore_wallet.go</span><span class="token comment">// SignTxWithPassphrase implements accounts.Wallet, attempting to sign the given</span><span class="token comment">// transaction with the given account using passphrase as extra authentication.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>keystoreWallet<span class="token punctuation">)</span> <span class="token function">SignTxWithPassphrase</span><span class="token punctuation">(</span>account accounts<span class="token punctuation">.</span>Account<span class="token punctuation">,</span> passphrase <span class="token builtin">string</span><span class="token punctuation">,</span> tx <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> chainID <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Make sure the requested account is contained within</span><span class="token keyword">if</span> account<span class="token punctuation">.</span>Address <span class="token operator">!=</span> w<span class="token punctuation">.</span>account<span class="token punctuation">.</span>Address <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> accounts<span class="token punctuation">.</span>ErrUnknownAccount<span class="token punctuation">}</span><span class="token keyword">if</span> account<span class="token punctuation">.</span>URL <span class="token operator">!=</span> <span class="token punctuation">(</span>accounts<span class="token punctuation">.</span>URL<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> account<span class="token punctuation">.</span>URL <span class="token operator">!=</span> w<span class="token punctuation">.</span>account<span class="token punctuation">.</span>URL <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> accounts<span class="token punctuation">.</span>ErrUnknownAccount<span class="token punctuation">}</span><span class="token comment">// Account seems valid, request the keystore to sign</span><span class="token keyword">return</span> w<span class="token punctuation">.</span>keystore<span class="token punctuation">.</span><span class="token function">SignTxWithPassphrase</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> passphrase<span class="token punctuation">,</span> tx<span class="token punctuation">,</span> chainID<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>w.keystore.SignTxWithPassphrase(account, passphrase, tx, chainID)</strong> 代码：<br>主要就是通过 <code>SignTx</code> 进行签名。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码 accounts/keystore/keystore.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ks <span class="token operator">*</span>KeyStore<span class="token punctuation">)</span> <span class="token function">SignTxWithPassphrase</span><span class="token punctuation">(</span>a accounts<span class="token punctuation">.</span>Account<span class="token punctuation">,</span> passphrase <span class="token builtin">string</span><span class="token punctuation">,</span> tx <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> chainID <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> err <span class="token operator">:=</span> ks<span class="token punctuation">.</span><span class="token function">getDecryptedKey</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> passphrase<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">defer</span> <span class="token function">zeroKey</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">)</span><span class="token comment">// Depending on the presence of the chain ID, sign with EIP155 or homestead</span><span class="token keyword">if</span> chainID <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> types<span class="token punctuation">.</span><span class="token function">SignTx</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> types<span class="token punctuation">.</span><span class="token function">NewEIP155Signer</span><span class="token punctuation">(</span>chainID<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> types<span class="token punctuation">.</span><span class="token function">SignTx</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> types<span class="token punctuation">.</span>HomesteadSigner<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这里会首先判断账户是否已经解锁，如果已经解锁的话就可以获取它的私钥。</p><p>然后创建签名器，如果要符合EIP155规范的话，需要把chainID传进去，也就是我们的“–networkid”命令行参数。</p><p>最后调用一个全局函数SignTx()完成签名：</p><pre class="language-go" data-language="go"><code class="language-go">代码位于core<span class="token operator">/</span>types<span class="token operator">/</span>transaction_signing<span class="token punctuation">.</span><span class="token keyword">go</span>：<span class="token comment">// SignTx signs the transaction using the given signer and private key</span><span class="token keyword">func</span> <span class="token function">SignTx</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>Transaction<span class="token punctuation">,</span> s Signer<span class="token punctuation">,</span> prv <span class="token operator">*</span>ecdsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Transaction<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>h <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span>sig<span class="token punctuation">,</span> err <span class="token operator">:=</span> crypto<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prv<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> tx<span class="token punctuation">.</span><span class="token function">WithSignature</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sig<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>主要分为3个步骤：</p><ul><li>生成交易的hash值</li><li>根据hash值和私钥生成签名</li><li>把签名数据填充到Transaction实例中</li></ul><p><strong>生成交易的hash值</strong></p><p>以EIP155Signer为例，代码如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s EIP155Signer<span class="token punctuation">)</span> <span class="token function">Hash</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>Transaction<span class="token punctuation">)</span> common<span class="token punctuation">.</span>Hash <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">rlpHash</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>          tx<span class="token punctuation">.</span>data<span class="token punctuation">.</span>AccountNonce<span class="token punctuation">,</span>          tx<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Price<span class="token punctuation">,</span>          tx<span class="token punctuation">.</span>data<span class="token punctuation">.</span>GasLimit<span class="token punctuation">,</span>          tx<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Recipient<span class="token punctuation">,</span>          tx<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Amount<span class="token punctuation">,</span>          tx<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Payload<span class="token punctuation">,</span>          s<span class="token punctuation">.</span>chainId<span class="token punctuation">,</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">rlpHash</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>h common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>      hw <span class="token operator">:=</span> sha3<span class="token punctuation">.</span><span class="token function">NewKeccak256</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      rlp<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>hw<span class="token punctuation">,</span> x<span class="token punctuation">)</span>      hw<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> h  <span class="token punctuation">}</span>  </code></pre><p>可以看到，先用SHA3-256生成hash值，然后再进行RLP编码。RLP是一种数据序列化方法。</p><p><strong>根据hash值和私钥生成签名-crypto.Sign()</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码位于crypto/signature_cgo.go：</span><span class="token keyword">func</span> <span class="token function">Sign</span><span class="token punctuation">(</span>hash <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> prv <span class="token operator">*</span>ecdsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">)</span> <span class="token punctuation">(</span>sig <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">32</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"hash is required to be exactly 32 bytes (%d)"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      seckey <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">PaddedBigBytes</span><span class="token punctuation">(</span>prv<span class="token punctuation">.</span>D<span class="token punctuation">,</span> prv<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BitSize<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span>      <span class="token keyword">defer</span> <span class="token function">zeroBytes</span><span class="token punctuation">(</span>seckey<span class="token punctuation">)</span>      <span class="token keyword">return</span> secp256k1<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> seckey<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  </code></pre><p>这里是通过ECDSA算法生成签名数据。最终会返回的签名是一个字节数组，按R / S / V的顺序排列。</p><p><strong>填充签名数据 - WithSignature</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//代码位于 core/types/transaction.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>tx <span class="token operator">*</span>Transaction<span class="token punctuation">)</span> <span class="token function">WithSignature</span><span class="token punctuation">(</span>signer Signer<span class="token punctuation">,</span> sig <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Transaction<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> signer<span class="token punctuation">.</span><span class="token function">SignatureValues</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> sig<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>cpy <span class="token operator">:=</span> <span class="token operator">&amp;</span>Transaction<span class="token punctuation">{</span>data<span class="token punctuation">:</span> tx<span class="token punctuation">.</span>data<span class="token punctuation">}</span>cpy<span class="token punctuation">.</span>data<span class="token punctuation">.</span>R<span class="token punctuation">,</span> cpy<span class="token punctuation">.</span>data<span class="token punctuation">.</span>S<span class="token punctuation">,</span> cpy<span class="token punctuation">.</span>data<span class="token punctuation">.</span>V <span class="token operator">=</span> r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> v<span class="token keyword">return</span> cpy<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>生成的签名数据是字节数组类型，需要通过signer.SignatureValues()函数转换成3个big.Int类型的数据，然后填充到Transaction结构的R / S / V字段上</p><h2 id="提交交易"><a href="#提交交易" class="headerlink" title="提交交易"></a>提交交易</h2><p>签名完成以后，就需要调用 <code>submitTransaction()</code> 函数提交到交易缓冲池txpool中。</p><p>先看下TxPool中的几个重要字段：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码 core/tx_pool.go</span><span class="token keyword">type</span> TxPool <span class="token keyword">struct</span> <span class="token punctuation">{</span>config       TxPoolConfigchainconfig  <span class="token operator">*</span>params<span class="token punctuation">.</span>ChainConfigchain        blockChaingasPrice     <span class="token operator">*</span>big<span class="token punctuation">.</span>InttxFeed       event<span class="token punctuation">.</span>Feedscope        event<span class="token punctuation">.</span>SubscriptionScopechainHeadCh  <span class="token keyword">chan</span> ChainHeadEventchainHeadSub event<span class="token punctuation">.</span>Subscriptionsigner       types<span class="token punctuation">.</span>Signermu           sync<span class="token punctuation">.</span>RWMutexcurrentState  <span class="token operator">*</span>state<span class="token punctuation">.</span>StateDB      <span class="token comment">// Current state in the blockchain head</span>pendingState  <span class="token operator">*</span>state<span class="token punctuation">.</span>ManagedState <span class="token comment">// Pending state tracking virtual nonces</span>currentMaxGas <span class="token builtin">uint64</span>              <span class="token comment">// Current gas limit for transaction caps</span>locals  <span class="token operator">*</span>accountSet <span class="token comment">// Set of local transaction to exempt from eviction rules</span>journal <span class="token operator">*</span>txJournal  <span class="token comment">// Journal of local transaction to back up to disk</span>pending <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token operator">*</span>txList   <span class="token comment">// All currently processable transactions</span>queue   <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token operator">*</span>txList   <span class="token comment">// Queued but non-processable transactions</span>beats   <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span>time<span class="token punctuation">.</span>Time <span class="token comment">// Last heartbeat from each known account</span>all     <span class="token operator">*</span>txLookup                    <span class="token comment">// All transactions to allow lookups</span>priced  <span class="token operator">*</span>txPricedList                <span class="token comment">// All transactions sorted by price</span>wg sync<span class="token punctuation">.</span>WaitGroup <span class="token comment">// for shutdown sync</span>homestead <span class="token builtin">bool</span><span class="token punctuation">}</span></code></pre><p><strong>pending字段</strong>中包含了当前所有可被处理的交易列表，而<strong>queue字段</strong>中包含了所有不可被处理、也就是新加入进来的交易。下面查看一下<strong>pending字段</strong> 的txList的结构：</p><pre class="language-none"><code class="language-none">type txList struct {strict bool         // Whether nonces are strictly continuous or nottxs    *txSortedMap // Heap indexed sorted hash map of the transactionscostcap *big.Int // Price of the highest costing transaction (reset only if exceeds balance)gascap  uint64   // Gas limit of the highest spending transaction (reset only if exceeds block limit)}</code></pre><p>txList内部包含一个txSortedMap结构，实现按nonce排序，其内部维护了两张表：</p><ul><li>一张是包含了所有Transaction的map，key是Transaction的nonce值。之前提到过，这个nonce是随着账户的交易次数自增的一个数字，所以越新的交易，nonce值越高。</li><li>还有一张表是一个数组，包含了所有nonce值，其内部是进行过堆排序的（小顶堆），nonce值按照从大到小排列。每次调用heap.Pop()时会取出最小的nonce值，也就是最老的交易。</li></ul><p><strong>all字段</strong> 中包含了所有的交易列表，以交易的hash作为key。</p><p><strong>priced字段</strong> 则是把all中的交易列表按照gas price从大到小排列，如果gas price一样，则按照交易的nonce值从小到大排列。最终的目标是每次取出gas price最大、nonce最小的交易。</p><p>我们提交交易的目标是：先把交易放入queue中记录在案，然后再从queue中选一部分放入pending中进行处理。如果发现txpool满了，则依据priced中的排序，剔除低油价的交易。</p><p>txpool的默认配置：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> DefaultTxPoolConfig <span class="token operator">=</span> TxPoolConfig<span class="token punctuation">{</span>Journal<span class="token punctuation">:</span>   <span class="token string">"transactions.rlp"</span><span class="token punctuation">,</span>Rejournal<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">,</span>PriceLimit<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>PriceBump<span class="token punctuation">:</span>  <span class="token number">10</span><span class="token punctuation">,</span>AccountSlots<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>GlobalSlots<span class="token punctuation">:</span>  <span class="token number">4096</span><span class="token punctuation">,</span>AccountQueue<span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span>GlobalQueue<span class="token punctuation">:</span>  <span class="token number">1024</span><span class="token punctuation">,</span>Lifetime<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li>GlobalSlots：pending列表的最大长度，默认4096笔</li><li>AccountSlots：pending中每个账户存储的交易数的阈值，超过这个数量可能会被认为是垃圾交易或者是攻击者，多余交易可能被丢弃</li><li>GlobalQueue：queue列表的最大长度，默认1024笔</li><li>AccountQueue：queue中每个账户允许存储的最大交易数，超过会被丢弃，默认64笔</li><li>PriceLimit：允许进入txpool的最低gas price，默认1 Gwei</li><li>PriceBump：如果出现两个nonce相同的交易，gas price的差值超过该阈值则用新交易替换老交易</li></ul><p>现在我们分析submitTransaction()函数：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//代码位于 `internal/ethapi/api.go`</span><span class="token keyword">func</span> <span class="token function">submitTransaction</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> b Backend<span class="token punctuation">,</span> tx <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">)</span> <span class="token punctuation">(</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">SendTx</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">if</span> tx<span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>signer <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">MakeSigner</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">ChainConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">CurrentBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>from<span class="token punctuation">,</span> err <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">Sender</span><span class="token punctuation">(</span>signer<span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>addr <span class="token operator">:=</span> crypto<span class="token punctuation">.</span><span class="token function">CreateAddress</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">Nonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Submitted contract creation"</span><span class="token punctuation">,</span> <span class="token string">"fullhash"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"contract"</span><span class="token punctuation">,</span> addr<span class="token punctuation">.</span><span class="token function">Hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Submitted transaction"</span><span class="token punctuation">,</span> <span class="token string">"fullhash"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"recipient"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>这里有一个Backend参数，是在eth Service初始化时创建的，具体实现在EthApiBackend中，代码位于eth/api_backend.go。可以看到，这里先调用了SendTx()函数提交交易，然后如果发现目标地址为空，表明这是一个创建智能合约的交易，会创建合约地址。</p><h3 id="提交交易到txpool"><a href="#提交交易到txpool" class="headerlink" title="提交交易到txpool"></a>提交交易到txpool</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//代码 eth/api_backend.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>EthAPIBackend<span class="token punctuation">)</span> <span class="token function">SendTx</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> signedTx <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>txPool<span class="token punctuation">.</span><span class="token function">AddLocal</span><span class="token punctuation">(</span>signedTx<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>继续跟踪TxPool的AddLocal()函数：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码位于 core/tx_pool.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>pool <span class="token operator">*</span>TxPool<span class="token punctuation">)</span> <span class="token function">AddLocal</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">addTx</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> <span class="token operator">!</span>pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>NoLocals<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// addTx enqueues a single transaction into the pool if it is valid.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>pool <span class="token operator">*</span>TxPool<span class="token punctuation">)</span> <span class="token function">addTx</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> local <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> pool<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Try to inject the transaction and update any state</span>replace<span class="token punctuation">,</span> err <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment">// If we added a new transaction, run promotion checks and return</span><span class="token keyword">if</span> <span class="token operator">!</span>replace <span class="token punctuation">{</span>from<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">Sender</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>signer<span class="token punctuation">,</span> tx<span class="token punctuation">)</span> <span class="token comment">// already validated</span>pool<span class="token punctuation">.</span><span class="token function">promoteExecutables</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">{</span>from<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>这里有两个主要函数：add()和promoteExecuteables()。<br>add()会判断是否应该把当前交易加入到queue列表中，promoteExecuteables()则会从queue中选取一些交易放入pending列表中等待执行。下面分别讨论这两个函数。</p><h4 id="TxPool-add"><a href="#TxPool-add" class="headerlink" title="TxPool.add()"></a>TxPool.add()</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码位于 core/tx_pool.go </span><span class="token keyword">func</span> <span class="token punctuation">(</span>pool <span class="token operator">*</span>TxPool<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> local <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// If the transaction is already known, discard it</span>hash <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Discarding already known transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"known transaction: %x"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// If the transaction fails basic validation, discard it</span><span class="token keyword">if</span> err <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">validateTx</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Discarding invalid transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">"err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>invalidTxCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// If the transaction pool is full, discard underpriced transactions</span><span class="token keyword">if</span> <span class="token function">uint64</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalSlots<span class="token operator">+</span>pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalQueue <span class="token punctuation">{</span><span class="token comment">// If the new transaction is underpriced, don't accept it</span><span class="token keyword">if</span> <span class="token operator">!</span>local <span class="token operator">&amp;&amp;</span> pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Underpriced</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> pool<span class="token punctuation">.</span>locals<span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Discarding underpriced transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">GasPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>underpricedTxCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> ErrUnderpriced<span class="token punctuation">}</span><span class="token comment">// New transaction is better than our worse ones, make room for it</span>drop <span class="token operator">:=</span> pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Discard</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">int</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalSlots<span class="token operator">+</span>pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalQueue<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span>locals<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> drop <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Discarding freshly underpriced transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">GasPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>underpricedTxCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>pool<span class="token punctuation">.</span><span class="token function">removeTx</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// If the transaction is replacing an already pending one, do directly</span>from<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">Sender</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>signer<span class="token punctuation">,</span> tx<span class="token punctuation">)</span> <span class="token comment">// already validated</span><span class="token keyword">if</span> list <span class="token operator">:=</span> pool<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">;</span> list <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">Overlaps</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Nonce already pending, check if required price bump is met</span>inserted<span class="token punctuation">,</span> old <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PriceBump<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>inserted <span class="token punctuation">{</span>pendingDiscardCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> ErrReplaceUnderpriced<span class="token punctuation">}</span><span class="token comment">// New transaction is better, replace old one</span><span class="token keyword">if</span> old <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Removed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pendingReplaceCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span>pool<span class="token punctuation">.</span><span class="token function">journalTx</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> tx<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Pooled new executable transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">"from"</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token string">"to"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// We've directly injected a replacement transaction, notify subsystems</span><span class="token keyword">go</span> pool<span class="token punctuation">.</span>txFeed<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>NewTxsEvent<span class="token punctuation">{</span>types<span class="token punctuation">.</span>Transactions<span class="token punctuation">{</span>tx<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span> old <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// New transaction isn't replacing a pending one, push into queue</span>replace<span class="token punctuation">,</span> err <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">enqueueTx</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">// Mark local addresses and journal local transactions</span><span class="token keyword">if</span> local <span class="token punctuation">{</span>pool<span class="token punctuation">.</span>locals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">}</span>pool<span class="token punctuation">.</span><span class="token function">journalTx</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> tx<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Pooled new future transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">"from"</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token string">"to"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> replace<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>我们分成一段一段的来分析：</p><pre class="language-go" data-language="go"><code class="language-go">hash <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Discarding already known transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"known transaction: %x"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>这一段是先计算交易的hash值，然后判断是不是已经在txpool 中，在的话就直接退出。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// If the transaction fails basic validation, discard it</span><span class="token keyword">if</span> err <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">validateTx</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Discarding invalid transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">"err"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>invalidTxCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span></code></pre><p>查看 <code>pool.validateTx(tx, local)</code> 代码</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码位于 core/tx_pool.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>pool <span class="token operator">*</span>TxPool<span class="token punctuation">)</span> <span class="token function">validateTx</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> local <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token comment">// Heuristic limit, reject transactions over 32KB to prevent DOS attacks</span><span class="token keyword">if</span> tx<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">32</span><span class="token operator">*</span><span class="token number">1024</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ErrOversizedData<span class="token punctuation">}</span><span class="token comment">// Transactions can't be negative. This may never happen using RLP decoded</span><span class="token comment">// transactions but may occur if you create a transaction using the RPC.</span><span class="token keyword">if</span> tx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ErrNegativeValue<span class="token punctuation">}</span><span class="token comment">// Ensure the transaction doesn't exceed the current block limit gas.</span><span class="token keyword">if</span> pool<span class="token punctuation">.</span>currentMaxGas <span class="token operator">&lt;</span> tx<span class="token punctuation">.</span><span class="token function">Gas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ErrGasLimit<span class="token punctuation">}</span><span class="token comment">// Make sure the transaction is signed properly</span>from<span class="token punctuation">,</span> err <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">Sender</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>signer<span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ErrInvalidSender<span class="token punctuation">}</span><span class="token comment">// Drop non-local transactions under our own minimal accepted gas price</span>local <span class="token operator">=</span> local <span class="token operator">||</span> pool<span class="token punctuation">.</span>locals<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token comment">// account may be local even if the transaction arrived from the network</span><span class="token keyword">if</span> <span class="token operator">!</span>local <span class="token operator">&amp;&amp;</span> pool<span class="token punctuation">.</span>gasPrice<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">GasPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ErrUnderpriced<span class="token punctuation">}</span><span class="token comment">// Ensure the transaction adheres to nonce ordering</span><span class="token keyword">if</span> pool<span class="token punctuation">.</span>currentState<span class="token punctuation">.</span><span class="token function">GetNonce</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">&gt;</span> tx<span class="token punctuation">.</span><span class="token function">Nonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ErrNonceTooLow<span class="token punctuation">}</span><span class="token comment">// Transactor should have enough funds to cover the costs</span><span class="token comment">// cost == V + GP * GL</span><span class="token keyword">if</span> pool<span class="token punctuation">.</span>currentState<span class="token punctuation">.</span><span class="token function">GetBalance</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">Cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ErrInsufficientFunds<span class="token punctuation">}</span>intrGas<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">IntrinsicGas</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span>homestead<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">if</span> tx<span class="token punctuation">.</span><span class="token function">Gas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> intrGas <span class="token punctuation">{</span><span class="token keyword">return</span> ErrIntrinsicGas<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>这一段是验证交易的有效性，主要进行以下几个方面的检查：</p><ul><li>数据量必须&lt;32KB</li><li>交易金额必须非负（&gt;=0）</li><li>交易的gas limit必须低于block的gas limit</li><li>签名数据必须有效，能够解析出发送者地址</li><li>交易的gas price必须高于pool设定的最低gas price（除非是本地交易）</li><li>交易的nonce值必须高于当前链上该账户的nonce值（低于则说明这笔交易已经被打包过了）</li><li>当前账户余额必须大于<code>“交易金额 + gasprice * gaslimit”</code></li><li>交易的gas limit必须大于对应数据量所需的最低gas水平</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalSlots<span class="token operator">+</span>pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalQueue <span class="token punctuation">{</span>      <span class="token comment">// If the new transaction is underpriced, don't accept it  </span>    <span class="token keyword">if</span> <span class="token operator">!</span>local <span class="token operator">&amp;&amp;</span> pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Underpriced</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> pool<span class="token punctuation">.</span>locals<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Discarding underpriced transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">GasPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          underpricedTxCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> ErrUnderpriced      <span class="token punctuation">}</span>      <span class="token comment">// New transaction is better than our worse ones, make room for it  </span>    drop <span class="token operator">:=</span> pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Discard</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">int</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalSlots<span class="token operator">+</span>pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalQueue<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span>locals<span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> drop <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Discarding freshly underpriced transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">GasPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          underpricedTxCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>          pool<span class="token punctuation">.</span><span class="token function">removeTx</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  </code></pre><p>这一段是在当前txpool已满的情况下，剔除掉低油价的交易。还记得之前有个priced字段存储了按gas price以及nonce排序的交易列表吗？这里会先把当前交易的gas price和当前池中的最低价进行比较：</p><ul><li>如果低于最低价，直接丢弃该交易返回</li><li>如果高于最低价，则从txpool中剔除一些低价的交易</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// New transaction isn't replacing a pending one, push into queue  </span>    replace<span class="token punctuation">,</span> err <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">enqueueTx</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> tx<span class="token punctuation">)</span>      <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err      <span class="token punctuation">}</span>  </code></pre><p>如果之前的那些检查都没有问题，就真正调用enqueueTx()函数把交易加入到queue列表中了。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// Mark local addresses and journal local transactions  </span>    <span class="token keyword">if</span> local <span class="token punctuation">{</span>          pool<span class="token punctuation">.</span>locals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      pool<span class="token punctuation">.</span><span class="token function">journalTx</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> tx<span class="token punctuation">)</span></code></pre><p>最后，如果发现这个账户是本地的，就把它加到一个白名单里，默认会保证本地交易优先被加到txpool中。</p><h4 id="TxPool-promoteExecuteables"><a href="#TxPool-promoteExecuteables" class="headerlink" title="TxPool.promoteExecuteables()"></a>TxPool.promoteExecuteables()</h4><p>主要目的是把交易从queue列表“提拔”到pending列表，代码逻辑比较清楚，具体可以参见下面这张图：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-PUzBtCld-1656316462606)(<a href="http://olgjbx93m.bkt.clouddn.com/20180201-125715.png)]">http://olgjbx93m.bkt.clouddn.com/20180201-125715.png)]</a></p><p>根据不同的目的可以分为3块，分别以粉色、紫色、绿色标识。</p><p>粉色部分主要是为了把queue中的交易“提拔”到pending中。当然在这之前需要先要进行一番检查：</p><ul><li>丢弃nonce &lt; 账户当前nonce的交易，也就是已经被打包过的交易</li><li>丢弃转账金额 + gas消耗 &gt; 账户余额的交易，也就是会out-of-gas的交易</li><li>丢弃gas limit &gt; block gas limit的交易，这部分交易可能会导致区块生成失败</li></ul><p>紫色部分主要是为了清理pending列表，使其满足GlobalSlots和AccountSlots的限制条件：</p><ul><li>如果有些账户的交易数超过了AccountSlots，则先按交易数最少的账户进行均衡。举例来说，如果有10个账户交易数超过了AccountSlots（默认16），其中交易数最少的账户包含20笔交易，那么先把其他9个账户的交易数量削减到20。</li><li>如果经过上面的步骤，pending的长度还是超过了GlobalSlots，那就严格按照AccountSlots进行均衡，也就是把上面的10个账户的交易数进一步削减到16。</li></ul><p>绿色部分主要是为了清理queue列表，使其满足GlobalQueue和AccountQueue的限制条件：</p><ul><li>如果每个账户的交易数超过了AccountQueue，丢弃多余交易</li><li>如果queue的长度超过了GlobalQueue，则把账户按最后一次心跳时间排序，然后依次去除账户中的交易，直到满足限制条件位置。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码位于 core/tx_pool.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>pool <span class="token operator">*</span>TxPool<span class="token punctuation">)</span> <span class="token function">promoteExecutables</span><span class="token punctuation">(</span>accounts <span class="token punctuation">[</span><span class="token punctuation">]</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Track the promoted transactions to broadcast them at once</span><span class="token keyword">var</span> promoted <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token comment">// Gather all the accounts potentially needing updates</span><span class="token keyword">if</span> accounts <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>accounts <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> addr <span class="token operator">:=</span> <span class="token keyword">range</span> pool<span class="token punctuation">.</span>queue <span class="token punctuation">{</span>accounts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>accounts<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Iterate over all accounts and promote any executable transactions</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> addr <span class="token operator">:=</span> <span class="token keyword">range</span> accounts <span class="token punctuation">{</span>list <span class="token operator">:=</span> pool<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token keyword">if</span> list <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">continue</span> <span class="token comment">// Just in case someone calls with a non existing account</span><span class="token punctuation">}</span><span class="token comment">// Drop all transactions that are deemed too old (low nonce)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> list<span class="token punctuation">.</span><span class="token function">Forward</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>currentState<span class="token punctuation">.</span><span class="token function">GetNonce</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>hash <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Removed old queued transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Removed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Drop all transactions that are too costly (low balance or out of gas)</span>drops<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>currentState<span class="token punctuation">.</span><span class="token function">GetBalance</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span>currentMaxGas<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> drops <span class="token punctuation">{</span>hash <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Removed unpayable queued transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Removed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>queuedNofundsCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Gather all executable transactions and promote them</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> list<span class="token punctuation">.</span><span class="token function">Ready</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>pendingState<span class="token punctuation">.</span><span class="token function">GetNonce</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>hash <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> pool<span class="token punctuation">.</span><span class="token function">promoteTx</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> tx<span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Promoting queued transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>promoted <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>promoted<span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Drop all transactions over the allowed limit</span><span class="token keyword">if</span> <span class="token operator">!</span>pool<span class="token punctuation">.</span>locals<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> list<span class="token punctuation">.</span><span class="token function">Cap</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AccountQueue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>hash <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Removed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>queuedRateLimitCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Removed cap-exceeding queued transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Delete the entire queue entry if it became empty.</span><span class="token keyword">if</span> list<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">delete</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>queue<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Notify subsystem for new promoted transactions.</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>promoted<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span>txFeed<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>NewTxsEvent<span class="token punctuation">{</span>promoted<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// If the pending limit is overflown, start equalizing allowances</span>pending <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> list <span class="token operator">:=</span> <span class="token keyword">range</span> pool<span class="token punctuation">.</span>pending <span class="token punctuation">{</span>pending <span class="token operator">+=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> pending <span class="token operator">&gt;</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalSlots <span class="token punctuation">{</span>pendingBeforeCap <span class="token operator">:=</span> pending<span class="token comment">// Assemble a spam order to penalize large transactors first</span>spammers <span class="token operator">:=</span> prque<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> addr<span class="token punctuation">,</span> list <span class="token operator">:=</span> <span class="token keyword">range</span> pool<span class="token punctuation">.</span>pending <span class="token punctuation">{</span><span class="token comment">// Only evict transactions from high rollers</span><span class="token keyword">if</span> <span class="token operator">!</span>pool<span class="token punctuation">.</span>locals<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">uint64</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AccountSlots <span class="token punctuation">{</span>spammers<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token function">float32</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Gradually drop transactions from offenders</span>offenders <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> pending <span class="token operator">&gt;</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalSlots <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>spammers<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Retrieve the next offender if not local address</span>offender<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> spammers<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>offenders <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>offenders<span class="token punctuation">,</span> offender<span class="token punctuation">.</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Equalize balances until all the same or below threshold</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>offenders<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token comment">// Calculate the equalization threshold for all current offenders</span>threshold <span class="token operator">:=</span> pool<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>offender<span class="token punctuation">.</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Iteratively reduce all offenders until below limit or threshold reached</span><span class="token keyword">for</span> pending <span class="token operator">&gt;</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalSlots <span class="token operator">&amp;&amp;</span> pool<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>offenders<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>offenders<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> threshold <span class="token punctuation">{</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>offenders<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>list <span class="token operator">:=</span> pool<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>offenders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> list<span class="token punctuation">.</span><span class="token function">Cap</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Drop the transaction from the global pools too</span>hash <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Removed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Update the account nonce to the dropped transaction</span><span class="token keyword">if</span> nonce <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Nonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pool<span class="token punctuation">.</span>pendingState<span class="token punctuation">.</span><span class="token function">GetNonce</span><span class="token punctuation">(</span>offenders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> nonce <span class="token punctuation">{</span>pool<span class="token punctuation">.</span>pendingState<span class="token punctuation">.</span><span class="token function">SetNonce</span><span class="token punctuation">(</span>offenders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nonce<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Removed fairness-exceeding pending transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">}</span>pending<span class="token operator">--</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// If still above threshold, reduce to limit or min allowance</span><span class="token keyword">if</span> pending <span class="token operator">&gt;</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalSlots <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>offenders<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">for</span> pending <span class="token operator">&gt;</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalSlots <span class="token operator">&amp;&amp;</span> <span class="token function">uint64</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>offenders<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>offenders<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AccountSlots <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> addr <span class="token operator">:=</span> <span class="token keyword">range</span> offenders <span class="token punctuation">{</span>list <span class="token operator">:=</span> pool<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> list<span class="token punctuation">.</span><span class="token function">Cap</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Drop the transaction from the global pools too</span>hash <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Removed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Update the account nonce to the dropped transaction</span><span class="token keyword">if</span> nonce <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Nonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pool<span class="token punctuation">.</span>pendingState<span class="token punctuation">.</span><span class="token function">GetNonce</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">&gt;</span> nonce <span class="token punctuation">{</span>pool<span class="token punctuation">.</span>pendingState<span class="token punctuation">.</span><span class="token function">SetNonce</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> nonce<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Removed fairness-exceeding pending transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">}</span>pending<span class="token operator">--</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>pendingRateLimitCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>pendingBeforeCap <span class="token operator">-</span> pending<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// If we've queued more transactions than the hard limit, drop oldest ones</span>queued <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> list <span class="token operator">:=</span> <span class="token keyword">range</span> pool<span class="token punctuation">.</span>queue <span class="token punctuation">{</span>queued <span class="token operator">+=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> queued <span class="token operator">&gt;</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalQueue <span class="token punctuation">{</span><span class="token comment">// Sort all accounts with queued transactions by heartbeat</span>addresses <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>addresssByHeartbeat<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> addr <span class="token operator">:=</span> <span class="token keyword">range</span> pool<span class="token punctuation">.</span>queue <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token operator">!</span>pool<span class="token punctuation">.</span>locals<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// don't drop locals</span>addresses <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>addresses<span class="token punctuation">,</span> addressByHeartbeat<span class="token punctuation">{</span>addr<span class="token punctuation">,</span> pool<span class="token punctuation">.</span>beats<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>addresses<span class="token punctuation">)</span><span class="token comment">// Drop transactions until the total is below the limit or only locals remain</span><span class="token keyword">for</span> drop <span class="token operator">:=</span> queued <span class="token operator">-</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalQueue<span class="token punctuation">;</span> drop <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>addresses<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>addr <span class="token operator">:=</span> addresses<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>addresses<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>list <span class="token operator">:=</span> pool<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>addr<span class="token punctuation">.</span>address<span class="token punctuation">]</span>addresses <span class="token operator">=</span> addresses<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>addresses<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">// Drop all transactions if they are less than the overflow</span><span class="token keyword">if</span> size <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> size <span class="token operator">&lt;=</span> drop <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> list<span class="token punctuation">.</span><span class="token function">Flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span><span class="token function">removeTx</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span>drop <span class="token operator">-=</span> sizequeuedRateLimitCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token comment">// Otherwise drop only last few transactions</span>txs <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">Flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>txs<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> drop <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span><span class="token function">removeTx</span><span class="token punctuation">(</span>txs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>drop<span class="token operator">--</span>queuedRateLimitCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="广播交易"><a href="#广播交易" class="headerlink" title="广播交易"></a>广播交易</h2><p>交易提交到txpool中后，还需要广播出去，一方面通知EVM执行该交易，另一方面要把交易信息广播给其他结点。具体调用在 <code>promoteExecutables</code> 提到的promoteTx()函数中：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码位于 core/tx_pool.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>pool <span class="token operator">*</span>TxPool<span class="token punctuation">)</span> <span class="token function">promoteExecutables</span><span class="token punctuation">(</span>accounts <span class="token punctuation">[</span><span class="token punctuation">]</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span> <span class="token comment">// Gather all executable transactions and promote them</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> list<span class="token punctuation">.</span><span class="token function">Ready</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>pendingState<span class="token punctuation">.</span><span class="token function">GetNonce</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>hash <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> pool<span class="token punctuation">.</span><span class="token function">promoteTx</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> tx<span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Promoting queued transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>promoted <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>promoted<span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token comment">// Notify subsystem for new promoted transactions.</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>promoted<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span>txFeed<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>NewTxsEvent<span class="token punctuation">{</span>promoted<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>promoteTx 详细代码：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 代码 crypto/tx_pool.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>pool <span class="token operator">*</span>TxPool<span class="token punctuation">)</span> <span class="token function">promoteTx</span><span class="token punctuation">(</span>addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> tx <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token comment">// Try to insert the transaction into the pending queue</span><span class="token keyword">if</span> pool<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newTxList</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span>list <span class="token operator">:=</span> pool<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>addr<span class="token punctuation">]</span>inserted<span class="token punctuation">,</span> old <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> pool<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PriceBump<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>inserted <span class="token punctuation">{</span><span class="token comment">// An older transaction was better, discard this</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Removed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pendingDiscardCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment">// Otherwise discard any previous transaction and mark this</span><span class="token keyword">if</span> old <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Removed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pendingReplaceCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Failsafe to work around direct pending inserts (tests)</span><span class="token keyword">if</span> pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>pool<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>priced<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Set the potentially new pending nonce and notify any subsystems of the new tx</span>pool<span class="token punctuation">.</span>beats<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pool<span class="token punctuation">.</span>pendingState<span class="token punctuation">.</span><span class="token function">SetNonce</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">Nonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>先更新了最后一次心跳时间，然后更新账户的nonce值。</p><p><strong>pool.txFeed.Send</strong> 发送一个TxPreEvent事件，外部可以通过SubscribeNewTxsEvent()函数订阅该事件：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pool <span class="token operator">*</span>TxPool<span class="token punctuation">)</span> <span class="token function">SubscribeNewTxsEvent</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span><span class="token operator">&lt;-</span> core<span class="token punctuation">.</span>NewTxsEvent<span class="token punctuation">)</span> event<span class="token punctuation">.</span>Subscription <span class="token punctuation">{</span><span class="token keyword">return</span> pool<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">Track</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>txFeed<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>我们只要搜索一下这个函数，就可以知道哪些组件订阅了该事件了。</p><h3 id="执行交易"><a href="#执行交易" class="headerlink" title="执行交易"></a>执行交易</h3><p>第一个订阅的地方位于miner/worker.go：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">newWorker</span><span class="token punctuation">(</span>config <span class="token operator">*</span>params<span class="token punctuation">.</span>ChainConfig<span class="token punctuation">,</span> engine consensus<span class="token punctuation">.</span>Engine<span class="token punctuation">,</span> coinbase common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> eth Backend<span class="token punctuation">,</span> mux <span class="token operator">*</span>event<span class="token punctuation">.</span>TypeMux<span class="token punctuation">)</span> <span class="token operator">*</span>worker <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token comment">// Subscribe NewTxsEvent for tx pool</span>worker<span class="token punctuation">.</span>txsSub <span class="token operator">=</span> eth<span class="token punctuation">.</span><span class="token function">TxPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SubscribeNewTxsEvent</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span>txsCh<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>开启了一个goroutine来接收TxPreEvent，看一下update()函数：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>worker<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> self<span class="token punctuation">.</span>txsSub<span class="token punctuation">.</span><span class="token function">Unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> self<span class="token punctuation">.</span>chainHeadSub<span class="token punctuation">.</span><span class="token function">Unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> self<span class="token punctuation">.</span>chainSideSub<span class="token punctuation">.</span><span class="token function">Unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token comment">// Handle NewTxsEvent</span><span class="token keyword">case</span> ev <span class="token operator">:=</span> <span class="token operator">&lt;-</span>self<span class="token punctuation">.</span>txsCh<span class="token punctuation">:</span><span class="token comment">// Apply transactions to the pending state if we're not mining.</span><span class="token comment">//</span><span class="token comment">// Note all transactions received may not be continuous with transactions</span><span class="token comment">// already included in the current mining block. These transactions will</span><span class="token comment">// be automatically eliminated.</span><span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>self<span class="token punctuation">.</span>mining<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>self<span class="token punctuation">.</span>currentMu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>txs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span>types<span class="token punctuation">.</span>Transactions<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> ev<span class="token punctuation">.</span>Txs <span class="token punctuation">{</span>acc<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">Sender</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>current<span class="token punctuation">.</span>signer<span class="token punctuation">,</span> tx<span class="token punctuation">)</span>txs<span class="token punctuation">[</span>acc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>txs<span class="token punctuation">[</span>acc<span class="token punctuation">]</span><span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token punctuation">}</span>txset <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">NewTransactionsByPriceAndNonce</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>current<span class="token punctuation">.</span>signer<span class="token punctuation">,</span> txs<span class="token punctuation">)</span>self<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">commitTransactions</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>mux<span class="token punctuation">,</span> txset<span class="token punctuation">,</span> self<span class="token punctuation">.</span>chain<span class="token punctuation">,</span> self<span class="token punctuation">.</span>coinbase<span class="token punctuation">)</span>self<span class="token punctuation">.</span><span class="token function">updateSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>currentMu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// If we're mining, but nothing is being processed, wake on new transactions</span><span class="token keyword">if</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Clique <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Clique<span class="token punctuation">.</span>Period <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>self<span class="token punctuation">.</span><span class="token function">commitNewWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，如果结点不挖矿的话，这里会立即调用commitTransactions()提交给EVM执行，获得本地回执。</p><p>如果结点挖矿的话，miner会调用commitNewWork()，内部也会调用commitTransactions()执行交易。</p><h3 id="广播给其他结点"><a href="#广播给其他结点" class="headerlink" title="广播给其他结点"></a>广播给其他结点</h3><p>另一个订阅的地方位于eth/handler.go：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span>maxPeers <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token comment">// broadcast transactions</span>pm<span class="token punctuation">.</span>txsCh <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> core<span class="token punctuation">.</span>NewTxsEvent<span class="token punctuation">,</span> txChanSize<span class="token punctuation">)</span>pm<span class="token punctuation">.</span>txsSub <span class="token operator">=</span> pm<span class="token punctuation">.</span>txpool<span class="token punctuation">.</span><span class="token function">SubscribeNewTxsEvent</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>txsCh<span class="token punctuation">)</span><span class="token keyword">go</span> pm<span class="token punctuation">.</span><span class="token function">txBroadcastLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>同样也是启动了一个goroutine来接收TxPreEvent事件，看一下txBroadcastLoop()函数：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">txBroadcastLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">{</span>          <span class="token keyword">select</span> <span class="token punctuation">{</span>          <span class="token keyword">case</span> event <span class="token operator">:=</span> <span class="token operator">&lt;-</span>pm<span class="token punctuation">.</span>txCh<span class="token punctuation">:</span>              pm<span class="token punctuation">.</span><span class="token function">BroadcastTx</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>Tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span>            <span class="token comment">// Err() channel will be closed when unsubscribing.  </span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>pm<span class="token punctuation">.</span>txSub<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">return</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>继续跟踪BroadcastTx()函数：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">BroadcastTxs</span><span class="token punctuation">(</span>txs types<span class="token punctuation">.</span>Transactions<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> txset <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>peer<span class="token punctuation">]</span>types<span class="token punctuation">.</span>Transactions<span class="token punctuation">)</span><span class="token comment">// Broadcast transactions to a batch of peers not knowing about it</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> txs <span class="token punctuation">{</span>peers <span class="token operator">:=</span> pm<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">PeersWithoutTx</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> peer <span class="token operator">:=</span> <span class="token keyword">range</span> peers <span class="token punctuation">{</span>txset<span class="token punctuation">[</span>peer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>txset<span class="token punctuation">[</span>peer<span class="token punctuation">]</span><span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">"Broadcast transaction"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"recipients"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>peers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// FIXME include this again: peers = peers[:int(math.Sqrt(float64(len(peers))))]</span><span class="token keyword">for</span> peer<span class="token punctuation">,</span> txs <span class="token operator">:=</span> <span class="token keyword">range</span> txset <span class="token punctuation">{</span>peer<span class="token punctuation">.</span><span class="token function">AsyncSendTransactions</span><span class="token punctuation">(</span>txs<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，这里会通过P2P向所有没有该交易的结点发送该交易。</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 以太坊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-ethereum以太坊源码解析完整版</title>
      <link href="/2018/06/01/go-ethereum-yi-tai-fang-yuan-ma-jie-xi-wan-zheng-ban/"/>
      <url>/2018/06/01/go-ethereum-yi-tai-fang-yuan-ma-jie-xi-wan-zheng-ban/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="go-ethereum-code-analysis"><a href="#go-ethereum-code-analysis" class="headerlink" title="go-ethereum-code-analysis"></a>go-ethereum-code-analysis</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/go-ethereum%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md">go-ethereum代码阅读环境搭建</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/a%E9%BB%84%E7%9A%AE%E4%B9%A6%E9%87%8C%E9%9D%A2%E5%87%BA%E7%8E%B0%E7%9A%84%E6%89%80%E6%9C%89%E7%9A%84%E7%AC%A6%E5%8F%B7%E7%B4%A2%E5%BC%95.md">以太坊黄皮书 符号索引</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/rlp%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.md">rlp源码解析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/trie%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">trie源码分析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/ethdb%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">ethdb源码分析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/rpc%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">rpc源码分析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/p2p%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">p2p源码分析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/eth%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">eth协议源码分析</a></li><li>core源码分析  <ul><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-chain_indexer%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.md">区块链索引 chain_indexer源码分析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-bloombits%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">布隆过滤器索引 bloombits源码分析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-state%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">以太坊的trie树管理 回滚等操作 state源码分析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-state-process%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">交易执行和处理部分源码分析</a></li><li>vm 虚拟机源码分析  <ul><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-vm-stack-memory%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">虚拟机堆栈和内存数据结构分析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-vm-jumptable-instruction.md">虚拟机指令,跳转表,解释器源码分析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-vm%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">虚拟机源码分析</a></li></ul></li><li>待确认交易池的管理txPool  <ul><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-txlist%E4%BA%A4%E6%98%93%E6%B1%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">交易执行和处理部分源码分析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-txpool%E4%BA%A4%E6%98%93%E6%B1%A0%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">交易执行和处理部分源码分析</a></li></ul></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-genesis%E5%88%9B%E4%B8%96%E5%8C%BA%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">创世区块的源码分析</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-blockchain%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">blockchain 源码分析</a></li></ul></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/miner%E6%8C%96%E7%9F%BF%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90CPU%E6%8C%96%E7%9F%BF.md">miner挖矿部分源码分析CPU挖矿</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CClique_PoA%E4%BB%8B%E7%BB%8D.md">以太坊测试网络Clique_PoA介绍</a></li></ul><p>原文链接：<a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis">https://github.com/ZtesoftCS/go-ethereum-code-analysis</a></p><p>以太坊源码：<a href="https://github.com/ethereum/go-ethereum">https://github.com/ethereum/go-ethereum</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊源码解析 - 下载、编译 go-ethereum ，搭建私有链</title>
      <link href="/2018/05/30/yi-tai-fang-yuan-ma-jie-xi-xia-zai-bian-yi-go-ethereum-da-jian-si-you-lian/"/>
      <url>/2018/05/30/yi-tai-fang-yuan-ma-jie-xi-xia-zai-bian-yi-go-ethereum-da-jian-si-you-lian/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/ethereum/go-ethereum.git</code></pre><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> go-ethereum$ <span class="token function">make</span> geth </code></pre><p>将 <code>geth</code> 添加到环境变量中 <code>vi ~/.bashrc</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GETH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$GOPATH</span>/src/github.com/ethereum/go-ethereum/build"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PATH</span>:<span class="token variable">$GETH</span>/bin"</span></code></pre><p>然后执行 <code>source ~/.bashrc</code>，使配置生效。</p><p>检查是否安装成功</p><pre class="language-bash" data-language="bash"><code class="language-bash">geth --help</code></pre><p>如果输出一些帮助提示命令，则说明安装成功。</p><h2 id="搭建私有链"><a href="#搭建私有链" class="headerlink" title="搭建私有链"></a>搭建私有链</h2><h3 id="配置初始状态"><a href="#配置初始状态" class="headerlink" title="配置初始状态"></a>配置初始状态</h3><p>要运行以太坊私有链，需要定义自己的创世区块，创世区块信息写在一个 JSON 格式的配置文件中。首先将下面的内容保存到一个 JSON 文件中，例如 <code>genesis.json</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> ~/privatechain$ <span class="token builtin class-name">cd</span> privatechain$ <span class="token function">mkdir</span> data0$ <span class="token function">vi</span> genesis.json </code></pre><p><strong>genesis.json 的代码</strong></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"chainId"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>         <span class="token property">"homesteadBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"eip155Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"eip158Block"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"alloc"</span>      <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"coinbase"</span>   <span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"difficulty"</span> <span class="token operator">:</span> <span class="token string">"0x20000"</span><span class="token punctuation">,</span>  <span class="token property">"extraData"</span>  <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"gasLimit"</span>   <span class="token operator">:</span> <span class="token string">"0x2fefd8"</span><span class="token punctuation">,</span>  <span class="token property">"nonce"</span>      <span class="token operator">:</span> <span class="token string">"0x0000000000000042"</span><span class="token punctuation">,</span>  <span class="token property">"mixhash"</span>    <span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"parentHash"</span> <span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"timestamp"</span>  <span class="token operator">:</span> <span class="token string">"0x00"</span><span class="token punctuation">}</span></code></pre><p>其中，chainID 指定了独立的区块链网络 ID。网络 ID 在连接到其他节点的时候会用到，以太坊公网的网络 ID 是 1，为了不与公有链网络冲突，运行私有链节点的时候要指定自己的网络 ID。不同 ID 网络的节点无法相互连接。配置文件还对当前挖矿难度 difficulty、区块 Gas 消耗限制 gasLimit 等参数进行了设置。</p><h3 id="初始化：写入创世区块"><a href="#初始化：写入创世区块" class="headerlink" title="初始化：写入创世区块"></a>初始化：写入创世区块</h3><p>准备好创世区块配置文件后，需要初始化区块链，将上面的创世区块信息写入到区块链中。首先要新建一个目录用来存放区块链数据，假设新建的数据目录为 ~/privatechain/data0，genesis.json 保存在 ~/privatechain 中，此时目录结构应该是这样的：</p><pre class="language-bash" data-language="bash"><code class="language-bash">privatechain├── data0└── genesis.json</code></pre><p>执行初始化命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">geth --datadir data0 init genesis.json</code></pre><p>上面的命令的主体是 <code>geth init</code>，表示初始化区块链，命令可以带有选项和参数，其中 <code>--datadir</code> 选项后面跟一个目录名，这里为 <code>data0</code>，表示指定数据存放目录为 <code>data0</code>，<code>genesis.json</code> 是 <code>init</code> 命令的参数。</p><p>运行上面的命令，会读取 <code>genesis.json</code> 文件，根据其中的内容，将创世区块写入到区块链中。如果看到以下的输出内容，说明初始化成功了。</p><pre class="language-bash" data-language="bash"><code class="language-bash">INFO <span class="token punctuation">[</span>01-29<span class="token operator">|</span><span class="token number">21</span>:21:13<span class="token punctuation">]</span> Maximum peer count                       <span class="token assign-left variable">ETH</span><span class="token operator">=</span><span class="token number">25</span> <span class="token assign-left variable">LES</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">total</span><span class="token operator">=</span><span class="token number">25</span>INFO <span class="token punctuation">[</span>01-29<span class="token operator">|</span><span class="token number">21</span>:21:13<span class="token punctuation">]</span> Allocated cache and <span class="token function">file</span> handles         <span class="token assign-left variable">database</span><span class="token operator">=</span>/Users/fujinliang/privatechain/data0/geth/chaindata <span class="token assign-left variable">cache</span><span class="token operator">=</span><span class="token number">16</span> <span class="token assign-left variable">handles</span><span class="token operator">=</span><span class="token number">16</span>INFO <span class="token punctuation">[</span>01-29<span class="token operator">|</span><span class="token number">21</span>:21:13<span class="token punctuation">]</span> Writing custom genesis block INFO <span class="token punctuation">[</span>01-29<span class="token operator">|</span><span class="token number">21</span>:21:13<span class="token punctuation">]</span> Persisted trie from memory database      <span class="token assign-left variable">nodes</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">0</span>.00B <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">358.89</span>µs <span class="token assign-left variable">gcnodes</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">gcsize</span><span class="token operator">=</span><span class="token number">0</span>.00B <span class="token assign-left variable">gctime</span><span class="token operator">=</span>0s <span class="token assign-left variable">livenodes</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">livesize</span><span class="token operator">=</span><span class="token number">0</span>.00BINFO <span class="token punctuation">[</span>01-29<span class="token operator">|</span><span class="token number">21</span>:21:13<span class="token punctuation">]</span> Successfully wrote genesis state         <span class="token assign-left variable">database</span><span class="token operator">=</span>chaindata                                           <span class="token assign-left variable">hash</span><span class="token operator">=</span>5e1fc7…d790e0INFO <span class="token punctuation">[</span>01-29<span class="token operator">|</span><span class="token number">21</span>:21:13<span class="token punctuation">]</span> Allocated cache and <span class="token function">file</span> handles         <span class="token assign-left variable">database</span><span class="token operator">=</span>/Users/fujinliang/privatechain/data0/geth/lightchaindata <span class="token assign-left variable">cache</span><span class="token operator">=</span><span class="token number">16</span> <span class="token assign-left variable">handles</span><span class="token operator">=</span><span class="token number">16</span>INFO <span class="token punctuation">[</span>01-29<span class="token operator">|</span><span class="token number">21</span>:21:13<span class="token punctuation">]</span> Writing custom genesis block INFO <span class="token punctuation">[</span>01-29<span class="token operator">|</span><span class="token number">21</span>:21:13<span class="token punctuation">]</span> Persisted trie from memory database      <span class="token assign-left variable">nodes</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">0</span>.00B <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">2.633</span>µs  <span class="token assign-left variable">gcnodes</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">gcsize</span><span class="token operator">=</span><span class="token number">0</span>.00B <span class="token assign-left variable">gctime</span><span class="token operator">=</span>0s <span class="token assign-left variable">livenodes</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">livesize</span><span class="token operator">=</span><span class="token number">0</span>.00BINFO <span class="token punctuation">[</span>01-29<span class="token operator">|</span><span class="token number">21</span>:21:13<span class="token punctuation">]</span> Successfully wrote genesis state         <span class="token assign-left variable">database</span><span class="token operator">=</span>lightchaindata                                           <span class="token assign-left variable">hash</span><span class="token operator">=</span>5e1fc7…d790e0</code></pre><p>初始化成功后，会在数据目录 data0 中生成 geth 和 keystore 两个文件夹，此时目录结构如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">privatechain├── data0│   ├── geth│   │   ├── chaindata│   │   │   ├── 000001.log│   │   │   ├── CURRENT│   │   │   ├── LOCK│   │   │   ├── LOG│   │   │   └── MANIFEST-000000│   │   └── lightchaindata│   │       ├── 000001.log│   │       ├── CURRENT│   │       ├── LOCK│   │       ├── LOG│   │       └── MANIFEST-000000│   └── keystore└── genesis.json</code></pre><p>其中 <code>geth/chaindata</code> 中存放的是区块数据，<code>keystore</code> 中存放的是账户数据。</p><h3 id="启动私有链节点"><a href="#启动私有链节点" class="headerlink" title="启动私有链节点"></a>启动私有链节点</h3><pre class="language-bash" data-language="bash"><code class="language-bash">geth --datadir data0 --networkid <span class="token number">110</span> console</code></pre><p>上面命令的主体是 <code>geth console</code>，表示启动节点并进入交互式控制台，–datadir选项指定使用data0作为数据目录，<code>--networkid</code> 选项后面跟一个数字，这里是110，表示指定这个私有链的网络id为110。网络id在连接到其他节点的时候会用到，以太坊公网的网络id是1，为了不与公有链网络冲突，运行私有链节点的时候要指定自己的网络id。</p><p>运行上面的命令后，就启动了区块链节点并进入了该节点的控制台：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.Welcome to the Geth JavaScript console<span class="token operator">!</span>instance: Geth/v1.8.10-unstable-ccc0debb/darwin-amd64/go1.10.2 modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0<span class="token operator">&gt;</span> </code></pre><p>这是一个交互式的 JavaScript 执行环境，在这里面可以执行 JavaScript 代码，其中 &gt; 是命令提示符。在这个环境里也内置了一些用来操作以太坊的 JavaScript 对象，可以直接使用这些对象。这些对象主要包括：</p><ul><li>eth：包含一些跟操作区块链相关的方法；</li><li>net：包含一些查看p2p网络状态的方法；</li><li>admin：包含一些与管理节点相关的方法；</li><li>miner：包含启动&amp;停止挖矿的一些方法；</li><li>personal：主要包含一些管理账户的方法；</li><li>txpool：包含一些查看交易内存池的方法；</li><li>web3：包含了以上对象，还包含一些单位换算的方法。</li></ul><h2 id="控制台操作"><a href="#控制台操作" class="headerlink" title="控制台操作"></a>控制台操作</h2><p>进入以太坊 Javascript Console 后，就可以使用里面的内置对象做一些操作，这些内置对象提供的功能很丰富，比如查看区块和交易、创建账户、挖矿、发送交易、部署智能合约等。</p><p>常用命令有：</p><ul><li>personal.newAccount()：创建账户；</li><li>personal.unlockAccount()：解锁账户；</li><li>eth.accounts：枚举系统中的账户；</li><li>eth.getBalance()：查看账户余额，返回值的单位是 Wei（Wei 是以太坊中最小货币面额单位，类似比特币中的聪，1 ether = 10^18 Wei）；</li><li>eth.blockNumber：列出区块总数；</li><li>eth.getTransaction()：获取交易；</li><li>eth.getBlock()：获取区块；</li><li>miner.start()：开始挖矿；</li><li>miner.stop()：停止挖矿；</li><li>eth.coinbase：挖矿奖励的账户</li><li>web3.fromWei()：Wei 换算成以太币；</li><li>web3.toWei()：以太币换算成 Wei；</li><li>txpool.status：交易池中的状态；</li><li>admin.addPeer()：连接到其他节点；</li></ul><h3 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h3><p>输入 <code>eth.accounts</code> 查询系统中的账户：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> eth.accounts<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><p>显示为 <code>[]</code>，表示没有账户，接下来使用 <code>personal.newAccount()</code> 来创建一个账户：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> personal.newAccount<span class="token punctuation">(</span><span class="token punctuation">)</span>Passphrase: Repeat passphrase: <span class="token string">"0xfb9cc019fc650a1699d05b7fb564b83c3a72b64d"</span></code></pre><p><code>Passphrase</code> 表示输入密码，<code>Repeat passphrase</code> 表示输入确认密码</p><p>再次创建一个账户</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> personal.newAccount<span class="token punctuation">(</span><span class="token punctuation">)</span>Passphrase: Repeat passphrase: <span class="token string">"0xc6b5702b15a3794374e28f41f36e1e8dbdd564df"</span></code></pre><p>查看刚刚创建的用户：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> eth.accounts<span class="token punctuation">[</span><span class="token string">"0xfb9cc019fc650a1699d05b7fb564b83c3a72b64d"</span>, <span class="token string">"0xc6b5702b15a3794374e28f41f36e1e8dbdd564df"</span><span class="token punctuation">]</span></code></pre><p>账户默认会保存在数据目录的 <code>data0/keystore</code> 文件夹中。可以查看其中的文件</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"fb9cc019fc650a1699d05b7fb564b83c3a72b64d"</span><span class="token punctuation">,</span>     <span class="token property">"crypto"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"cipher"</span><span class="token operator">:</span> <span class="token string">"aes-128-ctr"</span><span class="token punctuation">,</span>         <span class="token property">"ciphertext"</span><span class="token operator">:</span> <span class="token string">"0efae4f94134172b785f1f635be8e70342bf31e1e0ecad21d672594f09ccf572"</span><span class="token punctuation">,</span>         <span class="token property">"cipherparams"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"iv"</span><span class="token operator">:</span> <span class="token string">"37f4f3fa2cf070b70e3eb668fad6f46f"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token property">"kdf"</span><span class="token operator">:</span> <span class="token string">"scrypt"</span><span class="token punctuation">,</span>         <span class="token property">"kdfparams"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"dklen"</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>             <span class="token property">"n"</span><span class="token operator">:</span> <span class="token number">262144</span><span class="token punctuation">,</span>             <span class="token property">"p"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>             <span class="token property">"r"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>             <span class="token property">"salt"</span><span class="token operator">:</span> <span class="token string">"1cdd1cf97fb882c3d3e734223668b47c888170e795346e11d0f521a71fe3aa2a"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token property">"mac"</span><span class="token operator">:</span> <span class="token string">"902a29db25a3a35a2568b04b30a8194201f07ab37c96ed1fe9af932fc1d38be0"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"ecd5beb2-8261-4207-8eff-2fa34678d064"</span><span class="token punctuation">,</span>     <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span></code></pre><h3 id="查看账户余额"><a href="#查看账户余额" class="headerlink" title="查看账户余额"></a>查看账户余额</h3><p>通过 <code>eth.getBalance()</code> 可以查看账户余额</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> eth.getBalance<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">&gt;</span> eth.getBalance<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">0</span></code></pre><p>目前两个账户的以太币余额都是0，要使账户有余额，可以从其他账户转账过来，或者通过挖矿来获得以太币奖励。</p><h3 id="启动-amp-停止挖矿"><a href="#启动-amp-停止挖矿" class="headerlink" title="启动&amp;停止挖矿"></a>启动&amp;停止挖矿</h3><p>通过 <code>miner.start()</code> 启动挖矿</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> miner.start<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>其中 start 的参数表示挖矿使用的线程数。第一次启动挖矿会先生成挖矿所需的 DAG 文件，这个过程有点慢，等进度达到 100% 后，就会开始挖矿，此时屏幕会被挖矿信息刷屏。</p><p>停止挖矿，在 console 中输入：</p><pre class="language-bash" data-language="bash"><code class="language-bash">miner.stop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>挖到一个区块会奖励5个以太币，挖矿所得的奖励会进入矿工的账户，这个账户叫做coinbase，默认情况下coinbase是本地账户中的第一个账户：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> eth.coinbase<span class="token string">"0xfb9cc019fc650a1699d05b7fb564b83c3a72b64d"</span></code></pre><p>可以通过 <code>miner.setEtherbase()</code> 将其他账户设置成 <code>coinbase</code> 即可</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> miner.setEtherbase<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">true</span><span class="token operator">&gt;</span> eth.coinbase<span class="token string">"0xc6b5702b15a3794374e28f41f36e1e8dbdd564df"</span></code></pre><p>重新启动挖矿，查看 <code>eth.accounts[1]</code> 是否可以获得以太币</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> miner.start<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>//等待几秒后<span class="token operator">&gt;</span> miner.stop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>查询账户余额：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> eth.getBalance<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">280000000000000000000</span><span class="token operator">&gt;</span> eth.getBalance<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">210000000000000000000</span></code></pre><p>发现账户0 和 账号1 都有以太币，说明 <code>miner.setEtherbase()</code> 设置成功。</p><p><code>getBalance()</code> 返回值的单位是wei，wei是以太币的最小单位，1个以太币=10的18次方个wei。要查看有多少个以太币，可以用web3.fromWei()将返回值换算成以太币：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> web3.fromWei<span class="token punctuation">(</span>eth.getBalance<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>,<span class="token string">'ether'</span><span class="token punctuation">)</span><span class="token number">280</span><span class="token operator">&gt;</span> web3.fromWei<span class="token punctuation">(</span>eth.getBalance<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>,<span class="token string">'ether'</span><span class="token punctuation">)</span><span class="token number">210</span></code></pre><h3 id="发送交易"><a href="#发送交易" class="headerlink" title="发送交易"></a>发送交易</h3><p>我们从账户0转移10个以太币到账户1,首先要解锁账户 0，才能发起交易：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> personal.unlockAccount<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Unlock account 0xfb9cc019fc650a1699d05b7fb564b83c3a72b64dPassphrase: <span class="token boolean">true</span></code></pre><p>发起交易</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> amount <span class="token operator">=</span> web3.toWei<span class="token punctuation">(</span><span class="token number">10</span>,<span class="token string">'ether'</span><span class="token punctuation">)</span><span class="token string">"10000000000000000000"</span><span class="token operator">&gt;</span> eth.sendTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span>from:eth.accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>,to:eth.accounts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>,value:amount<span class="token punctuation">}</span><span class="token punctuation">)</span>INFO <span class="token punctuation">[</span>05-29<span class="token operator">|</span><span class="token number">22</span>:37:32<span class="token punctuation">]</span> Submitted transaction                    <span class="token assign-left variable">fullhash</span><span class="token operator">=</span>0x493e8aa2bcb6b2a362bdbd86b2c454279e14beea43b444aeb45c7f667bf572e2 <span class="token assign-left variable">recipient</span><span class="token operator">=</span>0xc6b5702B15a3794374e28f41F36e1E8dBDd564DF<span class="token string">"0x493e8aa2bcb6b2a362bdbd86b2c454279e14beea43b444aeb45c7f667bf572e2"</span></code></pre><p>查询 账户1 的余额：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> web3.fromWei<span class="token punctuation">(</span>eth.getBalance<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>,<span class="token string">'ether'</span><span class="token punctuation">)</span><span class="token number">210</span></code></pre><p>发现账户余额没有发生改变，此时交易已经提交到区块链，但还未被处理，这可以通过用 <code>txpool.status</code> 命令可以看到本地交易池中有一个待确认的交易：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> txpool.status<span class="token punctuation">{</span>  pending: <span class="token number">1</span>,  queued: <span class="token number">0</span><span class="token punctuation">}</span></code></pre><p>其中有一条pending的交易，pending表示已提交但还未被处理的交易。</p><p>要使交易被处理，必须要挖矿。这里我们启动挖矿，然后等待挖到一个区块之后就停止挖矿：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span>miner.start<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>admin.sleepBlocks<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>miner.stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> web3.fromWei<span class="token punctuation">(</span>eth.getBalance<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>,<span class="token string">'ether'</span><span class="token punctuation">)</span><span class="token number">225.000378</span></code></pre><p>发现账户收到了账户的钱，还多了5个以太币。其实多出的5个以太币是挖矿奖励。</p><h3 id="查看交易和区块"><a href="#查看交易和区块" class="headerlink" title="查看交易和区块"></a>查看交易和区块</h3><p>查看当前区块总数：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> eth.blockNumber<span class="token number">99</span></code></pre><p>通过区块号查看区块：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> eth.getBlock<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  difficulty: <span class="token number">131328</span>,  extraData: <span class="token string">"0xd98301080a846765746888676f312e31302e328664617277696e"</span>,  gasLimit: <span class="token number">3160033</span>,  gasUsed: <span class="token number">0</span>,  hash: <span class="token string">"0x9679d0dc01045c3d15cbf29241ae1cd6de2e5661d3387c0980f6397e3fd9ed2c"</span>,  logsBloom: <span class="token string">"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"</span>,  miner: <span class="token string">"0xfb9cc019fc650a1699d05b7fb564b83c3a72b64d"</span>,  mixHash: <span class="token string">"0x05c369134eac2cb6227860b4ed11527b11825af3541712c5704914576c37c0a0"</span>,  nonce: <span class="token string">"0x00168a9831624417"</span>,  number: <span class="token number">6</span>,  parentHash: <span class="token string">"0xad68f0a581cf2144b8a05190b6310c7a9d945d9c338fd16b4708651b8813ad8b"</span>,  receiptsRoot: <span class="token string">"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"</span>,  sha3Uncles: <span class="token string">"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"</span>,  size: <span class="token number">537</span>,  stateRoot: <span class="token string">"0xfaa0a4ffe160a2937b967f9780ae0de51a465bcce6a3f6f3aa24b903df3d44a0"</span>,  timestamp: <span class="token number">1527602736</span>,  totalDifficulty: <span class="token number">918144</span>,  transactions: <span class="token punctuation">[</span><span class="token punctuation">]</span>,  transactionsRoot: <span class="token string">"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"</span>,  uncles: <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>通过交易hash（hash 值包含在上面交易返回值中）查看交易：</p><pre class="language-bash" data-language="bash"><code class="language-bash">eth.getTransaction<span class="token punctuation">(</span><span class="token string">"0x493e8aa2bcb6b2a362bdbd86b2c454279e14beea43b444aeb45c7f667bf572e2"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  blockHash: <span class="token string">"0xbe60f7ccddcb7cab39a7b932c0d89d37ac13ae14521cfdcb8ac359a5b6773655"</span>,  blockNumber: <span class="token number">99</span>,  from: <span class="token string">"0xfb9cc019fc650a1699d05b7fb564b83c3a72b64d"</span>,  gas: <span class="token number">90000</span>,  gasPrice: <span class="token number">18000000000</span>,  hash: <span class="token string">"0x493e8aa2bcb6b2a362bdbd86b2c454279e14beea43b444aeb45c7f667bf572e2"</span>,  input: <span class="token string">"0x"</span>,  nonce: <span class="token number">0</span>,  r: <span class="token string">"0x8da41e865d399fc4d8f813a39116e486db7658a04ea1f89ca0b7f44c02dd3c57"</span>,  s: <span class="token string">"0x15edd22404460cfc5e86c9735774a02aad024bc8c369ec531e4485f1012cbcf6"</span>,  to: <span class="token string">"0xc6b5702b15a3794374e28f41f36e1e8dbdd564df"</span>,  transactionIndex: <span class="token number">0</span>,  v: <span class="token string">"0x37"</span>,  value: <span class="token number">10000000000000000000</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 go-ethereum 私有链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-ethereum源码阅读环境搭建</title>
      <link href="/2018/05/29/go-ethereum-yuan-ma-yue-du-huan-jing-da-jian/"/>
      <url>/2018/05/29/go-ethereum-yuan-ma-yue-du-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="go-ethereum源码"><a href="#go-ethereum源码" class="headerlink" title="go-ethereum源码"></a>go-ethereum源码</h2><p>go-etherrum源码可以从<a href="https://github.com/ethereum/go-ethereum">github</a>上面下载，或者使用git克隆到本地。</p><h2 id="搭建go-ethereum调试环境"><a href="#搭建go-ethereum调试环境" class="headerlink" title="搭建go ethereum调试环境"></a>搭建go ethereum调试环境</h2><h3 id="windows-10-64bit"><a href="#windows-10-64bit" class="headerlink" title="windows 10 64bit"></a>windows 10 64bit</h3><p>首先下载go安装包进行安装，因为GO的网站被墙，所以从下面地址下载。</p><pre class="language-bash" data-language="bash"><code class="language-bash">https://studygolang.com/dl/golang/go1.9.1.windows-amd64.msi</code></pre><p>安装好之后，设置环境变量，把C:\Go\bin目录添加到你的PATH环境变量， 然后增加一个GOPATH的环境变量，GOPATH的值设置为你的GO语言下载的代码路径(我设置的是C:\GOPATH)</p><p><a href="https://raw.githubusercontent.com/wugang33/go-ethereum-code-analysis/master/picture/go_env_1.png"><img src="https://raw.githubusercontent.com/wugang33/go-ethereum-code-analysis/master/picture/go_env_1.png" alt="image"></a></p><p>安装git工具，请参考网络上的教程安装git工具， go语言从github自动下载代码需要git工具的支持</p><p>打开命令行工具下载 go-ethereum的代码</p><pre class="language-bash" data-language="bash"><code class="language-bash">go get github.com/ethereum/go-ethereum</code></pre><p>命令执行成功之后，代码就会下载到下面这个目录，%GOPATH%\src\github.com\ethereum\go-ethereum 如果执行过程中出现</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># github.com/ethereum/go-ethereum/crypto/secp256k1</span>exec: <span class="token string">"gcc"</span><span class="token builtin class-name">:</span> executable <span class="token function">file</span> not found <span class="token keyword">in</span> %<span class="token environment constant">PATH</span>%</code></pre><p>则需要安装gcc工具，我们从下面地址下载并安装</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://tdm-gcc.tdragon.net/download</code></pre><p>接下来安装IDE工具。 我是用的IDE是JetBrains的Gogland。 可以在下面地址下载</p><pre class="language-bash" data-language="bash"><code class="language-bash">https://download.jetbrains.com/go/gogland-173.2696.28.exe</code></pre><p>安装完成后打开IDE. 选择File -&gt; Open -&gt; 选择GOPATH\src\github.com\ethereum\go-ethereum目录打开。</p><p>然后打开go-ethereum/rlp/decode_test.go. 在编辑框右键选择运行， 如果运行成功，代表环境搭建完成。</p><p><a href="https://raw.githubusercontent.com/wugang33/go-ethereum-code-analysis/master/picture/go_env_2.png"><img src="https://raw.githubusercontent.com/wugang33/go-ethereum-code-analysis/master/picture/go_env_2.png" alt="image"></a></p><h3 id="Ubuntu-16-04-64bit"><a href="#Ubuntu-16-04-64bit" class="headerlink" title="Ubuntu 16.04 64bit"></a>Ubuntu 16.04 64bit</h3><p>go安装包进行安装</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> golang-go <span class="token function">git</span> -y</code></pre><p>golang环境配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash">编辑/etc/profile文件，在该文件中加入以下内容：<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOROOT</span><span class="token operator">=</span>/usr/bin/go  <span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span>/root/home/goproject<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOBIN</span><span class="token operator">=</span>/root/home/goproject/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOLIB</span><span class="token operator">=</span>/root/home/goproject/<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$GOBIN</span><span class="token builtin class-name">:</span><span class="token variable">$GOPATH</span>/bin:<span class="token variable">$GOROOT</span>/bin</code></pre><p>执行以下命令，使得环境变量生效：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">source</span> /etc/profile</code></pre><p>下载源码：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span>  /root/home/goproject<span class="token punctuation">;</span> <span class="token function">mkdir</span> src； <span class="token builtin class-name">cd</span> src  <span class="token comment">#进入go项目目录，并创建src目录, 并进入src目录</span>$ <span class="token function">git</span> clone https://github.com/ethereum/go-ethereum</code></pre><p>使用vim或其他IDE打开即可；</p><h2 id="环境测试"><a href="#环境测试" class="headerlink" title="环境测试"></a>环境测试</h2><p>打开go-ethereum/rlp/decode_test.go. 在编辑框右键选择运行， 如果运行成功，代表环境搭建完成</p><h3 id="go-ethereum-目录大概介绍"><a href="#go-ethereum-目录大概介绍" class="headerlink" title="go ethereum 目录大概介绍"></a>go ethereum 目录大概介绍</h3><p>go-ethereum项目的组织结构基本上是按照功能模块划分的目录，下面简单介绍一下各个目录的结构，每个目录在GO语言里面又被成为一个Package,我理解跟Java里面的Package应该是差不多的意思。</p><pre class="language-bash" data-language="bash"><code class="language-bash">accounts            实现了一个高等级的以太坊账户管理bmt         二进制的默克尔树的实现build           主要是编译和构建的一些脚本和配置cmd         命令行工具，又分了很多的命令行工具，下面一个一个介绍    /abigen     Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages    /bootnode   启动一个仅仅实现网络发现的节点    /evm        以太坊虚拟机的开发工具， 用来提供一个可配置的，受隔离的代码调试环境    /faucet         /geth       以太坊命令行客户端，最重要的一个工具    /p2psim     提供了一个工具来模拟http的API    /puppeth    创建一个新的以太坊网络的向导    /rlpdump    提供了一个RLP数据的格式化输出    /swarm      swarm网络的接入点    /util       提供了一些公共的工具    /wnode      这是一个简单的Whisper节点。 它可以用作独立的引导节点。此外，可以用于不同的测试和诊断目的。common          提供了一些公共的工具类compression     Package rle implements the run-length encoding used <span class="token keyword">for</span> Ethereum data.consensus       提供了以太坊的一些共识算法，比如ethhash, clique<span class="token punctuation">(</span>proof-of-authority<span class="token punctuation">)</span>console         console类contracts   core            以太坊的核心数据结构和算法<span class="token punctuation">(</span>虚拟机，状态，区块链，布隆过滤器<span class="token punctuation">)</span>crypto          加密和hash算法，eth         实现了以太坊的协议ethclient       提供了以太坊的RPC客户端ethdb           eth的数据库<span class="token punctuation">(</span>包括实际使用的leveldb和供测试使用的内存数据库<span class="token punctuation">)</span>ethstats        提供网络状态的报告event           处理实时的事件les         实现了以太坊的轻量级协议子集light           实现为以太坊轻量级客户端提供按需检索的功能log         提供对人机都友好的日志信息metrics         提供磁盘计数器miner           提供以太坊的区块创建和挖矿mobile          移动端使用的一些warpper<span class="token function">node</span>            以太坊的多种类型的节点p2p         以太坊p2p网络协议rlp         以太坊序列化处理rpc         远程方法调用swarm           swarm网络处理tests           测试trie            以太坊重要的数据结构Package trie implements Merkle Patricia Tries.whisper         提供了whisper节点的协议。</code></pre><p>可以看到以太坊的代码量还是挺大的，但是粗略看，代码结构还是挺好的。我希望先从一些比较独立的模块来进行分析。然后在深入分析内部的代码。重点可能集中在黄皮书里面没有涉及到的p2p网络等模块。</p><p>参考链接：<a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/go-ethereum%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md#go-ethereum%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">点击跳转原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>etcd 本机手动测试集群及 member 操作</title>
      <link href="/2018/05/29/etcd-ben-ji-shou-dong-ce-shi-ji-qun-ji-member-cao-zuo/"/>
      <url>/2018/05/29/etcd-ben-ji-shou-dong-ce-shi-ji-qun-ji-member-cao-zuo/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><p>下面只用同一台服务器进行三个成员节点的开启</p><p><strong>节点1</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">./etcd --name cd0 --initial-advertise-peer-urls http://127.0.0.1:2380 --listen-peer-urls http://127.0.0.1:2380 --listen-client-urls http://127.0.0.1:2379 --advertise-client-urls http://127.0.0.1:2379 --initial-cluster-token etcd-cluster-1 --initial-cluster <span class="token assign-left variable">cd0</span><span class="token operator">=</span>http://127.0.0.1:2380,cd1<span class="token operator">=</span>http://127.0.0.1:2480,cd2<span class="token operator">=</span>http://127.0.0.1:2580 --initial-cluster-state new</code></pre><p><strong>节点2</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">./etcd --name cd1 --initial-advertise-peer-urls http://127.0.0.1:2480 --listen-peer-urls http://127.0.0.1:2480 --listen-client-urls http://127.0.0.1:2479 --advertise-client-urls http://127.0.0.1:2479 --initial-cluster-token etcd-cluster-1 --initial-cluster <span class="token assign-left variable">cd0</span><span class="token operator">=</span>http://127.0.0.1:2380,cd1<span class="token operator">=</span>http://127.0.0.1:2480,cd2<span class="token operator">=</span>http://127.0.0.1:2580 --initial-cluster-state new</code></pre><p><strong>节点3</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">./etcd --name cd2 --initial-advertise-peer-urls http://127.0.0.1:2580 --listen-peer-urls http://127.0.0.1:2580 --listen-client-urls http://127.0.0.1:2579 --advertise-client-urls http://127.0.0.1:2579 --initial-cluster-token etcd-cluster-1 --initial-cluster <span class="token assign-left variable">cd0</span><span class="token operator">=</span>http://127.0.0.1:2380,cd1<span class="token operator">=</span>http://127.0.0.1:2480,cd2<span class="token operator">=</span>http://127.0.0.1:2580 --initial-cluster-state new</code></pre><h2 id="查询-member-列表"><a href="#查询-member-列表" class="headerlink" title="查询 member 列表"></a>查询 member 列表</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">ENDPOINTS</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:2379,127.0.0.1:2479,127.0.0.1:2579./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> member list</code></pre><p>运行结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">98f0c6bf64240842, started, cd2, http://127.0.0.1:2580, http://127.0.0.1:2579bf9071f4639c75cc, started, cd0, http://127.0.0.1:2380, http://127.0.0.1:2379e3ba87c3b4858ef1, started, cd1, http://127.0.0.1:2480, http://127.0.0.1:2479</code></pre><h2 id="添加-member-节点"><a href="#添加-member-节点" class="headerlink" title="添加 member 节点"></a>添加 member 节点</h2><p><strong>member add</strong> 添加节点</p><pre class="language-bash" data-language="bash"><code class="language-bash">./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> member <span class="token function">add</span> cd3 --peer-urls<span class="token operator">=</span>http://127.0.0.1:2180Member b9057cfdc8ff17ce added to cluster 9da8cd75487bd6dc</code></pre><p>运行结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ETCD_NAME</span><span class="token operator">=</span><span class="token string">"cd3"</span><span class="token assign-left variable">ETCD_INITIAL_CLUSTER</span><span class="token operator">=</span><span class="token string">"cd2=http://127.0.0.1:2580,cd3=http://127.0.0.1:2180,cd0=http://127.0.0.1:2380,cd1=http://127.0.0.1:2480"</span><span class="token assign-left variable">ETCD_INITIAL_ADVERTISE_PEER_URLS</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1:2180"</span><span class="token assign-left variable">ETCD_INITIAL_CLUSTER_STATE</span><span class="token operator">=</span><span class="token string">"existing"</span></code></pre><p><strong>查询 member 节点列表信息</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> member list</code></pre><p>运行结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">98f0c6bf64240842, started, cd2, http://127.0.0.1:2580, http://127.0.0.1:2579b9057cfdc8ff17ce, unstarted, , http://127.0.0.1:2180, bf9071f4639c75cc, started, cd0, http://127.0.0.1:2380, http://127.0.0.1:2379e3ba87c3b4858ef1, started, cd1, http://127.0.0.1:2480, http://127.0.0.1:2479</code></pre><p>通过查询结果可以发现：<code>http://127.0.0.1:2180</code> 显示状态为：<code>unstarted</code></p><p><strong>启动新节点</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">./etcd --name cd3 --listen-client-urls http://127.0.0.1:2179 --advertise-client-urls http://127.0.0.1:2179 --listen-peer-urls http://127.0.0.1:2180 --initial-advertise-peer-urls http://127.0.0.1:2180 --initial-cluster-state existing --initial-cluster <span class="token assign-left variable">cd2</span><span class="token operator">=</span>http://127.0.0.1:2580,cd0<span class="token operator">=</span>http://127.0.0.1:2380,cd3<span class="token operator">=</span>http://127.0.0.1:2180,cd1<span class="token operator">=</span>http://127.0.0.1:2480 --initial-cluster-token etcd-cluster-1</code></pre><p><strong>查询 member 节点列表信息</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> member list</code></pre><p>运行结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">98f0c6bf64240842, started, cd2, http://127.0.0.1:2580, http://127.0.0.1:2579b9057cfdc8ff17ce, started, cd3, http://127.0.0.1:2180, http://127.0.0.1:2179bf9071f4639c75cc, started, cd0, http://127.0.0.1:2380, http://127.0.0.1:2379e3ba87c3b4858ef1, started, cd1, http://127.0.0.1:2480, http://127.0.0.1:2479</code></pre><h2 id="删除-member"><a href="#删除-member" class="headerlink" title="删除 member"></a>删除 member</h2><pre class="language-bash" data-language="bash"><code class="language-bash">./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> member remove b9057cfdc8ff17ce</code></pre><p>运行结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Member b9057cfdc8ff17ce removed from cluster 9da8cd75487bd6dc</code></pre><p><strong>查询 member 节点列表信息</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> member list</code></pre><p>运行结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">98f0c6bf64240842, started, cd2, http://127.0.0.1:2580, http://127.0.0.1:2579bf9071f4639c75cc, started, cd0, http://127.0.0.1:2380, http://127.0.0.1:2379e3ba87c3b4858ef1, started, cd1, http://127.0.0.1:2480, http://127.0.0.1:2479</code></pre><h2 id="代码实现-member-的管理"><a href="#代码实现-member-的管理" class="headerlink" title="代码实现 member 的管理"></a>代码实现 member 的管理</h2><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">addMember</span><span class="token punctuation">(</span>cli <span class="token operator">*</span>clientv3<span class="token punctuation">.</span>Client<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    peerURLs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"http://127.0.0.1:2180"</span><span class="token punctuation">}</span>    mresp<span class="token punctuation">,</span> err <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">MemberAdd</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> peerURLs<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"added member.PeerURLs:"</span><span class="token punctuation">,</span> mresp<span class="token punctuation">.</span>Member<span class="token punctuation">.</span>PeerURLs<span class="token punctuation">)</span>    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">MemberList</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"添加后 members:"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Members<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>执行完 添加节点，需要打开终端启动节点服务器</p><pre class="language-bash" data-language="bash"><code class="language-bash">./etcd --name cd3 --listen-client-urls http://127.0.0.1:2179 --advertise-client-urls http://127.0.0.1:2179 --listen-peer-urls http://127.0.0.1:2180 --initial-advertise-peer-urls http://127.0.0.1:2180 --initial-cluster-state existing --initial-cluster <span class="token assign-left variable">cd2</span><span class="token operator">=</span>http://127.0.0.1:2580,cd0<span class="token operator">=</span>http://127.0.0.1:2380,cd3<span class="token operator">=</span>http://127.0.0.1:2180,cd1<span class="token operator">=</span>http://127.0.0.1:2480 --initial-cluster-token etcd-cluster-1</code></pre><p><strong>如果启动失败，需要删除 cd3 的信息</strong></p><p><img src="http://olgjbx93m.bkt.clouddn.com/20180129-104838.png"></p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 删除节点</span><span class="token keyword">func</span> delMember <span class="token punctuation">(</span>cli <span class="token operator">*</span>clientv3<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> memberId <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">MemberList</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">MemberRemove</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> memberId<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    resp<span class="token punctuation">,</span> err <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">MemberList</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"删除后 members:"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Members<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/coreos/etcd/clientv3"</span>    <span class="token string">"log"</span>    <span class="token string">"fmt"</span>    <span class="token string">"context"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    dialTimeout    <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second    requestTimeout <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second    endpoints      <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"127.0.0.1:2379"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    cli<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientv3<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>clientv3<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>        Endpoints<span class="token punctuation">:</span>   endpoints<span class="token punctuation">,</span>        DialTimeout<span class="token punctuation">:</span> dialTimeout<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> cli<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">MemberList</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"members:"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Members<span class="token punctuation">)</span>    <span class="token comment">//添加member</span>    <span class="token comment">//addMember(cli)</span>    <span class="token comment">// 删除节点</span>    <span class="token comment">//delMember(cli,uint64(7438291228984697304))</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">addMember</span><span class="token punctuation">(</span>cli <span class="token operator">*</span>clientv3<span class="token punctuation">.</span>Client<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    peerURLs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"http://127.0.0.1:2180"</span><span class="token punctuation">}</span>    mresp<span class="token punctuation">,</span> err <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">MemberAdd</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> peerURLs<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"added member.PeerURLs:"</span><span class="token punctuation">,</span> mresp<span class="token punctuation">.</span>Member<span class="token punctuation">.</span>PeerURLs<span class="token punctuation">)</span>    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">MemberList</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"添加后 members:"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Members<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 删除节点</span><span class="token keyword">func</span> delMember <span class="token punctuation">(</span>cli <span class="token operator">*</span>clientv3<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> memberId <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">MemberList</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">MemberRemove</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> memberId<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    resp<span class="token punctuation">,</span> err <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">MemberList</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"删除后 members:"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Members<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> etcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>etcd  一个分布式一致性键值存储系统</title>
      <link href="/2018/05/28/etcd-yi-ge-fen-bu-shi-yi-zhi-xing-jian-zhi-cun-chu-xi-tong/"/>
      <url>/2018/05/28/etcd-yi-ge-fen-bu-shi-yi-zhi-xing-jian-zhi-cun-chu-xi-tong/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>etcd是一个分布式一致性键值存储系统，用于共享配置和服务发现，专注于：</p><ul><li><p>简单:良好定义的，面向用户的API (gRPC)</p></li><li><p>安全： 带有可选客户端证书认证的自动TLS</p></li><li><p>快速:测试验证，每秒10000写入</p></li><li><p>可靠:使用Raft适当分布</p></li></ul><p>etcd是Go编写，并使用Raft一致性算法来管理高可用复制日志：</p><h1 id="单服务器版"><a href="#单服务器版" class="headerlink" title="单服务器版"></a>单服务器版</h1><hr><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p <span class="token variable">$GOPATH</span>/src/github.com/coreos$ <span class="token builtin class-name">cd</span> <span class="token operator">!</span>$$ <span class="token function">git</span> clone https://github.com/coreos/etcd.git$ <span class="token builtin class-name">cd</span> etcd$ ./build$ ./bin/etcd</code></pre><p>另外一种下载安装的方法：</p><p>直接下载etcd二进制 （包含etcd、etcdctl）<br><a href="https://github.com/coreos/etcd/releases">https://github.com/coreos/etcd/releases</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>$ ./bin/etcd$ <span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>$ <span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> ./bin/etcdctl put foo bar<span class="token comment"># 输出结果显示OK，表示安装成功</span>OK</code></pre><h2 id="搭建本地集群"><a href="#搭建本地集群" class="headerlink" title="搭建本地集群"></a>搭建本地集群</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ go get github.com/mattn/goreman$ <span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/coreos/etcd$ goreman -f Procfile start</code></pre><p>查看本地集群的服务器列表</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/coreos/etcd$ ./bin/etcdctl member list<span class="token comment"># 显示结果</span>8211f1d0f64f3269: <span class="token assign-left variable">name</span><span class="token operator">=</span>infra1 <span class="token assign-left variable">peerURLs</span><span class="token operator">=</span>http://127.0.0.1:12380 <span class="token assign-left variable">clientURLs</span><span class="token operator">=</span>http://127.0.0.1:2379 <span class="token assign-left variable">isLeader</span><span class="token operator">=</span>false91bc3c398fb3c146: <span class="token assign-left variable">name</span><span class="token operator">=</span>infra2 <span class="token assign-left variable">peerURLs</span><span class="token operator">=</span>http://127.0.0.1:22380 <span class="token assign-left variable">clientURLs</span><span class="token operator">=</span>http://127.0.0.1:22379 <span class="token assign-left variable">isLeader</span><span class="token operator">=</span>truefd422379fda50e48: <span class="token assign-left variable">name</span><span class="token operator">=</span>infra3 <span class="token assign-left variable">peerURLs</span><span class="token operator">=</span>http://127.0.0.1:32380 <span class="token assign-left variable">clientURLs</span><span class="token operator">=</span>http://127.0.0.1:32379 <span class="token assign-left variable">isLeader</span><span class="token operator">=</span>false</code></pre><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span>$ ./bin/etcdctl put foo <span class="token string">"Hello World!"</span>OK$ ./bin/etcdctl get foofooHello World<span class="token operator">!</span>$ ./bin/etcdctl  --write-out<span class="token operator">=</span><span class="token string">"json"</span> get foo<span class="token punctuation">{</span><span class="token string">"header"</span>:<span class="token punctuation">{</span><span class="token string">"cluster_id"</span>:17237436991929493444,<span class="token string">"member_id"</span>:9372538179322589801,<span class="token string">"revision"</span>:2,<span class="token string">"raft_term"</span>:2<span class="token punctuation">}</span>,<span class="token string">"kvs"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token builtin class-name">:</span><span class="token string">"Zm9v"</span>,<span class="token string">"create_revision"</span>:2,<span class="token string">"mod_revision"</span>:2,<span class="token string">"version"</span>:1,<span class="token string">"value"</span><span class="token builtin class-name">:</span><span class="token string">"SGVsbG8gV29ybGQh"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>,<span class="token string">"count"</span>:1<span class="token punctuation">}</span></code></pre><h3 id="根据前缀查询"><a href="#根据前缀查询" class="headerlink" title="根据前缀查询"></a>根据前缀查询</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ ./bin/etcdctl put web1 value1$ ./bin/etcdctl put web2 value2$ ./bin/etcdctl put web3 value3$ ./bin/etcdctl get web --prefixweb1value1web2value2web3value3</code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ ./bin/etcdctl put key myvalue$ ./bin/etcdctl del key<span class="token number">1</span>$ ./bin/etcdctl get key// 查询结果为空$ ./bin/etcdctl put k1 value1$ ./bin/etcdctl put k2 value2$ ./bin/etcdctl del k --prefix<span class="token number">2</span>$ ./bin/etcdctl get k --prefix// 查询结果为空</code></pre><h3 id="事务写入"><a href="#事务写入" class="headerlink" title="事务写入"></a>事务写入</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ ./bin/etcdctl put user1 badOK$ ./bin/etcdctl txn --interactivecompares:// 输入以下内容，输入结束按 两次回车value<span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"bad"</span>      //如果 user1 <span class="token operator">=</span> bad，则执行 get user1 success requests <span class="token punctuation">(</span>get, put, del<span class="token punctuation">)</span>:get user1//如果 user1 <span class="token operator">!=</span> bad，则执行 put user1 goodfailure requests <span class="token punctuation">(</span>get, put, del<span class="token punctuation">)</span>:put user1 good// 运行结果，执行 successSUCCESSuser1bad$ ./bin/etcdctl txn --interactivecompares:value<span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"111"</span>  // 如果 user1 <span class="token operator">=</span> <span class="token number">111</span>，则执行 get user1 success requests <span class="token punctuation">(</span>get, put, del<span class="token punctuation">)</span>:get user1//如果 user1 <span class="token operator">!=</span> <span class="token number">111</span>，则执行 put user1 <span class="token number">2222</span>failure requests <span class="token punctuation">(</span>get, put, del<span class="token punctuation">)</span>:put user1 <span class="token number">2222</span>// 运行结果，执行 failureFAILUREOK$ ./bin/etcdctl get user1user1<span class="token number">2222</span></code></pre><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><pre class="language-bash" data-language="bash"><code class="language-bash">// 当 stock1 的数值改变（ put 方法）的时候，watch 会收到通知$ ./bin/etcdctl <span class="token function">watch</span> stock1// 新打开终端$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span>$ ./bin/etcdctl put stock1 <span class="token number">1000</span>//在watch 终端显示PUTstock1<span class="token number">1000</span>$ ./bin/etcdctl <span class="token function">watch</span> stock --prefix$ ./bin/etcdctl put stock1 <span class="token number">10</span>$ ./bin/etcdctl put stock2 <span class="token number">20</span></code></pre><h3 id="lease"><a href="#lease" class="headerlink" title="lease"></a>lease</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ ./bin/etcdctl lease grant <span class="token number">300</span><span class="token comment"># lease 326963a02758b527 granted with TTL(300s)</span>$ ./bin/etcdctl put sample value --lease<span class="token operator">=</span>326963a02758b527OK$ ./bin/etcdctl get sample$ ./bin/etcdctl lease keep-alive 326963a02758b520$ ./bin/etcdctl lease revoke 326963a02758b527lease 326963a02758b527 revoked<span class="token comment"># or after 300 seconds</span>$ ./bin/etcdctl get sample</code></pre><h3 id="Distributed-locks"><a href="#Distributed-locks" class="headerlink" title="Distributed locks"></a>Distributed locks</h3><pre class="language-bash" data-language="bash"><code class="language-bash">//第一终端$ ./bin/etcdctl lock mutex1mutex1/326963a02758b52d<span class="token comment"># 第二终端</span>$ ./bin/etcdctl lock mutex1// 当第一个终端结束了，第二个终端会显示mutex1/326963a02758b531</code></pre><h3 id="Elections"><a href="#Elections" class="headerlink" title="Elections"></a>Elections</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ ./bin/etcdctl elect one p1one/326963a02758b539p1<span class="token comment"># another client with the same name blocks</span>$ ./bin/etcdctl elect one p2//结束第一终端，第二终端显示one/326963a02758b53ep2</code></pre><h3 id="Cluster-status"><a href="#Cluster-status" class="headerlink" title="Cluster status"></a>Cluster status</h3><p>集群状态</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ ./bin/etcdctl --write-out<span class="token operator">=</span>table endpoint status$ ./bin/etcdctl endpoint health</code></pre><h3 id="Snapshot"><a href="#Snapshot" class="headerlink" title="Snapshot"></a>Snapshot</h3><pre class="language-bash" data-language="bash"><code class="language-bash">./bin/etcdctl snapshot save my.dbSnapshot saved at my.db./bin/etcdctl --write-out<span class="token operator">=</span>table snapshot status my.db</code></pre><h3 id="Member"><a href="#Member" class="headerlink" title="Member"></a>Member</h3><pre class="language-bash" data-language="bash"><code class="language-bash">./bin/etcdctl member list -w table</code></pre><h1 id="etcd-多台服务器集群"><a href="#etcd-多台服务器集群" class="headerlink" title="etcd 多台服务器集群"></a>etcd 多台服务器集群</h1><hr><h2 id="下载安装-etcd"><a href="#下载安装-etcd" class="headerlink" title="下载安装 etcd"></a>下载安装 etcd</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p <span class="token variable">$GOPATH</span>/src/github.com/coreos$ <span class="token builtin class-name">cd</span> <span class="token operator">!</span>$$ <span class="token function">git</span> clone https://github.com/coreos/etcd.git$ <span class="token builtin class-name">cd</span> etcd$ ./build</code></pre><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>每个节点都要执行以下配置，HOST_1、HOST_2、HOST_3 分别设置为多台服务器的IP</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">TOKEN</span><span class="token operator">=</span>token-01<span class="token assign-left variable">CLUSTER_STATE</span><span class="token operator">=</span>new<span class="token assign-left variable">NAME_1</span><span class="token operator">=</span>machine-1<span class="token assign-left variable">NAME_2</span><span class="token operator">=</span>machine-2<span class="token assign-left variable">NAME_3</span><span class="token operator">=</span>machine-3<span class="token assign-left variable">HOST_1</span><span class="token operator">=</span><span class="token number">192.168</span>.1.126<span class="token assign-left variable">HOST_2</span><span class="token operator">=</span><span class="token number">192.168</span>.1.119<span class="token assign-left variable">HOST_3</span><span class="token operator">=</span><span class="token number">192.168</span>.1.103<span class="token assign-left variable">CLUSTER</span><span class="token operator">=</span><span class="token variable">${NAME_1}</span><span class="token operator">=</span>http://<span class="token variable">${HOST_1}</span>:2380,<span class="token variable">${NAME_2}</span><span class="token operator">=</span>http://<span class="token variable">${HOST_2}</span>:2380,<span class="token variable">${NAME_3}</span><span class="token operator">=</span>http://<span class="token variable">${HOST_3}</span>:2380</code></pre><p><strong>machine 1</strong> 执行如下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/coreos/etcd/bin<span class="token comment"># For machine 1</span><span class="token assign-left variable">THIS_NAME</span><span class="token operator">=</span><span class="token variable">${NAME_1}</span><span class="token assign-left variable">THIS_IP</span><span class="token operator">=</span><span class="token variable">${HOST_1}</span>./etcd --data-dir<span class="token operator">=</span>data.etcd --name <span class="token variable">${THIS_NAME}</span> --initial-advertise-peer-urls http://<span class="token variable">${THIS_IP}</span>:2380 --listen-peer-urls http://<span class="token variable">${THIS_IP}</span>:2380 --advertise-client-urls http://<span class="token variable">${THIS_IP}</span>:2379 --listen-client-urls http://<span class="token variable">${THIS_IP}</span>:2379 --initial-cluster <span class="token variable">${CLUSTER}</span> --initial-cluster-state <span class="token variable">${CLUSTER_STATE}</span> --initial-cluster-token <span class="token variable">${TOKEN}</span></code></pre><p><strong>machine 2</strong> 执行如下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/coreos/etcd/bin<span class="token comment"># For machine 2</span><span class="token assign-left variable">THIS_NAME</span><span class="token operator">=</span><span class="token variable">${NAME_2}</span><span class="token assign-left variable">THIS_IP</span><span class="token operator">=</span><span class="token variable">${HOST_2}</span>./etcd --data-dir<span class="token operator">=</span>data.etcd --name <span class="token variable">${THIS_NAME}</span> --initial-advertise-peer-urls http://<span class="token variable">${THIS_IP}</span>:2380 --listen-peer-urls http://<span class="token variable">${THIS_IP}</span>:2380 --advertise-client-urls http://<span class="token variable">${THIS_IP}</span>:2379 --listen-client-urls http://<span class="token variable">${THIS_IP}</span>:2379 --initial-cluster <span class="token variable">${CLUSTER}</span> --initial-cluster-state <span class="token variable">${CLUSTER_STATE}</span> --initial-cluster-token <span class="token variable">${TOKEN}</span></code></pre><p><strong>machine 3</strong> 执行如下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/coreos/etcd/bin<span class="token comment"># For machine 3</span><span class="token assign-left variable">THIS_NAME</span><span class="token operator">=</span><span class="token variable">${NAME_3}</span><span class="token assign-left variable">THIS_IP</span><span class="token operator">=</span><span class="token variable">${HOST_3}</span>./etcd --data-dir<span class="token operator">=</span>data.etcd --name <span class="token variable">${THIS_NAME}</span> --initial-advertise-peer-urls http://<span class="token variable">${THIS_IP}</span>:2380 --listen-peer-urls http://<span class="token variable">${THIS_IP}</span>:2380 --advertise-client-urls http://<span class="token variable">${THIS_IP}</span>:2379 --listen-client-urls http://<span class="token variable">${THIS_IP}</span>:2379 --initial-cluster <span class="token variable">${CLUSTER}</span> --initial-cluster-state <span class="token variable">${CLUSTER_STATE}</span> --initial-cluster-token <span class="token variable">${TOKEN}</span></code></pre><p>检测服务器运行是否正常</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/coreos/etcd/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">HOST_1</span><span class="token operator">=</span><span class="token number">192.168</span>.1.126<span class="token assign-left variable">HOST_2</span><span class="token operator">=</span><span class="token number">192.168</span>.1.119<span class="token assign-left variable">HOST_3</span><span class="token operator">=</span><span class="token number">192.168</span>.1.103<span class="token assign-left variable">ENDPOINTS</span><span class="token operator">=</span><span class="token variable">$HOST_1</span>:2379,<span class="token variable">$HOST_2</span>:2379,<span class="token variable">$HOST_3</span>:2379./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> member list</code></pre><h2 id="存储数据-1"><a href="#存储数据-1" class="headerlink" title="存储数据"></a>存储数据</h2><pre class="language-bash" data-language="bash"><code class="language-bash">./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> put foo <span class="token string">"Hello World!"</span>./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> get foo./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> --write-out<span class="token operator">=</span><span class="token string">"json"</span> get foo</code></pre><h2 id="根据前缀查询-1"><a href="#根据前缀查询-1" class="headerlink" title="根据前缀查询"></a>根据前缀查询</h2><pre class="language-bash" data-language="bash"><code class="language-bash">./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> put web1 value1./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> put web2 value2./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> put web3 value3./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> get web --prefixweb1value1web2value2web3value3</code></pre><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><pre class="language-bash" data-language="bash"><code class="language-bash">./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> put key myvalue./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> del key./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> put k1 value1./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> put k2 value2./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> del k --prefix</code></pre><h2 id="事务写入-1"><a href="#事务写入-1" class="headerlink" title="事务写入"></a>事务写入</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ ./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> put user1 badOK$ ./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> txn --interactivecompares:// 输入以下内容，输入结束按 两次回车value<span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"bad"</span>      //如果 user1 <span class="token operator">=</span> bad，则执行 get user1 success requests <span class="token punctuation">(</span>get, put, del<span class="token punctuation">)</span>:get user1//如果 user1 <span class="token operator">!=</span> bad，则执行 put user1 goodfailure requests <span class="token punctuation">(</span>get, put, del<span class="token punctuation">)</span>:put user1 good// 运行结果，执行 successSUCCESSuser1bad$ ./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> txn --interactivecompares:value<span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"111"</span>  // 如果 user1 <span class="token operator">=</span> <span class="token number">111</span>，则执行 get user1 success requests <span class="token punctuation">(</span>get, put, del<span class="token punctuation">)</span>:get user1//如果 user1 <span class="token operator">!=</span> <span class="token number">111</span>，则执行 put user1 <span class="token number">2222</span>failure requests <span class="token punctuation">(</span>get, put, del<span class="token punctuation">)</span>:put user1 <span class="token number">2222</span>// 运行结果，执行 failureFAILUREOK$ ./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> get user1user1<span class="token number">2222</span></code></pre><h2 id="watch-1"><a href="#watch-1" class="headerlink" title="watch"></a>watch</h2><pre class="language-bash" data-language="bash"><code class="language-bash">// 当 stock1 的数值改变（ put 方法）的时候，watch 会收到通知./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> <span class="token function">watch</span> stock1// 新打开终端$ <span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/coreos/etcd/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">HOST_1</span><span class="token operator">=</span><span class="token number">192.168</span>.1.126<span class="token assign-left variable">HOST_2</span><span class="token operator">=</span><span class="token number">192.168</span>.1.119<span class="token assign-left variable">HOST_3</span><span class="token operator">=</span><span class="token number">192.168</span>.1.103<span class="token assign-left variable">ENDPOINTS</span><span class="token operator">=</span><span class="token variable">$HOST_1</span>:2379,<span class="token variable">$HOST_2</span>:2379,<span class="token variable">$HOST_3</span>:2379./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> put stock1 <span class="token number">1000</span>./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> <span class="token function">watch</span> stock --prefix./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> put stock1 <span class="token number">10</span>./etcdctl --endpoints<span class="token operator">=</span><span class="token variable">$ENDPOINTS</span> put stock2 <span class="token number">20</span></code></pre><h2 id="更多操作"><a href="#更多操作" class="headerlink" title="更多操作"></a>更多操作</h2><p><a href="https://coreos.com/etcd/docs/latest/">https://coreos.com/etcd/docs/latest/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> etcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DPoS即股权授权证明（Delegated Proof of Stake）</title>
      <link href="/2018/05/28/dpos-ji-gu-quan-shou-quan-zheng-ming-delegated-proof-of-stake/"/>
      <url>/2018/05/28/dpos-ji-gu-quan-shou-quan-zheng-ming-delegated-proof-of-stake/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="https://img-blog.csdn.net/20180526173506752?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="配图"><br>公链通常会遇到可扩展性问题，为了解决这些问题，一些区块链（如Lisk，EOS，Steem，BitShares和Ark）采用了股权授权证明（DPoS）共识机制。DPoS力求快速的进行交易和创建区块，同时不影响区块链核心的分散激励结构。</p><p>在传统的<a href="https://blog.csdn.net/luckydog612/article/details/80463449">股权证明共识机制</a>中，用户可以将自己拥有的加密货币换来股票，从而获得验证交易和创建区块并且获得奖励的权利。DPoS是PoS共识的一个变种，旨在更有效地达成共识。</p><h2 id="Voting"><a href="#Voting" class="headerlink" title="Voting"></a>Voting</h2><p>在DPoS机制中，用户投票给“witnesses”（用户所信任的用户），得票最多的“witnesses”获得验证交易的权利，用户甚至可以将他们的投票权授权给其他用户，代表他们行使选择可信赖的“witnesses”。</p><p>根据每个选民股份的大小对投票进行权衡，用户不需要拥有大量的股权也可以成为顶级“witnesses”，拥有大量股权的用户可以使拥有少量的成为顶级“witnesses”。</p><h2 id="Witnesses"><a href="#Witnesses" class="headerlink" title="Witnesses"></a>Witnesses</h2><p>顶级“witnesses”的数量是一定的，这些“witnesses”负责验证交易和创建新的区块，然后获得相关费用作为奖励。</p><p>虽然顶级“witnesses”可以阻止特定交易被存储在区块中，但是他们不能更改任何交易的任何信息。因此他们相当于工作量证明机制中的“矿工”。</p><p>投票是一个连续的过程，每个顶级”witness“随时都有可能被拥有更多投票，让人信赖的用户代替。随着区块链的逐渐增长，竞选成为或继续担任顶级”witnesses“的竞争压力会变得越来越大。用户可以投票使他们信赖的用户成为顶级”witnesses“，同样也可以通过投票删除（罢免）失去信赖的顶级”witnesses“。</p><p>对于一个顶级”witness“来说，避免损失收入和声誉是抵制恶意行为的动机。</p><h2 id="Delegates"><a href="#Delegates" class="headerlink" title="Delegates"></a>Delegates</h2><p>DPoS系统也支持给一个”delegates“（负责维护网络的可信房）组投票，”delegates“负责监督整个区块链协议的治理和性能，但在交易验证和区块创建中不起任何作用。</p><p>例如，”delegates“可以提出改变区块的大小或者应该支付给验证交易的”witness“奖励的数量，”delegates“一旦提出上述提案，区块链的用户可以投票决定是否采用。<br><img src="https://img-blog.csdn.net/20180528131931441?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Blockchain projects currently using Delegated Proof of Stake."></p><h2 id="DPoS的优势"><a href="#DPoS的优势" class="headerlink" title="DPoS的优势"></a>DPoS的优势</h2><ul><li><p>他们要比传统的PoW和PoS要快得多。</p></li><li><p>每个用户都有使他们诚实地履行职责的激励机制，DPoS的激励机制和结构增强了区块链的安全性和完整性。</p></li><li><p>不需要使用专业的设备就可以成为用户、witness或delegate，一台普通的电脑就足够了。</p></li><li><p>与功耗较高的工作量证明哈希算法相比，DPoS的能效更高。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>DPoS是共识机制新的一次演变，它建立在PoS共识机制的基础上，并大大提高了速度和可扩展性。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 共识机制 DPoS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PoS即股权证明（Proof of Stake)</title>
      <link href="/2018/05/26/pos-ji-gu-quan-zheng-ming-proof-of-stake/"/>
      <url>/2018/05/26/pos-ji-gu-quan-zheng-ming-proof-of-stake/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>随着以太坊从原来的工作量证明（PoW）机制逐步向股权证明（PoS）过度，股权证明受到了越来越多的关注。为了更好地理解股权证明，我们需要先了解一下工作量证明的基本概念。</p><h2 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h2><p>工作量证明是一个挖矿的过程，用户安装强大的计算机或者挖矿设备来解决复杂的数学难题，一旦成功地对各种交易进行了计算，已验证的交易将被存储到分布式账本或者公链上新的区块中。挖矿验证交易的合法性并创建新的货币单元。</p><p>这个工作对旷工来说是有一定困难的，但对于网络却很容易。网络上许多旷工都争相成为首先解决数学难题的人，第一个解决数学难题的旷工向全网广播自己的解决方案，其他旷工进行验证，验证成功后，区块链存储交易信息，并提供一定数量的数字货币作为奖励给该旷工。这个过程本质上就是需要旷工通过不断地计算，去寻找一个合适的nonce值，代入到事先设置好的数学公式，如果其他旷工成功地验证了这个nonce值，那就说明挖矿成功，存储交易信息并产生奖励。</p><p>随着越来越多的算力参与挖矿，大部分数字货币被挖出，对产生新区块的计算次数要求越来越高，从而给旷工得到奖励增加了难度。在工作量证明机制中，旷工需要收回硬件和电力成本，为了产生更大的财富，这促使旷工尽可能的使用挖矿效率较高的挖矿设备，寻找更廉价的电力。</p><h2 id="股权证明"><a href="#股权证明" class="headerlink" title="股权证明"></a>股权证明</h2><p>工作量证明是通过一定量的计算来验证交易并产生新的区块，与此不同的是，股权证明要求用户拥有一定数量的加密货币。新区块的创造者是由一种伪随机的方式选择的，取决于用户拥有的财富，也被成为“股权”。在股权证明机制中，区块的产生被成为“伪造”或者“创造”，而不是通过挖矿。验证交易并产生新区块的用户成为伪造者。</p><p>在大多数应用股权证明的区块链中，在启动区块链的时候创建了数字货币单位，并且数字货币的数量是固定不变的，因此，伪造者通过收取交易手续费作为奖励。在有些区块链中，可以通过增加货币发行数量来创建货币单元，此时就可以将创建新的货币单元产生的数字货币作为奖励。</p><p>为了验证交易并创建新的区块，伪造者必须将自己拥有的数字货币来换取这种权利，可以把这种行为看作是把财富放在托管账户中来获得股票，如果他们验证了欺诈性交易，他们将会失去他们所有用的股票，以及他们作为伪造者的权利。一旦将自己拥有的货币换取股权，他们就可以参与区块的产生，因为他们在区块链上投入了自己的资金，理论上来说这促使他们只会验证正确的交易。</p><p>这个机制没有提供在区块链创立初始阶段处理数字货币的方法，所以使用这个机制的加密货币会从ICO开始出售他们预先开采的货币，或者初始时使用工作量证明机制，让旷工挖矿获得货币，然后再转换成股权证明机制。<br><img src="https://img-blog.csdn.net/20180526160153108?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h2 id="区块选择方法"><a href="#区块选择方法" class="headerlink" title="区块选择方法"></a>区块选择方法</h2><p>为了使股权证明机制有效的工作，需要有一种方法来选择哪个用户可以伪造区块链中的新的有效区块。如果仅仅通过用户投入资金的多少来选择区块的伪造者，这将会对投入大量资金的用户带来永久的优势。为了解决这个问题，创建了集中独特的选择方法，这些方法中最受欢迎的就属“随机区块选择”和“基于币龄的选择方法”。</p><h3 id="随机区块选择"><a href="#随机区块选择" class="headerlink" title="随机区块选择"></a>随机区块选择</h3><p>在这种选择方法中，用一个公式来选择下一个区块的伪造者，这取决于用户最小hash值和股权的大小组合。因为股权的大小是公开的，每个节点通常都可以预测谁会成为下一个区块的伪造者。Nxt和BlackCoin是使用随机区块选择方法的加密货币。</p><h3 id="基于币龄的选择方法"><a href="#基于币龄的选择方法" class="headerlink" title="基于币龄的选择方法"></a>基于币龄的选择方法</h3><p>基于币龄的选择方法是计算投入者的币龄来决定下一个区块的伪造者，币龄的计算方法是投入者将数字货币作为股权的天数乘以作为股权的数字货币的数量。持有者持有数字货币至少30天才能参与下一个区块的竞选，拥有股权越多，持有股权时间越长，成为下一个区块的伪造者的几率就会越大。用户一旦成为伪造者，他们的币龄将会重置为0，因此，他们需要等待至少30天才能再次参加竞选。该机制分配用户最多在90天的时间内伪造下一个区块，这个可以阻止拥有大量股权的用户操控区块链，从而使网络更加安全。因为伪造者成功创建区块的机会越大，他们创建区块的时间就越长，伪造者期待更多的创造区块，这个机制促进了一个健康的社区。</p><p>Peercoin是一个基于股权证明的加密货币系统，它使用了基于币龄的选择方法和随机区块选择相结合的选择方法。Peercoin的开发者声称，这使得对网络的恶意攻击变得更加困难，因为购买超过一半的加密货币会比收购51%的股权散列能力更加昂贵。</p><p>大部分基于股权证明的加密货币通过手续费的形式支付奖励以验证交易并创建新的区块，设定一个用户期待的目标利率。在这种加密货币的情况下，随着时间的推移，伪造者得到越来越多的加密货币，该利率就会变成货币供应的最大利率。</p><p>因为电力和硬件成本远远低于工作量证明机制，股权证明显得更加的友好和高效，鼓励越来越多的人参与进来。</p><p><strong><em>注：本文基于国外文档翻译总结，如有错误还请不吝赐教！</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PoS 股权证明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 实现 Proof of Stake 共识机制</title>
      <link href="/2018/05/26/go-shi-xian-proof-of-stake-gong-shi-ji-zhi/"/>
      <url>/2018/05/26/go-shi-xian-proof-of-stake-gong-shi-ji-zhi/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="什么是-Proof-of-Stake"><a href="#什么是-Proof-of-Stake" class="headerlink" title="什么是 Proof of Stake"></a>什么是 Proof of Stake</h2><p>在PoW中，节点之间通过hash的计算力来竞赛以获取下一个区块的记账权，而在PoS中，块是已经铸造好的，铸造的过程是基于每个节点(Node)愿意作为抵押的令牌(Token)数量。如果验证者愿意提供更多的令牌作为抵押品，他们就有更大的机会记账下一个区块并获得奖励。</p><h2 id="实现-Proof-of-Stake-主要功能点"><a href="#实现-Proof-of-Stake-主要功能点" class="headerlink" title="实现 Proof of Stake 主要功能点"></a>实现 Proof of Stake 主要功能点</h2><ul><li>我们将有一个中心化的TCP服务节点，其他节点可以连接该服务器</li><li>最新的区块链状态将定期广播到每个节点</li><li>每个节点都能提议建立新的区块</li><li>基于每个节点的令牌数量，其中一个节点将随机地(以令牌数作为加权值)作为获胜者，并且将该区块添加到区块链中</li></ul><h2 id="实现-Proof-of-Stake"><a href="#实现-Proof-of-Stake" class="headerlink" title="实现 Proof of Stake"></a>实现 Proof of Stake</h2><h3 id="设置-TCP-服务器的端口"><a href="#设置-TCP-服务器的端口" class="headerlink" title="设置 TCP 服务器的端口"></a>设置 TCP 服务器的端口</h3><p>新建 <code>.env</code>，添加如下内容 <code>PORT=9000</code></p><h3 id="安装依赖软件"><a href="#安装依赖软件" class="headerlink" title="安装依赖软件"></a>安装依赖软件</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ go get github.com/davecgh/go-spew/spew$ go get github.com/joho/godotenv</code></pre><ul><li><p><code>spew</code> 在控制台中格式化输出相应的结果。</p></li><li><p><code>godotenv</code> 可以从我们项目的根目录的 <code>.env</code> 文件中读取数据。</p></li></ul><h3 id="引入相应的包"><a href="#引入相应的包" class="headerlink" title="引入相应的包"></a>引入相应的包</h3><p>新建 <code>main.go</code>，引入相应的包</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bufio"</span>    <span class="token string">"crypto/sha256"</span>    <span class="token string">"encoding/hex"</span>    <span class="token string">"encoding/json"</span>    <span class="token string">"fmt"</span>    <span class="token string">"io"</span>    <span class="token string">"log"</span>    <span class="token string">"math/rand"</span>    <span class="token string">"net"</span>    <span class="token string">"os"</span>    <span class="token string">"strconv"</span>    <span class="token string">"sync"</span>    <span class="token string">"time"</span>    <span class="token string">"github.com/davecgh/go-spew/spew"</span>    <span class="token string">"github.com/joho/godotenv"</span><span class="token punctuation">)</span></code></pre><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// Block represents each 'item' in the blockchain</span><span class="token keyword">type</span> Block <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Index     <span class="token builtin">int</span>    Timestamp <span class="token builtin">string</span>    BPM       <span class="token builtin">int</span>    Hash      <span class="token builtin">string</span>    PrevHash  <span class="token builtin">string</span>    Validator <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment">// Blockchain is a series of validated Blocks</span><span class="token keyword">var</span> Blockchain <span class="token punctuation">[</span><span class="token punctuation">]</span>Block<span class="token keyword">var</span> tempBlocks <span class="token punctuation">[</span><span class="token punctuation">]</span>Block<span class="token comment">// candidateBlocks handles incoming blocks for validation</span><span class="token keyword">var</span> candidateBlocks <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Block<span class="token punctuation">)</span><span class="token comment">// announcements broadcasts winning validator to all nodes</span><span class="token keyword">var</span> announcements <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">var</span> mutex <span class="token operator">=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// validators keeps track of open validators and balances</span><span class="token keyword">var</span> validators <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span></code></pre><ul><li><code>Block</code> 是每个区块的内容</li><li><code>Blockchain</code> 是我们的官方区块链，它只是一串经过验证的区块集合。每个区块中的 <code>PrevHash</code> 与前面块的 <code>Hash</code> 相比较，以确保我们的链是正确的。 <code>tempBlocks</code> 是临时存储单元，在区块被选出来并添加到 <code>BlockChain</code> 之前，临时存储在这里</li><li><code>candidateBlocks</code> 是 <code>Block</code> 的通道，任何一个节点在提出一个新块时都将它发送到这个通道</li><li><code>announcements</code> 也是一个通道，我们的主Go TCP服务器将向所有节点广播最新的区块链</li><li><code>mutex</code>是一个标准变量，允许我们控制读/写和防止数据竞争</li><li><code>validators</code> 是节点的存储map，同时也会保存每个节点持有的令牌数</li></ul><h3 id="生成区块"><a href="#生成区块" class="headerlink" title="生成区块"></a>生成区块</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">generateBlock</span><span class="token punctuation">(</span>oldBlock Block<span class="token punctuation">,</span> BPM <span class="token builtin">int</span><span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Block<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newBlock Block    t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    newBlock<span class="token punctuation">.</span>Index <span class="token operator">=</span> oldBlock<span class="token punctuation">.</span>Index <span class="token operator">+</span> <span class="token number">1</span>    newBlock<span class="token punctuation">.</span>Timestamp <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    newBlock<span class="token punctuation">.</span>BPM <span class="token operator">=</span> BPM    newBlock<span class="token punctuation">.</span>PrevHash <span class="token operator">=</span> oldBlock<span class="token punctuation">.</span>Hash    newBlock<span class="token punctuation">.</span>Hash <span class="token operator">=</span> <span class="token function">calculateBlockHash</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span>    newBlock<span class="token punctuation">.</span>Validator <span class="token operator">=</span> address    <span class="token keyword">return</span> newBlock<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p><code>generateBlock</code> 是用来创建新块的。<br><code>newBlock.PrevHash</code> 存储的是上一个区块的 <code>Hash</code><br><code>newBlock.Hash</code> 是通过 <code>calculateBlockHash(newBlock)</code> 生成的 Hash 。<br><code>newBlock.Validator</code> 存储的是获取记账权的节点地址</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// SHA256 hasing</span><span class="token comment">// calculateHash is a simple SHA256 hashing function</span><span class="token keyword">func</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    h <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    hashed <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>hashed<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//calculateBlockHash returns the hash of all block information</span><span class="token keyword">func</span> <span class="token function">calculateBlockHash</span><span class="token punctuation">(</span>block Block<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    record <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Index<span class="token punctuation">)</span> <span class="token operator">+</span> block<span class="token punctuation">.</span>Timestamp <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>BPM<span class="token punctuation">)</span> <span class="token operator">+</span> block<span class="token punctuation">.</span>PrevHash    <span class="token keyword">return</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>calculateHash</code> 函数会接受一个 <code>string</code> ，并且返回一个<code>SHA256 hash</code> 。</p><p><code>calculateBlockHash</code> 是对一个 <code>block</code> 进行 <code>hash</code>，将一个 <code>block</code> 的所有字段连接到一起后，再调用 <code>calculateHash</code> 将字符串转为 <code>SHA256 hash</code> 。</p><h3 id="验证区块"><a href="#验证区块" class="headerlink" title="验证区块"></a>验证区块</h3><p>我们通过检查 <code>Index</code> 来确保它们按预期递增。我们也检查以确保我们 <code>PrevHash</code> 的确与 <code>Hash</code> 前一个区块相同。最后，我们希望通过在当前块上 <code>calculateBlockHash</code> 再次运行该函数来检查当前块的散列。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// isBlockValid makes sure block is valid by checking index</span><span class="token comment">// and comparing the hash of the previous block</span><span class="token keyword">func</span> <span class="token function">isBlockValid</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">,</span> oldBlock Block<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> oldBlock<span class="token punctuation">.</span>Index<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">!=</span> newBlock<span class="token punctuation">.</span>Index <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> oldBlock<span class="token punctuation">.</span>Hash <span class="token operator">!=</span> newBlock<span class="token punctuation">.</span>PrevHash <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">calculateBlockHash</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span> <span class="token operator">!=</span> newBlock<span class="token punctuation">.</span>Hash <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h3 id="验证者"><a href="#验证者" class="headerlink" title="验证者"></a>验证者</h3><p>当一个验证者连接到我们的TCP服务，我们需要提供一些函数达到以下目标：</p><ul><li>输入令牌的余额（之前提到过，我们不做钱包等逻辑)</li><li>接收区块链的最新广播</li><li>接收验证者赢得区块的广播信息</li><li>将自身节点添加到全局的验证者列表中（validators)</li><li>输入Block的BPM数据- BPM是每个验证者的人体脉搏值</li><li>提议创建一个新的区块</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">handleConn</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            msg <span class="token operator">:=</span> <span class="token operator">&lt;-</span>announcements            io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 验证者地址</span>    <span class="token keyword">var</span> address <span class="token builtin">string</span>    <span class="token comment">// 验证者输入他所拥有的 tokens，tokens 的值越大，越容易获得新区块的记账权</span>    io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"Enter token balance:"</span><span class="token punctuation">)</span>    scanBalance <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>    <span class="token keyword">for</span> scanBalance<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取输入的数据，并将输入的值转为 int</span>        balance<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>scanBalance<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v not a number: %v"</span><span class="token punctuation">,</span> scanBalance<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 生成验证者的地址</span>        address <span class="token operator">=</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// 将验证者的地址和token 存储到 validators</span>        validators<span class="token punctuation">[</span>address<span class="token punctuation">]</span> <span class="token operator">=</span> balance        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>validators<span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"\nEnter a new BPM:"</span><span class="token punctuation">)</span>    scanBPM <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token comment">// take in BPM from stdin and add it to blockchain after conducting necessary validation</span>            <span class="token keyword">for</span> scanBPM<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bpm<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>scanBPM<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 如果验证者试图提议一个被污染（例如伪造）的block，例如包含一个不是整数的BPM，那么程序会抛出一个错误，我们会立即从我们的验证器列表validators中删除该验证者，他们将不再有资格参与到新块的铸造过程同时丢失相应的抵押令牌。</span>                <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v not a number: %v"</span><span class="token punctuation">,</span> scanBPM<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>                    <span class="token function">delete</span><span class="token punctuation">(</span>validators<span class="token punctuation">,</span> address<span class="token punctuation">)</span>                    conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                oldLastIndex <span class="token operator">:=</span> Blockchain<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>Blockchain<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 创建新的区块，然后将其发送到 candidateBlocks 通道</span>                newBlock<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">generateBlock</span><span class="token punctuation">(</span>oldLastIndex<span class="token punctuation">,</span> bpm<span class="token punctuation">,</span> address<span class="token punctuation">)</span>                <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token function">isBlockValid</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">,</span> oldLastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    candidateBlocks <span class="token operator">&lt;-</span> newBlock                <span class="token punctuation">}</span>                io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"\nEnter a new BPM:"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 循环会周期性的打印出最新的区块链信息</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Minute<span class="token punctuation">)</span>        mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        output<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>Blockchain<span class="token punctuation">)</span>        mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>io.WriteString(conn, "Enter token balance:")</code>允许验证者输入他持有的令牌数量，然后，该验证者被分配一个 <code>SHA256</code>地址，随后该验证者地址和验证者的令牌数被添加到验证者列表<code>validators</code> 中。</p></li><li><p>接着我们输入BPM，验证者的脉搏值，并创建一个单独的Go协程来处理这块儿逻辑</p></li><li><p><code>delete(validators, address)</code> 如果验证者试图提议一个被污染（例如伪造）的 <code>block</code>，例如包含一个不是整数的BPM，那么程序会抛出一个错误，我们会立即从我们的验证器列表 <code>validators</code> 中删除该验证者，他们将不再有资格参与到新块的铸造过程同时丢失相应的抵押令牌。</p></li><li><p>正是因为这种抵押令牌的机制，使得PoS协议是一种更加可靠的机制。如果一个人试图伪造和破坏，那么他将被抓住，并且失去所有抵押和未来的权益，因此对于恶意者来说，是非常大的威慑。</p></li><li><p>接着，我们用 <code>generateBlock</code> 函数创建一个新的 <code>block</code>，然后将其发送到 <code>candidateBlocks</code> 通道进行进一步处理。将<code>Block</code> 发送到通道使用的语法: <code>candidateBlocks &lt;- newBlock</code></p></li><li><p>最后会循环打印出最新的区块链，这样每个验证者都能获知最新的状态。</p></li></ul><h3 id="选择获取记账权的节点"><a href="#选择获取记账权的节点" class="headerlink" title="选择获取记账权的节点"></a>选择获取记账权的节点</h3><p>下面是PoS的主要逻辑。我们需要编写代码以实现获胜验证者的选择;他们所持有的令牌数量越高，他们就越有可能被选为胜利者。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// pickWinner creates a lottery pool of validators and chooses the validator who gets to forge a block to the blockchain</span><span class="token comment">// by random selecting from the pool, weighted by amount of tokens staked</span><span class="token keyword">func</span> <span class="token function">pickWinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    temp <span class="token operator">:=</span> tempBlocks    mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    lotteryPool <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token comment">// slightly modified traditional proof of stake algorithm</span>        <span class="token comment">// from all validators who submitted a block, weight them by the number of staked tokens</span>        <span class="token comment">// in traditional proof of stake, validators can participate without submitting a block to be forged</span>    OUTER<span class="token punctuation">:</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> block <span class="token operator">:=</span> <span class="token keyword">range</span> temp <span class="token punctuation">{</span>            <span class="token comment">// if already in lottery pool, skip</span>            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> node <span class="token operator">:=</span> <span class="token keyword">range</span> lotteryPool <span class="token punctuation">{</span>                <span class="token keyword">if</span> block<span class="token punctuation">.</span>Validator <span class="token operator">==</span> node <span class="token punctuation">{</span>                    <span class="token keyword">continue</span> OUTER                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// lock list of validators to prevent data race</span>            mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            setValidators <span class="token operator">:=</span> validators            mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 获取验证者的tokens</span>            k<span class="token punctuation">,</span> ok <span class="token operator">:=</span> setValidators<span class="token punctuation">[</span>block<span class="token punctuation">.</span>Validator<span class="token punctuation">]</span>            <span class="token keyword">if</span> ok <span class="token punctuation">{</span>                <span class="token comment">// 向 lotteryPool 追加 k 条数据，k 代表的是当前验证者的tokens</span>                <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                    lotteryPool <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>lotteryPool<span class="token punctuation">,</span> block<span class="token punctuation">.</span>Validator<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 通过随机获得获胜节点的地址</span>        s <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        lotteryWinner <span class="token operator">:=</span> lotteryPool<span class="token punctuation">[</span>r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>lotteryPool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment">// 把获胜者的区块添加到整条区块链上，然后通知所有节点关于胜利者的消息</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> block <span class="token operator">:=</span> <span class="token keyword">range</span> temp <span class="token punctuation">{</span>            <span class="token keyword">if</span> block<span class="token punctuation">.</span>Validator <span class="token operator">==</span> lotteryWinner <span class="token punctuation">{</span>                mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                Blockchain <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>Blockchain<span class="token punctuation">,</span> block<span class="token punctuation">)</span>                mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token keyword">range</span> validators <span class="token punctuation">{</span>                    announcements <span class="token operator">&lt;-</span> <span class="token string">"\nwinning validator: "</span> <span class="token operator">+</span> lotteryWinner <span class="token operator">+</span> <span class="token string">"\n"</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    tempBlocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Block<span class="token punctuation">{</span><span class="token punctuation">}</span>    mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><p>每隔30秒，我们选出一个胜利者，这样对于每个验证者来说，都有时间提议新的区块，参与到竞争中来。接着创建一个<code>lotteryPool</code>，它会持有所有验证者的地址，这些验证者都有机会成为一个胜利者。然后，对于提议块的暂存区域，我们会通过<code>if len(temp) &gt; 0</code>来判断是否已经有了被提议的区块。</p></li><li><p>在<code>OUTER FOR</code>循环中，要检查暂存区域是否和 <code>lotteryPool</code> 中存在同样的验证者，如果存在，则跳过。</p></li><li><p>在以 <code>k, ok := setValidators[block.Validator]</code>开始的代码块中，我们确保了从<code>temp</code>中取出来的验证者都是合法的，即这些验证者在验证者列表<code>validators</code>已存在。若合法，则把该验证者加入到<code>lotteryPool</code>中。</p></li><li><p>那么我们怎么根据这些验证者持有的令牌数来给予他们合适的随机权重呢？</p><ul><li><p>首先，用验证者的令牌填充<code>lotteryPool</code>数组，例如一个验证者有100个令牌，那么在<code>lotteryPool</code>中就将有100个元素填充；如果有1个令牌，那么将仅填充1个元素。</p></li><li><p>然后，从<code>lotteryPool</code>中随机选择一个元素，元素所属的验证者即是胜利者，把胜利验证者的地址赋值给lotteryWinner。这里能够看出来，如果验证者持有的令牌越多，那么他在数组中的元素也越多，他获胜的概率就越大；同时，持有令牌很少的验证者，也是有概率获胜的。</p></li></ul></li><li><p>接着我们把获胜者的区块添加到整条区块链上，然后通知所有节点关于胜利者的消息：<code>announcements &lt;- "\nwinning validator: " + lotteryWinner + "\n"</code>。</p></li><li><p>最后，清空tempBlocks，以便下次提议的进行。</p></li></ul><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    err <span class="token operator">:=</span> godotenv<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// 创建初始区块</span>    t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    genesisBlock <span class="token operator">:=</span> Block<span class="token punctuation">{</span><span class="token punctuation">}</span>    genesisBlock <span class="token operator">=</span> Block<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">calculateBlockHash</span><span class="token punctuation">(</span>genesisBlock<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">}</span>    spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>genesisBlock<span class="token punctuation">)</span>    Blockchain <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>Blockchain<span class="token punctuation">,</span> genesisBlock<span class="token punctuation">)</span>    httpPort <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"PORT"</span><span class="token punctuation">)</span>    <span class="token comment">// 启动 TCP 服务</span>    server<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token operator">+</span>httpPort<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"HTTP Server Listening on port :"</span><span class="token punctuation">,</span> httpPort<span class="token punctuation">)</span>    <span class="token keyword">defer</span> server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 启动了一个Go routine 从 candidateBlocks 通道中获取提议的区块，然后填充到临时缓冲区 tempBlocks 中</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> candidate <span class="token operator">:=</span> <span class="token keyword">range</span> candidateBlocks <span class="token punctuation">{</span>            mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            tempBlocks <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tempBlocks<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span>            mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 启动了一个Go routine 完成 pickWinner 函数</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token function">pickWinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 接收验证者节点的连接</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">go</span> <span class="token function">handleConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>godotenv.Load()</code> 会解析 <code>.env</code> 文件并将相应的Key/Value对都放到环境变量中，通过 <code>os.Getenv</code> 获取</li><li>然后创建一个创世区块genesisBlock，形成了区块链。</li><li>接着启动了Tcp服务，等待所有验证者的连接。</li><li>启动了一个Go协程从 <code>candidateBlocks</code> 通道中获取提议的区块，然后填充到临时缓冲区 <code>tempBlocks</code> 中，最后启动了另外一个Go协程来完成 <code>pickWinner</code> 函数。</li><li>最后的for循环，用来接收验证者节点的连接。</li></ul><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><code>go run main.go</code> 启动您的Go程序和TCP服务器，并会打印出初始区块的信息。</p><pre class="language-go" data-language="go"><code class="language-go">$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">(</span>main<span class="token punctuation">.</span>Block<span class="token punctuation">)</span> <span class="token punctuation">{</span> Index<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span> Timestamp<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token string">"2018-05-08 16:45:27.14287 +0800 CST m=+0.000956793"</span><span class="token punctuation">,</span> BPM<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span> Hash<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token string">"96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7"</span><span class="token punctuation">,</span> PrevHash<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token string">""</span><span class="token punctuation">,</span> Validator<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">08</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">45</span><span class="token punctuation">:</span><span class="token number">27</span> HTTP Server Listening on port <span class="token punctuation">:</span> <span class="token number">9000</span></code></pre><p>打开新的终端，运行 <code>nc localhost 9000</code>，<br>输入 <code>tokens</code> , 然后输入 <code>BPM</code></p><p><img src="http://olgjbx93m.bkt.clouddn.com/WX20180508-165429.png"></p><p>可以打开多个终端，输入不同的 <code>tokens</code> ,来检验 PoS 算法</p><p><img src="http://olgjbx93m.bkt.clouddn.com/WX20180508-165704.png"></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PoS 共识 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5加密算法原理及其Go语言实现</title>
      <link href="/2018/05/22/md5-jia-mi-suan-fa-yuan-li-ji-qi-go-yu-yan-shi-xian/"/>
      <url>/2018/05/22/md5-jia-mi-suan-fa-yuan-li-ji-qi-go-yu-yan-shi-xian/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>MD5讯息摘要演算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码杂凑函数，可以产生出一个128位元（16位元组）的散列值（hash value），用于确保信息传输完整一致。</p><h2 id="go-调用-md5-方法"><a href="#go-调用-md5-方法" class="headerlink" title="go 调用 md5 方法"></a>go 调用 md5 方法</h2><p>新建 <code>md5.go</code> 文件，代码如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span><span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"crypto/md5"</span>    <span class="token string">"encoding/hex"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>    s <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> md5<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token comment">// 也可以用这种方式</span>    h <span class="token operator">:=</span> md5<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    s <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>运行结果</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> run md5<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token comment">//运行结果</span>5eb63bbbe01eeed093cb22bb8f5acdc35eb63bbbe01eeed093cb22bb8f5acdc3</code></pre><h2 id="md5-实现原理"><a href="#md5-实现原理" class="headerlink" title="md5 实现原理"></a>md5 实现原理</h2><p>对MD5算法简要的叙述可以为：MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。</p><ol><li><p><strong>填充</strong>：如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)；</p></li><li><p><strong>记录信息长度</strong>：用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N*512+448+64=(N+1)*512位。</p></li><li><p><strong>装入标准的幻数（四个整数）</strong>：标准的幻数（物理顺序）是（A=(01234567)16，B=(89ABCDEF)16，C=(FEDCBA98)16，D=(76543210)16）。如果在程序中定义应该是（A=0X67452301，B=0XEFCDAB89，C=0X98BADCFE，D=0X10325476）</p></li><li><p>四轮循环运算：循环的次数是分组的个数（N+1）</p><ul><li>将每一512字节细分成16个小组，每个小组64位（8个字节）</li><li>先认识四个线性函数(&amp;是与,|是或,^是异或)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">F<span class="token punctuation">(</span>X,Y,Z<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>Y ^ Z<span class="token punctuation">)</span> <span class="token operator">&amp;</span> X<span class="token punctuation">)</span> ^ Z  G<span class="token punctuation">(</span>X,Y,Z<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">((</span>X ^ Y<span class="token punctuation">)</span> <span class="token operator">&amp;</span> Z<span class="token punctuation">)</span> ^ Y  H<span class="token punctuation">(</span>X,Y,Z<span class="token punctuation">)</span><span class="token operator">=</span>X ^ Y ^ Z  I<span class="token punctuation">(</span>X,Y,Z<span class="token punctuation">)</span><span class="token operator">=</span>Y ^ <span class="token punctuation">(</span>X <span class="token operator">|</span> ^Z<span class="token punctuation">)</span>  </code></pre><ul><li>设Mj表示消息的第j个子分组（从0到15），&lt;&lt;</li></ul></li></ol><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span><span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"unsafe"</span><span class="token punctuation">)</span><span class="token keyword">const</span> Size <span class="token operator">=</span> <span class="token number">16</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    chunk <span class="token operator">=</span> <span class="token number">64</span>    init0 <span class="token operator">=</span> <span class="token number">0x67452301</span>    init1 <span class="token operator">=</span> <span class="token number">0xEFCDAB89</span>    init2 <span class="token operator">=</span> <span class="token number">0x98BADCFE</span>    init3 <span class="token operator">=</span> <span class="token number">0x10325476</span><span class="token punctuation">)</span><span class="token comment">// digest represents the partial evaluation of a checksum.</span><span class="token keyword">type</span> digest <span class="token keyword">struct</span> <span class="token punctuation">{</span>    s   <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">uint32</span>    x   <span class="token punctuation">[</span>chunk<span class="token punctuation">]</span><span class="token builtin">byte</span>    nx  <span class="token builtin">int</span>    <span class="token builtin">len</span> <span class="token builtin">uint64</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>digest<span class="token punctuation">)</span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    d<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> init0    d<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> init1    d<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> init2    d<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> init3    d<span class="token punctuation">.</span>nx <span class="token operator">=</span> <span class="token number">0</span>    d<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>digest<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nn <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    nn <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    d<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">+=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>nn<span class="token punctuation">)</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span>nx <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        n <span class="token operator">:=</span> <span class="token function">copy</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>x<span class="token punctuation">[</span>d<span class="token punctuation">.</span>nx<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>        d<span class="token punctuation">.</span>nx <span class="token operator">+=</span> n        <span class="token keyword">if</span> d<span class="token punctuation">.</span>nx <span class="token operator">==</span> chunk <span class="token punctuation">{</span>            <span class="token function">blockGeneric</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> d<span class="token punctuation">.</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            d<span class="token punctuation">.</span>nx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token punctuation">[</span>n<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> chunk <span class="token punctuation">{</span>        n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;^</span> <span class="token punctuation">(</span>chunk <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">blockGeneric</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token punctuation">[</span>n<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        d<span class="token punctuation">.</span>nx <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>digest<span class="token punctuation">)</span> <span class="token function">checkSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    <span class="token comment">// Padding. Add a 1 bit and 0 bits until 56 bytes mod 64.</span>    <span class="token builtin">len</span> <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token builtin">len</span>    <span class="token keyword">var</span> tmp <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token builtin">byte</span>    tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x80</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token operator">%</span><span class="token number">64</span> <span class="token operator">&lt;</span> <span class="token number">56</span> <span class="token punctuation">{</span>        d<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">56</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token operator">%</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        d<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">64</span><span class="token operator">+</span><span class="token number">56</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token operator">%</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// Length in bits.</span>    <span class="token builtin">len</span> <span class="token operator">&lt;&lt;=</span> <span class="token number">3</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byte</span><span class="token punctuation">(</span><span class="token builtin">len</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    d<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span>nx <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"d.nx != 0"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> digest <span class="token punctuation">[</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> d<span class="token punctuation">.</span>s <span class="token punctuation">{</span>        digest<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        digest<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byte</span><span class="token punctuation">(</span>s <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span>        digest<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byte</span><span class="token punctuation">(</span>s <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span>        digest<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byte</span><span class="token punctuation">(</span>s <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> digest<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">blockGeneric</span><span class="token punctuation">(</span>dig <span class="token operator">*</span>digest<span class="token punctuation">,</span> p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> dig<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    b <span class="token operator">:=</span> dig<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    c <span class="token operator">:=</span> dig<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    d <span class="token operator">:=</span> dig<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> X <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token builtin">uint32</span>    <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> chunk <span class="token punctuation">{</span>        aa<span class="token punctuation">,</span> bb<span class="token punctuation">,</span> cc<span class="token punctuation">,</span> dd <span class="token operator">:=</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d        X <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token builtin">uint32</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// Round 1.</span>        a <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3614090360</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">7</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3905402710</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">12</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">606105819</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">17</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3250441966</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">22</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4118548399</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">7</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1200080426</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">12</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2821735955</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">17</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4249261313</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">22</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1770035416</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">7</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2336552879</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">12</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4294925233</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">17</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2304563134</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">22</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1804603682</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">7</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4254626195</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">12</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2792965006</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">17</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1236535329</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">22</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        <span class="token comment">// Round 2.</span>        a <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4129170786</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">5</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3225465664</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">9</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">643717713</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">14</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3921069994</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">20</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3593408605</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">5</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">38016083</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">9</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3634488961</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">14</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3889429448</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">20</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">568446438</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">5</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3275163606</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">9</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4107603335</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">14</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1163531501</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">20</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2850285829</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">5</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4243563512</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">9</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1735328473</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">14</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2368359562</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">20</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        <span class="token comment">// Round 3.</span>        a <span class="token operator">+=</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4294588738</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">4</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2272392833</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">11</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span>d <span class="token operator">^</span> a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1839030562</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4259657740</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">23</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2763975236</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">4</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1272893353</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">11</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span>d <span class="token operator">^</span> a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4139469664</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3200236656</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">23</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">681279174</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">4</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3936430074</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">11</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span>d <span class="token operator">^</span> a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3572445317</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">76029189</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">23</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> c <span class="token operator">^</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3654602809</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">4</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3873151461</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">11</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span>d <span class="token operator">^</span> a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">530742520</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> d <span class="token operator">^</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3299628645</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">23</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        <span class="token comment">// Round 4.</span>        a <span class="token operator">+=</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">|</span> <span class="token operator">^</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4096336452</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">6</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">|</span> <span class="token operator">^</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1126891415</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">10</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> <span class="token punctuation">(</span>d <span class="token operator">|</span> <span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2878612391</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">15</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span>d <span class="token operator">^</span> <span class="token punctuation">(</span>c <span class="token operator">|</span> <span class="token operator">^</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4237533241</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">21</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">|</span> <span class="token operator">^</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1700485571</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">6</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">|</span> <span class="token operator">^</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2399980690</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">10</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> <span class="token punctuation">(</span>d <span class="token operator">|</span> <span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4293915773</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">15</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span>d <span class="token operator">^</span> <span class="token punctuation">(</span>c <span class="token operator">|</span> <span class="token operator">^</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2240044497</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">21</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">|</span> <span class="token operator">^</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1873313359</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">6</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">|</span> <span class="token operator">^</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4264355552</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">10</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> <span class="token punctuation">(</span>d <span class="token operator">|</span> <span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2734768916</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">15</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span>d <span class="token operator">^</span> <span class="token punctuation">(</span>c <span class="token operator">|</span> <span class="token operator">^</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1309151649</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">21</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">|</span> <span class="token operator">^</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4149444226</span>        a <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">6</span> <span class="token operator">|</span> a<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> b        d <span class="token operator">+=</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">|</span> <span class="token operator">^</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3174756917</span>        d <span class="token operator">=</span> d<span class="token operator">&lt;&lt;</span><span class="token number">10</span> <span class="token operator">|</span> d<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> a        c <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> <span class="token punctuation">(</span>d <span class="token operator">|</span> <span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">718787259</span>        c <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">15</span> <span class="token operator">|</span> c<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">+</span> d        b <span class="token operator">+=</span> <span class="token punctuation">(</span>d <span class="token operator">^</span> <span class="token punctuation">(</span>c <span class="token operator">|</span> <span class="token operator">^</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3951481745</span>        b <span class="token operator">=</span> b<span class="token operator">&lt;&lt;</span><span class="token number">21</span> <span class="token operator">|</span> b<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">+</span> c        a <span class="token operator">+=</span> aa        b <span class="token operator">+=</span> bb        c <span class="token operator">+=</span> cc        d <span class="token operator">+=</span> dd        p <span class="token operator">=</span> p<span class="token punctuation">[</span>chunk<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    dig<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a    dig<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b    dig<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> c    dig<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> d digest    d<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>    d<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    hashnum <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">checkSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span>hashnum<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MD5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hash算法</title>
      <link href="/2018/05/21/hash-suan-fa/"/>
      <url>/2018/05/21/hash-suan-fa/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="什么是-hash-算法"><a href="#什么是-hash-算法" class="headerlink" title="什么是 hash 算法"></a>什么是 hash 算法</h2><p>散列方法的主要思想是根据结点的关键码值来确定其存储地址：以关键码值K为自变量，通过一定的函数关系h(K)(称为散列函数)，计算出对应的函数值来，把这个值解释为结点的存储地址，将结点存入到此存储单元中。检索时，用同样的方法计算地址，然后到相应的单元里去取要找的结点。通过散列方法可以对结点进行快速检索。散列（hash，也称“哈希”）是一种重要的存储方式，也是一种常见的检索方法。</p><p>散列算法（Hash Algorithm），又称哈希算法，杂凑算法，是一种从任意文件中创造小的数字「指纹」的方法。与指纹一样，散列算法就是一种以较短的信息来保证文件唯一性的标志，这种标志与文件的每一个字节都相关，而且难以找到逆向规律。因此，当原有文件发生改变时，其标志值也会发生改变，从而告诉文件使用者当前的文件已经不是你所需求的文件。</p><h2 id="Hash算法有什么特点"><a href="#Hash算法有什么特点" class="headerlink" title="Hash算法有什么特点"></a>Hash算法有什么特点</h2><p>一个优秀的 hash 算法，将能实现：</p><ul><li><p><strong>正向快速</strong>：给定明文和 hash 算法，在有限时间和有限资源内能计算出 hash 值。</p></li><li><p><strong>逆向困难</strong>：给定（若干） hash 值，在有限时间内很难（基本不可能）逆推出明文。</p></li><li><p><strong>输入敏感</strong>：原始输入信息修改一点信息，产生的 hash 值看起来应该都有很大不同。</p></li><li><p><strong>冲突避免</strong>：很难找到两段内容不同的明文，使得它们的 hash 值一致（发生冲突）。即对于任意两个不同的数据块，其hash值相同的可能性极小；对于一个给定的数据块，找到和它hash值相同的数据块极为困难。</p></li></ul><p>但在不同的使用场景中，如数据结构和安全领域里，其中对某一些特点会有所侧重。</p><h2 id="Hash算法是如何实现的？"><a href="#Hash算法是如何实现的？" class="headerlink" title="Hash算法是如何实现的？"></a>Hash算法是如何实现的？</h2><p>作为散列算法，首要的功能就是要使用一种算法把原有的体积很大的文件信息用若干个字符来记录，还要保证每一个字节都会对最终结果产生影响。那么大家也许已经想到了，求模这种算法就能满足我们的需要。</p><p>事实上，求模算法作为一种不可逆的计算方法，已经成为了整个现代密码学的根基。只要是涉及到计算机安全和加密的领域，都会有模计算的身影。散列算法也并不例外，一种最原始的散列算法就是单纯地选择一个数进行模运算，比如以下程序。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#  构造散列函数</span><span class="token keyword">def</span> <span class="token function">hash</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">%</span> <span class="token number">8</span><span class="token comment">#  测试散列函数功能</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token number">235</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出结果</span><span class="token operator">-</span> <span class="token number">1</span><span class="token operator">-</span> <span class="token number">2</span><span class="token operator">-</span> <span class="token number">3</span></code></pre><p>很显然，上述的程序完成了一个散列算法所应当实现的初级目标：用较少的文本量代表很长的内容（求模之后的数字肯定小于8）。但也许你已经注意到了，单纯使用求模算法计算之后的结果带有明显的规律性，这种规律将导致算法将能难保证不可逆性。所以我们将使用另外一种手段，那就是异或。</p><p>再来看下面一段程序，我们在散列函数中加入一个异或过程。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#  构造散列函数</span><span class="token keyword">def</span> <span class="token function">hash</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token comment">#  测试散列函数功能</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token number">235</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出结果</span><span class="token operator">-</span> <span class="token number">4</span><span class="token operator">-</span> <span class="token number">7</span><span class="token operator">-</span> <span class="token number">6</span></code></pre><p>很明显的，加入一层异或过程之后，计算之后的结果规律性就不是那么明显了。</p><p>当然，大家也许会觉得这样的算法依旧很不安全，如果用户使用连续变化的一系列文本与计算结果相比对，就很有可能找到算法所包含的规律。但是我们还有其他的办法。比如在进行计算之前对原始文本进行修改，或是加入额外的运算过程（如移位），比如以下程序。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#  构造散列函数</span><span class="token keyword">def</span> <span class="token function">hash</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token comment">#  测试散列函数功能</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token number">235</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出结果</span><span class="token operator">-</span> <span class="token number">0</span><span class="token operator">-</span> <span class="token number">5</span><span class="token operator">-</span> <span class="token number">6</span></code></pre><p>这样处理得到的散列算法就很难发现其内部规律，也就是说，我们并不能很轻易地给出一个数，让它经过上述散列函数运算之后的结果等于4——除非我们去穷举测试。</p><h2 id="Hash有哪些流行的算法"><a href="#Hash有哪些流行的算法" class="headerlink" title="Hash有哪些流行的算法"></a>Hash有哪些流行的算法</h2><p>目前流行的 Hash 算法包括 MD5、SHA-1 和 SHA-2。</p><ul><li><p><strong>MD4</strong>（RFC 1320）是 MIT 的 Ronald L. Rivest 在 1990 年设计的，MD 是 Message Digest 的缩写。其输出为 128 位。MD4 已证明不够安全。</p></li><li><p><strong>MD5</strong>（RFC 1321）是 Rivest 于1991年对 MD4 的改进版本。它对输入仍以 512 位分组，其输出是 128 位。MD5 比 MD4 复杂，并且计算速度要慢一点，更安全一些。MD5 已被证明不具备”强抗碰撞性”。</p></li><li><p><strong>SHA</strong> （Secure Hash Algorithm）是一个 Hash 函数族，由 NIST（National Institute of Standards and Technology）于 1993 年发布第一个算法。目前知名的 SHA-1 在 1995 年面世，它的输出为长度 160 位的 hash 值，因此抗穷举性更好。SHA-1 设计时基于和 MD4 相同原理，并且模仿了该算法。SHA-1 已被证明不具”强抗碰撞性”。</p></li></ul><p>为了提高安全性，NIST 还设计出了 SHA-224、SHA-256、SHA-384，和 SHA-512 算法（统称为 SHA-2），跟 SHA-1 算法原理类似。SHA-3 相关算法也已被提出。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hash函数</title>
      <link href="/2018/05/21/hash-han-shu/"/>
      <url>/2018/05/21/hash-han-shu/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>计算理论中，没有Hash函数的说法，只有单向函数的说法。所谓的单向函数，是一个复杂的定义，大家可以去看计算理论或者密码学方面的数据。用“人 类”的语言描述单向函数就是：如果某个函数在给定输入的时候，很容易计算出其结果来；而当给定结果的时候，很难计算出输入来，这就是单项函数。各种加密函 数都可以被认为是单向函数的逼近。Hash函数（或者成为散列函数）也可以看成是单向函数的一个逼近。即它接近于满足单向函数的定义。</p><p>Hash函数还有另外的含义。实际中的Hash函数是指把一个大范围映射到一个小范围。把大范围映射到一个小范围的目的往往是为了节省空间，使得数据容易保存。除此以外，Hash函数往往应用于查找上。所以，在考虑使用Hash函数之前，需要明白它的几个限制：</p><ol><li>Hash的主要原理就是把大范围映射到小范围；所以，你输入的实际值的个数必须和小范围相当或者比它更小。不然冲突就会很多。</li><li>由于Hash逼近单向函数；所以，你可以用它来对数据进行加密。</li><li>不同的应用对Hash函数有着不同的要求；比如，用于加密的Hash函数主要考虑它和单项函数的差距，而用于查找的Hash函数主要考虑它映射到小范围的冲突率。</li></ol><p>应用于加密的Hash函数已经探讨过太多了，在作者的博客里面有更详细的介绍。所以，本文只探讨用于查找的Hash函数。</p><p>Hash函数应用的主要对象是数组（比如，字符串），而其目标一般是一个int类型。以下我们都按照这种方式来说明。</p><p>一般的说，Hash函数可以简单的划分为如下几类：<br>1. 加法Hash；<br>2. 位运算Hash；<br>3. 乘法Hash；<br>4. 除法Hash；<br>5. 查表Hash；<br>6. 混合Hash；<br>下面详细的介绍以上各种方式在实际中的运用。<br>一 加法Hash</p><p>所谓的加法Hash就是把输入元素一个一个的加起来构成最后的结果。标准的加法Hash的构造如下：</p><p>static int additiveHash(String key, int prime)<br>{<br>int hash, i;<br>for (hash = key.length(), i = 0; i &lt; key.length(); i++)<br>hash += key.charAt(i);<br>return (hash % prime);<br>}<br>这里的prime是任意的质数，看得出，结果的值域为[0,prime-1]。<br>二 位运算Hash</p><p>这类型Hash函数通过利用各种位运算（常见的是移位和异或）来充分的混合输入元素。比如，标准的旋转Hash的构造如下：</p><p>static int rotatingHash(String key, int prime)<br>{<br>int hash, i;<br>for (hash=key.length(), i=0; i</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比特币中的工作量证明</title>
      <link href="/2018/05/21/bi-te-bi-zhong-de-gong-zuo-liang-zheng-ming/"/>
      <url>/2018/05/21/bi-te-bi-zhong-de-gong-zuo-liang-zheng-ming/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>比特币网络中任何一个节点，如果想生成一个新的区块并写入区块链，必须解出比特币网络出的工作量证明的迷题。这道题关键的三个要素是工作量证明函数、区块及难度值。工作量证明函数是这道题的计算方法，区块决定了这道题的输入数据，难度值决定了这道题的所需要的计算量。</p><h2 id="工作量证明函数"><a href="#工作量证明函数" class="headerlink" title="工作量证明函数"></a>工作量证明函数</h2><p>SHA是安全散列算法（Secure Hash Algorithm）的缩写，是一个密码散列函数家族。这一组函数是由美国国家安全局（NSA）设计，美国国家标准与技术研究院（NIST） 发布的，主要适用于数字签名标准。SHA256就是这个函数家族中的一个，是输出值为256位的哈希算法。到目前为止，还没有出现对SHA256算法的有效攻击。</p><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>比特币区块由区块头和该区块所包含的交易列表组成。区块头大小为80字节，其构成包括：</p><p>　　 4字节：版本号<br>　　32字节：上一个区块的哈希值<br>　　32字节：交易列表的Merkle根哈希值<br>　　 4字节：当前时间戳<br>　　 4字节：当前难度值<br>　　 4字节：随机数Nonce值<br>此80字节长度的区块头，即为比特币Pow算法的输入字符串。交易列表附加在区块头之后，其中第一笔交易为矿工获得奖励和手续费的特殊交易。</p><p>bitcoin-0.15.1源码中区块头和区块定义</p><pre class="language-c++" data-language="c++"><code class="language-c++">class CBlockHeader{public:    //版本号    int32_t nVersion;    //上一个区块的哈希值    uint256 hashPrevBlock;    //交易列表的Merkle根哈希值    uint256 hashMerkleRoot;    //当前时间戳    uint32_t nTime;    //当前挖矿难度，nBits越小难度越大    uint32_t nBits;    //随机数Nonce值    uint32_t nNonce;    //其它代码略};class CBlock : public CBlockHeader{public:    //交易列表    std::vector&lt;CTransactionRef&gt; vtx;    //其它代码略};//代码位置src/primitives/block.h</code></pre><h2 id="难度值"><a href="#难度值" class="headerlink" title="难度值"></a>难度值</h2><p>难度值（difficulty）是矿工们在挖矿时候的重要参考指标，它决定了矿工大约需要经过多少次哈希运算才能产生一个合法的区块。比特币的区块大约每10分钟生成一个，如果要在不同的全网算力条件下，新区块的产生保持都基本这个速率，难度值必须根据全网算力的变化进行调整。简单地说，难度值被设定在无论挖矿能力如何，新区块产生速率都保持在10分钟一个。</p><p>难度的调整是在每个完整节点中独立自动发生的。每2016个区块，所有节点都会按统一的公式自动调整难度，这个公式是由最新2016个区块的花费时长与期望时长（期望时长为20160分钟即两周，是按每10分钟一个区块的产生速率计算出的总时长）比较得出的，根据实际时长与期望时长的比值，进行相应调整（或变难或变易）。也就是说，如果区块产生的速率比10分钟快则增加难度，比10分钟慢则降低难度。</p><p>这个公式可以总结为如下形式：</p><pre class="language-bash" data-language="bash"><code class="language-bash">新难度值 <span class="token operator">=</span> 旧难度值 * <span class="token punctuation">(</span> 过去2016个区块花费时长 / <span class="token number">20160</span> 分钟 <span class="token punctuation">)</span></code></pre><p>工作量证明需要有一个目标值。比特币工作量证明的目标值（Target）的计算公式如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">目标值 <span class="token operator">=</span> 最大目标值 / 难度值其中最大目标值为一个恒定值：0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</code></pre><p>目标值的大小与难度值成反比。比特币工作量证明的达成就是矿工计算出来的区块哈希值必须小于目标值。</p><p>比特币工作量证明的过程，就是通过不停的变换区块头（即尝试不同的nouce值）作为输入进行SHA256哈希运算，找出一个特定格式哈希值的过程（即要求有一定数量的前导0）。而要求的前导0的个数越多，代表难度越大。</p><p>bitcoin-0.15.1源码中计算挖矿难度代码如下：</p><pre class="language-c++" data-language="c++"><code class="language-c++">//nFirstBlockTime即前2016个块的第一个块的时间戳unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&amp; params){    if (params.fPowNoRetargeting)        return pindexLast-&gt;nBits;    //计算生成这2016个块花费的时间    int64_t nActualTimespan = pindexLast-&gt;GetBlockTime() - nFirstBlockTime;    //不小于3.5天    if (nActualTimespan &lt; params.nPowTargetTimespan/4)        nActualTimespan = params.nPowTargetTimespan/4;    //不大于56天    if (nActualTimespan &gt; params.nPowTargetTimespan*4)        nActualTimespan = params.nPowTargetTimespan*4;    // Retarget    const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);    arith_uint256 bnNew;    bnNew.SetCompact(pindexLast-&gt;nBits);    //计算前2016个块的难度总和    //即单个块的难度*总时间    bnNew *= nActualTimespan;    //计算新的难度    //即2016个块的难度总和/14天的秒数    bnNew /= params.nPowTargetTimespan;    //bnNew越小，难度越大    //bnNew越大，难度越小    //要求新的难度，难度不低于参数定义的最小难度    if (bnNew &gt; bnPowLimit)        bnNew = bnPowLimit;    return bnNew.GetCompact();}//代码位置src/pow.cpp</code></pre><h2 id="工作量证明的过程"><a href="#工作量证明的过程" class="headerlink" title="工作量证明的过程"></a>工作量证明的过程</h2><p>我们可以把比特币矿工解这道工作量证明迷题的步骤大致归纳如下：</p><ol><li><p>生成Coinbase交易，并与其他所有准备打包进区块的交易组成交易列表，通过Merkle Tree算法生成Merkle Root Hash</p></li><li><p>把Merkle Root Hash及其他相关字段组装成区块头，将区块头的80字节数据（Block Header）作为工作量证明的输入</p></li><li><p>不停的变更区块头中的随机数即nonce的数值，并对每次变更后的的区块头做双重SHA256运算（即SHA256(SHA256(Block_Header))），将结果值与当前网络的目标值做对比，如果小于目标值，则解题成功，工作量证明完成。</p></li></ol><p>Pow完成的区块向全网广播，其他节点将验证其是否符合规则，如果验证有效，其他节点将接收此区块，并附加在已有区块链之后。之后将进入下一轮挖矿。</p><p>bitcoin-0.15.1源码中Pow算法实现：</p><pre class="language-c++" data-language="c++"><code class="language-c++">UniValue generateBlocks(std::shared_ptr&lt;CReserveScript&gt; coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript){    static const int nInnerLoopCount = 0x10000;    int nHeightEnd = 0;    int nHeight = 0;    {   // Don't keep cs_main locked        LOCK(cs_main);        nHeight = chainActive.Height();        nHeightEnd = nHeight+nGenerate;    }    unsigned int nExtraNonce = 0;    UniValue blockHashes(UniValue::VARR);    while (nHeight &lt; nHeightEnd)    {        std::unique_ptr&lt;CBlockTemplate&gt; pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript-&gt;reserveScript));        if (!pblocktemplate.get())            throw JSONRPCError(RPC_INTERNAL_ERROR, "Couldn't create new block");        CBlock *pblock = &amp;pblocktemplate-&gt;block;        {            LOCK(cs_main);            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);        }        //不断变更区块头中的随机数Nonce        //对变更后的区块头做双重SHA256哈希运算        //与当前难度的目标值做比对，如果小于目标难度，即Pow完成        //uint64_t nMaxTries = 1000000;即重试100万次        while (nMaxTries &gt; 0 &amp;&amp; pblock-&gt;nNonce &lt; nInnerLoopCount &amp;&amp; !CheckProofOfWork(pblock-&gt;GetHash(), pblock-&gt;nBits, Params().GetConsensus())) {            ++pblock-&gt;nNonce;            --nMaxTries;        }        if (nMaxTries == 0) {            break;        }        if (pblock-&gt;nNonce == nInnerLoopCount) {            continue;        }        std::shared_ptr&lt;const CBlock&gt; shared_pblock = std::make_shared&lt;const CBlock&gt;(*pblock);        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))            throw JSONRPCError(RPC_INTERNAL_ERROR, "ProcessNewBlock, block not accepted");        ++nHeight;        blockHashes.push_back(pblock-&gt;GetHash().GetHex());        //mark script as important because it was used at least for one coinbase output if the script came from the wallet        if (keepScript)        {            coinbaseScript-&gt;KeepScript();        }    }    return blockHashes;}//代码位置src/rpc/mining.cpp</code></pre><p>另附bitcoin-0.15.1源码中生成铸币交易和创建新块：</p><pre class="language-c++" data-language="c++"><code class="language-c++">std::unique_ptr&lt;CBlockTemplate&gt; BlockAssembler::CreateNewBlock(const CScript&amp; scriptPubKeyIn, bool fMineWitnessTx){    int64_t nTimeStart = GetTimeMicros();    resetBlock();    pblocktemplate.reset(new CBlockTemplate());    if(!pblocktemplate.get())        return nullptr;    pblock = &amp;pblocktemplate-&gt;block; // pointer for convenience    pblock-&gt;vtx.emplace_back();    pblocktemplate-&gt;vTxFees.push_back(-1); // updated at end    pblocktemplate-&gt;vTxSigOpsCost.push_back(-1); // updated at end    LOCK2(cs_main, mempool.cs);    CBlockIndex* pindexPrev = chainActive.Tip();    nHeight = pindexPrev-&gt;nHeight + 1;    //版本号    pblock-&gt;nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());    if (chainparams.MineBlocksOnDemand())        pblock-&gt;nVersion = gArgs.GetArg("-blockversion", pblock-&gt;nVersion);    //当前时间戳    pblock-&gt;nTime = GetAdjustedTime();    const int64_t nMedianTimePast = pindexPrev-&gt;GetMedianTimePast();    nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS &amp; LOCKTIME_MEDIAN_TIME_PAST)                       ? nMedianTimePast                       : pblock-&gt;GetBlockTime();    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus()) &amp;&amp; fMineWitnessTx;    int nPackagesSelected = 0;    int nDescendantsUpdated = 0;    addPackageTxs(nPackagesSelected, nDescendantsUpdated);    int64_t nTime1 = GetTimeMicros();    nLastBlockTx = nBlockTx;    nLastBlockWeight = nBlockWeight;    //创建铸币交易    CMutableTransaction coinbaseTx;    coinbaseTx.vin.resize(1);    coinbaseTx.vin[0].prevout.SetNull();    coinbaseTx.vout.resize(1);    //挖矿奖励和手续费    coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());    coinbaseTx.vin[0].scriptSig = CScript() &lt;&lt; nHeight &lt;&lt; OP_0;    //第一笔交易即为矿工获得奖励和手续费的特殊交易    pblock-&gt;vtx[0] = MakeTransactionRef(std::move(coinbaseTx));    pblocktemplate-&gt;vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());    pblocktemplate-&gt;vTxFees[0] = -nFees;    LogPrintf("CreateNewBlock(): block weight: %u txs: %u fees: %ld sigops %d\n", GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);    //上一个区块的哈希值    pblock-&gt;hashPrevBlock  = pindexPrev-&gt;GetBlockHash();    UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);    //当前挖矿难度    pblock-&gt;nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());    //随机数Nonce值    pblock-&gt;nNonce         = 0;    pblocktemplate-&gt;vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock-&gt;vtx[0]);    CValidationState state;    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {        throw std::runtime_error(strprintf("%s: TestBlockValidity failed: %s", __func__, FormatStateMessage(state)));    }    int64_t nTime2 = GetTimeMicros();    LogPrint(BCLog::BENCH, "CreateNewBlock() packages: %.2fms (%d packages, %d updated descendants), validity: %.2fms (total %.2fms)\n", 0.001 * (nTime1 - nTimeStart), nPackagesSelected, nDescendantsUpdated, 0.001 * (nTime2 - nTime1), 0.001 * (nTime2 - nTimeStart));    return std::move(pblocktemplate);}//代码位置src/miner.cpp</code></pre><p>参考资料：<br><a href="https://github.com/bitcoin/bitcoin">https://github.com/bitcoin/bitcoin</a></p><p><a href="https://blog.csdn.net/taifei/article/details/78034400">https://blog.csdn.net/taifei/article/details/78034400</a></p><p><a href="http://blog.51cto.com/11821908/2059711">http://blog.51cto.com/11821908/2059711</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 比特币 PoW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过App的演示深入理解区块链运行原理</title>
      <link href="/2018/05/21/tong-guo-app-de-yan-shi-shen-ru-li-jie-qu-kuai-lian-yun-xing-yuan-li/"/>
      <url>/2018/05/21/tong-guo-app-de-yan-shi-shen-ru-li-jie-qu-kuai-lian-yun-xing-yuan-li/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>如果没有安装nodejs，需要先安装 <a href="https://nodejs.org/en/">nodejs</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Clone this repository</span>$ <span class="token function">git</span> clone https://github.com/seanseany/blockchain-cli<span class="token comment"># Go into the repository</span>$ <span class="token builtin class-name">cd</span> blockchain-cli<span class="token comment"># Install dependencies</span>$ <span class="token function">npm</span> <span class="token function">install</span><span class="token comment"># Run the app</span>$ <span class="token function">npm</span> start</code></pre><p>运行结果：</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-7c936d9281ac5752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="创建区块"><a href="#创建区块" class="headerlink" title="创建区块"></a>创建区块</h2><p>在 blockchian -&gt;后面输入 bc查看创始区块结构。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-03f535f385a2d5a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="当一个区块挖矿时都发生了什么？"><a href="#当一个区块挖矿时都发生了什么？" class="headerlink" title="当一个区块挖矿时都发生了什么？"></a>当一个区块挖矿时都发生了什么？</h2><p>在 blockchian -&gt;后面输入 <code>mine kongyixueyuan.com</code> 挖矿并创建一个新的模块。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-84b77686e7dc5abb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="Hash是怎么计算的？"><a href="#Hash是怎么计算的？" class="headerlink" title="Hash是怎么计算的？"></a>Hash是怎么计算的？</h2><p>Hash值是一个十六进制固定长度为64位的唯一的标识。</p><p>hash值是由<code>index</code>, <code>previous block hash</code>, <code>timestamp</code>, <code>block data</code> 和 <code>nonce</code> 作为输入数据计算而得。</p><pre class="language-bash" data-language="bash"><code class="language-bash">CryptoJS.SHA256<span class="token punctuation">(</span>index + previousHash + timestamp + data + nonce<span class="token punctuation">)</span>The SHA256 algorithm will calculate a unique hash, given those inputs. The same inputs will always <span class="token builtin class-name">return</span> the same hash.</code></pre><p>SHA256算法将根据给出的输入数据计算出一个唯一的hash值，只要输入值不变，永远返回相同的结果。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-85e951e425f83b73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>在线演示：<br><a href="https://anders.com/blockchain/hash.html">https://anders.com/blockchain/hash.html</a></p><h2 id="你是否注意到块哈希中的四个前导0？"><a href="#你是否注意到块哈希中的四个前导0？" class="headerlink" title="你是否注意到块哈希中的四个前导0？"></a>你是否注意到块哈希中的四个前导0？</h2><p>四个前导0是有效散列的最低要求。 所需的前导0的数量称为<code>难度</code>。</p><p>下面的方法验证hash难度是否有效。</p><pre class="language-none"><code class="language-none">function isValidHashDifficulty(hash, difficulty) {  for (var i = 0, b = hash.length; i &lt; b; i ++) {      if (hash[i] !== '0') {          break;      }  }  return i &gt;= difficulty;}</code></pre><p>这就是我们所熟知的工作量证明系统 - <a href="https://en.wikipedia.org/wiki/Proof-of-work_system">Proof-of-Work system</a>。</p><h2 id="什么是nonce？"><a href="#什么是nonce？" class="headerlink" title="什么是nonce？"></a>什么是nonce？</h2><p>nonce是一个用来找到满足条件的hash值的数字。</p><pre class="language-none"><code class="language-none">let nonce = 0;let hash;let input;while(!isValidHashDifficulty(hash)) {       nonce = nonce + 1;  input = index + previousHash + timestamp + data + nonce;  hash = CryptoJS.SHA256(input)}</code></pre><p><code>nonce</code> 值一直迭代，直到 <code>hash</code> 值有效为止。在我们案例中一个有效的<code>hash</code> 值是最少有4个前导0。找到<code>nonce</code> 值以满足合适条件的<code>hash</code>值的过程就叫做挖矿。</p><p>随着难度的增加，可能的有效散列数减少。 使用较少可能的有效散列，需要更多的处理能力才能找到有效的散列。</p><p><img src="https://upload-images.jianshu.io/upload_images/11383699-f94b87387551a0ef.gif?imageMogr2/auto-orient/strip" alt="nonce%E5%80%BC.gif"></p><p>在线地址：</p><p><a href="https://anders.com/blockchain/block.html">https://anders.com/blockchain/block.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（PoW）go语言实现 Proof-of-Work 共识机制</title>
      <link href="/2018/05/21/pow-go-yu-yan-shi-xian-proof-of-work-gong-shi-ji-zhi/"/>
      <url>/2018/05/21/pow-go-yu-yan-shi-xian-proof-of-work-gong-shi-ji-zhi/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="什么是-Proof-of-Work"><a href="#什么是-Proof-of-Work" class="headerlink" title="什么是 Proof-of-Work"></a>什么是 Proof-of-Work</h2><p>Proof-of-Work 简称 PoW，即为工作量证明。通过计算一个数值（ nonce ），使得拼揍上交易数据后内容的 Hash 值满足规定的上限。在节点成功找到满足的Hash值之后，会马上对全网进行广播打包区块，网络的节点收到广播打包区块，会立刻对其进行验证。</p><p>如果验证通过，则表明已经有节点成功解迷，自己就不再竞争当前区块打包，而是选择接受这个区块，记录到自己的账本中，然后进行下一个区块的竞争猜谜。<br>网络中只有最快解谜的区块，才会添加的账本中，其他的节点进行复制，这样就保证了整个账本的唯一性。</p><p>假如节点有任何的作弊行为，都会导致网络的节点验证不通过，直接丢弃其打包的区块，这个区块就无法记录到总账本中，作弊的节点耗费的成本就白费了，因此在巨大的挖矿成本下，也使得矿工自觉自愿的遵守比特币系统的共识协议，也就确保了整个系统的安全。</p><h2 id="工作量证明的优缺点"><a href="#工作量证明的优缺点" class="headerlink" title="工作量证明的优缺点"></a>工作量证明的优缺点</h2><p>优点：完全去中心化，节点自由进出；</p><p>缺点：目前bitcoin已经吸引全球大部分的算力，其它再用Pow共识机制的区块链应用很难获得相同的算力来保障自身的安全；挖矿造成大量的资源浪费；共识达成的周期较长，不适合商业应用</p><h2 id="工作量证明的简单的例子"><a href="#工作量证明的简单的例子" class="headerlink" title="工作量证明的简单的例子"></a>工作量证明的简单的例子</h2><p>举个例子，给定的一个基本的字符串”Hello, world!”，我们给出的工作量要求是，可以在这个字符串后面添加一个叫做nonce的整数值，对变更后（添加nonce)的字符串进行SHA256哈希运算，如果得到的哈希结果（以16进制的形式表示）是以”0000”开头的，则验证通过。为了达到这个工作量证明的目标。我们需要不停的递增nonce值，对得到的新字符串进行SHA256哈希运算。按照这个规则，我们需要经过4251次计算才能找到恰好前4位为0的哈希散列。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">"Hello, world!0"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> 1312af178c253f84028d480a6adc1e25e81caa44c749ec81976192e2ec934c64<span class="token string">"Hello, world!1"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> e9afc424b79e4f6ab42d99c81156d3a17228d6e1eef4139be78e948a9332a7d8<span class="token string">"Hello, world!2"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> ae37343a357a8297591625e7134cbea22f5928be8ca2a32aa475cf05fd4266b7<span class="token punctuation">..</span>.<span class="token string">"Hello, world!4248"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> 6e110d98b388e77e9c6f042ac6b497cec46660deef75a55ebc7cfdf65cc0b965<span class="token string">"Hello, world!4249"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> c004190b822f1669cac8dc37e761cb73652e7832fb814565702245cf26ebb9e6<span class="token string">"Hello, world!4250"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> 0000c3af42fc31103f1fdc0151fa747ff87349a4714df7cc52ea464e12dcd4e9</code></pre><h2 id="实现-Proof-of-Work-共识机制"><a href="#实现-Proof-of-Work-共识机制" class="headerlink" title="实现 Proof-of-Work 共识机制"></a>实现 Proof-of-Work 共识机制</h2><h3 id="安装依赖软件"><a href="#安装依赖软件" class="headerlink" title="安装依赖软件"></a>安装依赖软件</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ go get github.com/davecgh/go-spew/spew$ go get github.com/gorilla/mux$ go get github.com/joho/godotenv</code></pre><ul><li><p><code>spew</code> 在控制台中格式化输出相应的结果。</p></li><li><p><code>gorilla/mux</code> 是编写web处理程序的流行软件包。</p></li><li><p><code>godotenv</code> 可以从我们项目的根目录的 <code>.env</code> 文件中读取数据。</p></li></ul><h3 id="实现-PoW-共识机制"><a href="#实现-PoW-共识机制" class="headerlink" title="实现 PoW 共识机制"></a>实现 PoW 共识机制</h3><p>新建 <code>.env</code> ，添加 <code>ADDR=8080</code><br>新建 <code>main.go</code>，引入相应的包</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>        <span class="token string">"crypto/sha256"</span>        <span class="token string">"encoding/hex"</span>        <span class="token string">"encoding/json"</span>        <span class="token string">"fmt"</span>        <span class="token string">"io"</span>        <span class="token string">"log"</span>        <span class="token string">"net/http"</span>        <span class="token string">"os"</span>        <span class="token string">"strconv"</span>        <span class="token string">"strings"</span>        <span class="token string">"sync"</span>        <span class="token string">"time"</span>        <span class="token string">"github.com/davecgh/go-spew/spew"</span>        <span class="token string">"github.com/gorilla/mux"</span>        <span class="token string">"github.com/joho/godotenv"</span><span class="token punctuation">)</span></code></pre><h4 id="定义区块"><a href="#定义区块" class="headerlink" title="定义区块"></a>定义区块</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> difficulty <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">type</span> Block <span class="token keyword">struct</span> <span class="token punctuation">{</span>        Index      <span class="token builtin">int</span>        Timestamp  <span class="token builtin">string</span>        BPM        <span class="token builtin">int</span>        Hash       <span class="token builtin">string</span>        PrevHash   <span class="token builtin">string</span>        Difficulty <span class="token builtin">int</span>        Nonce      <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> Blockchain <span class="token punctuation">[</span><span class="token punctuation">]</span>Block<span class="token keyword">type</span> Message <span class="token keyword">struct</span> <span class="token punctuation">{</span>        BPM <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">var</span> mutex <span class="token operator">=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>difficulty</code> 代表难度系数，如果赋值为 <code>1</code>，则需要判断生成区块时所产生的 Hash 前缀至少包含1个 <code>0</code></p></li><li><p><code>Block</code> 代表区块的结构体。</p><ul><li><p><code>Index</code> 是区块链中数据记录的位置</p></li><li><p><code>Timestamp</code> 是自动确定的，并且是写入数据的时间</p></li><li><p><code>BPM</code> 是每分钟跳动的次数，是你的脉率</p></li><li><p><code>Hash</code> 是代表这个数据记录的SHA256标识符</p></li><li><p><code>PrevHash</code> 是链中上一条记录的SHA256标识符</p></li><li><p><code>Difficulty</code> 是当前区块的难度系数</p></li><li><p><code>Nonce</code> 是 PoW 挖矿中符合条件的数字</p></li></ul></li><li><p><code>Blockchain</code> 是存放区块数据的集合</p></li><li><p><code>Message</code> 是使用 <code>POST</code> 请求传递的数据</p></li><li><p><code>mutex</code> 是为了防止同一时间产生多个区块</p></li></ul><h4 id="生成区块"><a href="#生成区块" class="headerlink" title="生成区块"></a>生成区块</h4><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">generateBlock</span><span class="token punctuation">(</span>oldBlock Block<span class="token punctuation">,</span> BPM <span class="token builtin">int</span><span class="token punctuation">)</span> Block <span class="token punctuation">{</span>        <span class="token keyword">var</span> newBlock Block        t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        newBlock<span class="token punctuation">.</span>Index <span class="token operator">=</span> oldBlock<span class="token punctuation">.</span>Index <span class="token operator">+</span> <span class="token number">1</span>        newBlock<span class="token punctuation">.</span>Timestamp <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        newBlock<span class="token punctuation">.</span>BPM <span class="token operator">=</span> BPM        newBlock<span class="token punctuation">.</span>PrevHash <span class="token operator">=</span> oldBlock<span class="token punctuation">.</span>Hash        newBlock<span class="token punctuation">.</span>Difficulty <span class="token operator">=</span> difficulty        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                hex <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>                newBlock<span class="token punctuation">.</span>Nonce <span class="token operator">=</span> hex                <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">isHashValid</span><span class="token punctuation">(</span><span class="token function">calculateHash</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span><span class="token punctuation">,</span> newBlock<span class="token punctuation">.</span>Difficulty<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">calculateHash</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" do more work!"</span><span class="token punctuation">)</span>                        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>                        <span class="token keyword">continue</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">calculateHash</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" work done!"</span><span class="token punctuation">)</span>                        newBlock<span class="token punctuation">.</span>Hash <span class="token operator">=</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span>                        <span class="token keyword">break</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newBlock<span class="token punctuation">}</span></code></pre><p><code>newBlock</code> 中的 <code>PrevHash</code> 存储的上一个区块的 <code>Hash</code>。</p><p><code>for 循环</code> 通过循环改变 <code>Nonce</code>，然后选出符合相应难度系数的 <code>Nonce</code>。</p><p><code>isHashValid</code> 判断 hash，是否满足当前的难度系数。如果难度系数是2，则当前hash的前缀有2个0。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isHashValid</span><span class="token punctuation">(</span>hash <span class="token builtin">string</span><span class="token punctuation">,</span> difficulty <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>        prefix <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> difficulty<span class="token punctuation">)</span>        <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>strings.Repeat("0", difficulty)</code> 复制 <code>difficulty</code> 个<code>0</code>，并返回新字符串，当 difficulty 为 <code>2</code> ，则 prefix 为 <code>00</code></p></li><li><p><code>strings.HasPrefix(hash, prefix)</code> 判断字符串 <code>hash</code> 是否包含前缀 <code>prefix</code></p></li></ul><p><code>calculateHash</code> 根据设定的规则，生成 Hash 值。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span>block Block<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        record <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Index<span class="token punctuation">)</span> <span class="token operator">+</span> block<span class="token punctuation">.</span>Timestamp <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>BPM<span class="token punctuation">)</span> <span class="token operator">+</span> block<span class="token punctuation">.</span>PrevHash <span class="token operator">+</span> block<span class="token punctuation">.</span>Nonce        h <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">)</span>        hashed <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>hashed<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="验证区块"><a href="#验证区块" class="headerlink" title="验证区块"></a>验证区块</h4><p>我们通过检查 <code>Index</code> 来确保它们按预期递增。我们也检查以确保我们 <code>PrevHash</code> 的确与 <code>Hash</code> 前一个区块相同。最后，我们希望通过在当前块上 <code>calculateHash</code> 再次运行该函数来检查当前块的散列。让我们写一个 <code>isBlockValid</code> 函数来完成所有这些事情并返回一个 <code>bool</code>。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isBlockValid</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">,</span> oldBlock Block<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> oldBlock<span class="token punctuation">.</span>Index<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">!=</span> newBlock<span class="token punctuation">.</span>Index <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> oldBlock<span class="token punctuation">.</span>Hash <span class="token operator">!=</span> newBlock<span class="token punctuation">.</span>PrevHash <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">)</span> <span class="token operator">!=</span> newBlock<span class="token punctuation">.</span>Hash <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h3 id="web-服务器"><a href="#web-服务器" class="headerlink" title="web 服务器"></a>web 服务器</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        mux <span class="token operator">:=</span> <span class="token function">makeMuxRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        httpAddr <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"ADDR"</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Listening on "</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"ADDR"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>                Addr<span class="token punctuation">:</span>           <span class="token string">":"</span> <span class="token operator">+</span> httpAddr<span class="token punctuation">,</span>                Handler<span class="token punctuation">:</span>        mux<span class="token punctuation">,</span>                ReadTimeout<span class="token punctuation">:</span>    <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>                WriteTimeout<span class="token punctuation">:</span>   <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>                MaxHeaderBytes<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">makeMuxRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>        muxRouter <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        muxRouter<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> handleGetBlockchain<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Methods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span>        muxRouter<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> handleWriteBlock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Methods</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> muxRouter<span class="token punctuation">}</span></code></pre><p><code>makeMuxRouter</code> 主要定义路由处理，当收到 <code>GET</code> 请求，就会调用 <code>handleGetBlockchain</code> 方法。当收到 <code>POST</code> 请求，就会调用 <code>handleWriteBlock</code> 方法。</p><p><code>handleGetBlockchain</code> 获取所有区块的列表信息。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">handleGetBlockchain</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>Blockchain<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"  "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>                <span class="token keyword">return</span>        <span class="token punctuation">}</span>        io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>handleWriteBlock</code> 主要是生成新的区块。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">handleWriteBlock</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> m Message    decoder <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> decoder<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token function">respondWithJSON</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span> r<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>            <span class="token keyword">return</span>    <span class="token punctuation">}</span>       <span class="token keyword">defer</span> r<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//ensure atomicity when creating new block</span>    mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    newBlock <span class="token operator">:=</span> <span class="token function">generateBlock</span><span class="token punctuation">(</span>Blockchain<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>Blockchain<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>BPM<span class="token punctuation">)</span>    mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">isBlockValid</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">,</span> Blockchain<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>Blockchain<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Blockchain <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>Blockchain<span class="token punctuation">,</span> newBlock<span class="token punctuation">)</span>            spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>Blockchain<span class="token punctuation">)</span>    <span class="token punctuation">}</span>       <span class="token function">respondWithJSON</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">,</span> newBlock<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">respondWithJSON</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> code <span class="token builtin">int</span><span class="token punctuation">,</span> payload <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"  "</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>            w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"HTTP 500: Internal Server Error"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>    <span class="token punctuation">}</span>    w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    err <span class="token operator">:=</span> godotenv<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>       <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            genesisBlock <span class="token operator">:=</span> Block<span class="token punctuation">{</span><span class="token punctuation">}</span>            genesisBlock <span class="token operator">=</span> Block<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span>genesisBlock<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> difficulty<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">}</span>             spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>genesisBlock<span class="token punctuation">)</span>            mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            Blockchain <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>Blockchain<span class="token punctuation">,</span> genesisBlock<span class="token punctuation">)</span>            mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>godotenv.Load()</code> 允许我们从 根目录的文件 <code>.env</code> 读取相应的变量。</p></li><li><p><code>genesisBlock</code> 创建初始区块。</p></li><li><p><code>run()</code> 启动 web 服务</p></li></ul><h3 id="启动web服务器"><a href="#启动web服务器" class="headerlink" title="启动web服务器"></a>启动web服务器</h3><pre class="language-go" data-language="go"><code class="language-go">$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span></code></pre><p>可以通过 <code>Postman</code>软件模拟网络请求。</p><p>通过 <code>POST</code> 访问 <code>http://localhost:8080</code> 可以添加新的区块信息。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-fed722a43f3c6d07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>可以在终端查看挖矿过程，如图所示：</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-75b9c712a6a243fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>通过 <code>GET</code> 访问 <code>http://localhost:8080</code> 可以获取区块链信息。</p><p><img src="http://upload-images.jianshu.io/upload_images/11383699-eb0a07ab19dfca2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p><a href="https://github.com/didianV5/blockchain/tree/master/proof-of-work">使用 go 实现 Proof-of-Work 共识机制</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PoW 共识机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零知识证明</title>
      <link href="/2018/05/21/ling-zhi-shi-zheng-ming/"/>
      <url>/2018/05/21/ling-zhi-shi-zheng-ming/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="什么是零知识证明"><a href="#什么是零知识证明" class="headerlink" title="什么是零知识证明"></a>什么是零知识证明</h2><p>零知识证明(Zero—Knowledge Proof)，是由S.Goldwasser、S.Micali及C.Rackoff在20世纪80年代初提出的。它指的是证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的。零知识证明实质上是一种涉及两方或更多方的协议，即两方或更多方完成一项任务所需采取的一系列步骤。证明者向验证者证明并使其相信自己知道或拥有某一消息，但证明过程不能向验证者泄漏任何关于被证明消息的信息。大量事实证明，零知识证明在密码学中非常有用。如果能够将零知识证明用于验证，将可以有效解决许多问题。</p><h2 id="零知识证明例子"><a href="#零知识证明例子" class="headerlink" title="零知识证明例子"></a>零知识证明例子</h2><p>阿里巴巴被强盗抓住，为了保命，他需要向强盗证明自己拥有打开石门的密码，同时又不能把密码告诉强盗。他想出一个解决办法，先让强盗离开自己一箭之地，距离足够远让强盗无法听到口令，足够近让阿里巴巴无法在强盗的弓箭下逃生。阿里巴巴就在这个距离下向强盗展示了石门的打开和关闭。</p><p>这个整个过程就是零知识证明，证明者能够在不向验证者提供任何有用信息（石门的口令）的情况下，使验证者相信某个论断（阿里巴巴知道打开石门的方法）是正确的。</p><h2 id="zk-SNARK"><a href="#zk-SNARK" class="headerlink" title="zk-SNARK"></a>zk-SNARK</h2><p>zk-SNARK 它是一种非常适合区块链的零知识验证技术，可以让别人在不知道具体交易内容的情况下验证交易（或者是智能合约函数调用）的有效性。有了zk-SNARK，我们既保留了区块链互相不信任个体间的共识达成问题，又保护了交易隐私，简直就是在众目睽睽下原地隐身。</p><p>zk-SNARK的全称是zero-knowledge Succinct Non-Interactive Arguments of Knowledge （零知识，简洁，非交互的知识论证）。</p><h2 id="zk-SNARK的应用"><a href="#zk-SNARK的应用" class="headerlink" title="zk-SNARK的应用"></a>zk-SNARK的应用</h2><p>在正式深入zk-SNARK的之前，我们不妨先看看它有哪些实际的应用。Zcash 是第一个应用zk-SNARK技术的区块链，它能够提供完全隐私化和加密化的虚拟货币转账。完美解决了老董发工资的难题。</p><p>以太坊(Ethereum)目前也在试图把Zcash的隐私交易功能作为一个预编译合约链接到其上的其他智能合约中（由于如果不使用预编译，每个区块的gas限制将无法完成复杂的zk-SNARK运算）。这被称为ZoE (Zcash over Ethereum)，不过即使做了预编译优化，他能提供的隐私验证能力非常有限。</p><p>尚未正式发布的Hawk是一个完全采取了zk-SNARK的区块链智能合约部署系统。</p><p>当然zk-SNARK所能提供的隐私化交易未来还会有很多其他领域的应用。一个例子是通过区块链进行的拍卖，每个参与竞标的人无需暴露自己的身份和标的具体内容，这将让更多类型的拍卖得以在区块链上实现。另一个例子是匿名选举，投票人无需暴露自己身份就可以在区块链上参与投票。此外，zk-SNARK还可以使能一些“选择性公开”的场景，比如你可以在区块链上证明你在某一个城市而不暴露你的具体位置。</p><h2 id="zk-SNARK技术详解"><a href="#zk-SNARK技术详解" class="headerlink" title="zk-SNARK技术详解"></a>zk-SNARK技术详解</h2><p>zk-SNARK是一种特别适合区块链的零知识论证 算法（论证与验证并不完全一样，为了简洁，在本文中不对验证和论证作区分）。这里为什么说zk-SNARK特别适合区块链呢？因为zk-SNARK在实现零知识验证的同时还具有以下几个特点：<br>Succinct （简洁性）：验证者(verifier)只需要少量计算就可以完成验证。这对于区块链非常重要，因为区块链上为了能够快速达到共识，每一个计算步骤不能过于复杂。</p><p>Non-interactive (非交互性)：示证者(prover)和验证者(verifier)之间只需要交换极少量的信息即可完成整个验证过程。这对于区块链同样至关重要，因为区块链上节点众多，并且每个节点都需要每一笔对交易进行验证，所以验证过程必须只涉及极少量的信息交换，否则通信成本会非常巨大。</p><h2 id="zk-SNARK的使用场景例子"><a href="#zk-SNARK的使用场景例子" class="headerlink" title="zk-SNARK的使用场景例子"></a>zk-SNARK的使用场景例子</h2><p>为了理解zk-SNARK是怎么工作的，我们先考虑一个非常简单的场景：Alice想要向Bob证明她知道一组数x和y使得x+y=7，同时不让Bob知道x和y的具体数值。</p><p>一个简单的办法是使用一种神奇的“加密函数”E(x)，这种加密函数有三个重要性质：</p><p>如果x,y不同，那么它们的加密函数值E(x)和E(y)也不相同。</p><p>给定E(x)的值，很难反推出x的值。</p><p>给定E(x)和E(y)的值，我们可以很容易地计算出某些关于x,y的加密函数值。比如，我们可以通过E(x)和E(y)计算出E(x+y)的值。</p><p>在这里，我们不深入讨论这种加密函数是什么，有一定抽象代数知识的读者可以去查看原始zk-SNARK的论文[1]（事实上，椭圆曲线配对也是zk-SNARK的一个重要创新）。</p><p>有了这种加密函数，我们就可以很容易地设计出以下验证方案1.0：</p><p>Alice把E(x)和E(y)的数值发给Bob，</p><p>Bob通过收到的E(x)和E(y)计算出E(x+y)的值 （利用了加密函数的性质3），</p><p>Bob同时计算E(7)的值，如果E(x+y)=E(7)，那么验证通过，否则验证失败。</p><p>由于加密函数的性质1，如果E(x+y)=E(7)，则必然x+y=7成立，验证有效；同时由于加密函数的性质2，Bob无法从E(x)，E(y)反推出x，y的具体数值。因此，Alice在不泄露x,y具体数值的情况下向Bob验证了x+y=7。</p><p>但是上述方案没有完全实现“零知识”，因为E(x)和E(y)还是泄露了一些关于x和y的信息。比如我们限定x,y为正整数，则Bob可以穷举所有相加为7的数字组合，然后把这些数字组合与收到的E(x), E(y)进行对比，从而获得x,y的具体数值。解决这个问题的方法是Alice产生一个秘密的随机数t，然后发送x+t和y-t的加密函数值E(x+t), E(y-t)给Bob。由于(x+t)+(y-t)=7，所以Bob那里仍可以验证通过，同时由于“随机偏移”t的引入，Bob无论如何也猜不到x,y的真实数值。</p><p>于是我们现在有了验证方案2.0：</p><p>Alice产生一个随机数t, 并把E(x+t)和E(y-t)的数值发给Bob，</p><p>Bob通过收到的E(x+t)和E(y-t)计算出E(x+y)的值，</p><p>Bob同时计算E(7)的值，如果E(x+y)=E(7)，那么验证通过，否则验证失败。</p><p>以上方案实现了完全的“零知识”验证，看似我们的问题已经解决了，可真的是这样吗？</p><p>很可惜并不是！上面这个算法的问题在于它只能验证一些非常简单的知识（不过在实际中这个验证协议已经非常有用，比如RSA加密协议）。而在实际的区块链操作中，需要验证的知识可能是非常复杂的。在很多时候，以上这种仅仅依赖加密函数的方案就不够用了。</p><p>接下来我们考虑一个稍微复杂一点的场景：Alice需要向Bob证明她知道一个满足一定性质的秘密多项式P(x)，并且不泄露具体这个多项式P(x)是什么。</p><p>注意了，这个多项式验证问题非常重要！我稍后会提到：</p><p>无论多复杂的验证问题都可以最终简化为一个多项式验证问题！</p><p>无论多复杂的验证问题都可以最终简化为一个多项式验证问题！</p><p>无论多复杂的验证问题都可以最终简化为一个多项式验证问题！</p><p>重要的问题说三遍。</p><p>下面我们来看如何修改之前的验证算法来解决多项式验证的问题。</p><p>先给大家先补习一下数学知识，一个度为d的多项式P(x)可以写成以下形式：</p><p>P(x) = a0 + a1x + a2x2 + … +adxd</p><p>为什么之前利用加密函数的方案在这里不能直接套用了呢？一个原因是之前我们只需要验证一组具体的值满足一定性质（如x=1和y=6满足x+y=7），而这里的多项式中x的值可能有无穷多个取值，穷举所有的可能性会消耗大量的计算资源。一个巧妙的办法是与其验证所有可能的取值，我们让Bob随机选一个x的值（如x=s），然后Alice仅仅需要向Bob证明多项式P(x)在x=s这一点的取值P(s)满足某种性质。这个随机取样的方法之所以合理，是因为两个不同的多项式在大多数情况都是不相等的，比如两条不同的直线最多有一个相交的点。如果我们随机取一个点，两个不同的多项式取值相同的概率几乎可以忽略不计。采用这个随机取样的办法，验证工作的计算量就大大降低了，这就是zk-SNARK中 “Succinct （简洁性）”的实现办法。</p><p>另外和验证方案2.0一样，Alice需要引入一个“随机偏移” R(s)来使得Bob完全得不到任何关于P(s)的信息。注意P(s)+R(s)必须满足待验证的性质。我们在这里不具体介绍R(s)是如何产生的。</p><p>加上这个随机采样的办法，我们得到了验证方案3.0：</p><p>Bob向Alice发送一个随机点s，</p><p>Alice首先产生一个随机偏移多项式R(x)，然后计算P(s)和R(s)，并且把P(s)+R(s)的加密函数值E(P(s)+R(s))发给Bob，</p><p>Bob验证接收到的加密函数值E(P(s)+R(s))是否满足给定的性质。</p><p>但是验证方案3.0有一个重大缺陷。Bob直接把随机点s的取值发送给了Alice，而P(s)需要满足的性质又是公开的，这就意味着Alice即使不知道多项式P(x)是什么，她也完全可以找一个与P(s)不同但是仍然满足条件的值y，并把y的加密函数值E(y)发给Bob。这种情况Bob仍然会验证通过。怎么处理这个缺陷呢？一个简单的解决办法就是把随机点s加密发给Alice，但是这样做的坏处就是Alice无法计算P(s), R(s)及其加密函数值E(P(s)+R(s))了。为了让Alice仍能计算E(P(s)+R(s))，我们可以让Bob把E(1), E(s), E(s2), …, E(sd)都发送给Alice。根据加密函数的性质3，Alice是可以根据E(1), E(s), E(s2), …, E(sd)计算出E(P(s)+R(s))的数值的，同时随机点s的具体数值也没有暴露。</p><p>于是我们得到了验证方案4.0：</p><p>Bob选取一个随机点s,并向Alice发送一系列加密函数值：E(1), E(s), E(s2), …, E(sd)，</p><p>Alice首先产生一个随机偏移多项式R(x)，然后根据收到的E(1), E(s), E(s2), …, E(sd)计算E(P(s)+R(s))的值并发送给Bob，</p><p>Bob验证接收到的加密函数值E(P(s)+R(s))是否满足给定的性质。</p><p>不过仔细想想验证方案4.0也有个问题。因为Bob只在一个随机点s进行了验证，Alice完全可能是人品爆发恰好在s这一点蒙对了，而实际并不知道符合条件的多项式P(x)长啥样！那么Bob怎么验证Alice确实知道多项式P(x)，而不是恰好蒙对的呢？答案仍然是随机化！</p><p>我们可以让Bob在产生随机点s的同时再产生一个随机数k，然后向Alice同时发送关于s和k的信息。之后Bob要求Alice返回两个数，一个是P(s)的加密值E(P(s))，另一个是kP(s)的加密值E(kP(s))。注意k是一个只有Bob自己知道的秘密随机值，如果Alice可以同时告诉Bob关于P(s)和kP(s)的信息，则证明Alice不是瞎蒙的，而是确实知道P(x)这个多项式长啥样。具体原因是由于一个叫“知识系数假设” (Knowledge of Coefficient Assumption)的数学假设，我在这里就不具体叙述了。</p><p>现在我们有了验证方案5.0 （最终方案）：</p><p>Bob选取一个随机点s和一个随机系数k,并向Alice发送两串加密函数值：[E(1), E(s), E(s2), …, E(sd)], [E(k), E(ks), E(ks2), …, E(ksd)]，</p><p>Alice首先产生一个随机偏移多项式R(x)，然后根据收到的[E(1), E(s), E(s2), …, E(sd)], [E(k), E(ks), E(ks2), …, E(ksd)]计算E(P(s)+R(s))以及E(kP(s)+kR(s))的值并发送给Bob，</p><p>Bob验证接收到的加密函数值E(P(s)+R(s))是否满足给定的性质，并且验证收到的另一个加密函数值是不是E(kP(s)+kR(s))。</p><p>以上基本就是zk-SNARK的完整验证流程了。不过最后还有几个重要的设计细节需要提一下（相信我，这真的是最后了）。</p><p>第一，我们注意到Bob(验证者)需要发送给Alice(示证者)的信息是不随验证内容变化的，因此可以事先在区块链中一次性设置好，之后任何验证过程都可以复用这个设置，验证者不再需要向示证者发送任何信息。这个事先设置好的信息被称为Common Reference String(CRS, 共同参考字符串)。一个重要的考虑是随机点s和随机系数k是必须严格保密的，否则就会有伪造证明通过验证。那么在实际中，这个随机点s和随机系数k是保存的呢？在Zcash的系统里，CRS中存放的实际上只是随机点s和随机系数k的一系列加密值，而s和k的明文则由6个“被充分信任的人”私下保存，这6个人处在地球上6个不同的位置，这些机密的随机数被拆开保存在这6个人手上，只要不是这6个人都变成“坏人”，这些随机数信息就不会被完整恢复。一个有意思的故事是，这6个“被充分信任的人”在最初的时候举行了一个神圣的仪式，共同参与并见证了这个随机点s和随机系数k的产生。</p><p>第二，以上我们只是讨论了多项式验证的问题。但是实际我们要验证的交易程序可能是非常复杂的。zk-SNARK提供了一个系统化的方法可以把任何验证程序转化成一个叫Quadratic Span Program (QSP)的多项式验证问题。有兴趣的读者可以阅读参考文献[2]。</p><h2 id="zk-SNARK的不足与缺陷"><a href="#zk-SNARK的不足与缺陷" class="headerlink" title="zk-SNARK的不足与缺陷"></a>zk-SNARK的不足与缺陷</h2><p>之前说了zk-SNARK那么多的好处，那么它目前有没有什么缺陷呢？那必然是有的。</p><p>第一个问题：虽然zk-SNARK通过随机采样的方式大大减小了验证工作的计算量，但是由于需要验证一个较为复杂的多项式性质，其和传统的验证过程相比仍然耗费了更多了计算资源。这仍是目前很多区块链无法承受的计算需求。因此，如何针对zk-SNARK进行计算优化仍是一个开放问题。</p><p>第二个问题：我们提到zk-SNARK有一个初始设置的阶段，来生成“绝对机密”的随机信息。目前这些绝密随机信息的生成和保存仍然非常原始（参见之前提到的神秘仪式），很难让人完全放心，也很难进行拓展。比如，未来每一个需要隐私保护的智能合约可能都会有自己的初始随机信息要生成，如何确保这些初始随机信息不会被坏人泄露？同时业界和学术界也在研究如何在zk-SNARK中避免这个让人诟病的初始设置步骤。</p><h2 id="如何使用-zk-SNARK-算法"><a href="#如何使用-zk-SNARK-算法" class="headerlink" title="如何使用 zk-SNARK 算法"></a>如何使用 zk-SNARK 算法</h2><p>zk-SNARK 算法的主要作者们写了一个 <a href="https://github.com/scipr-lab/libsnark">libsnark</a> 库，提供了一些基础组件，zcash 用的零知识证明库就是 libsnark 的一个 fork 版本。我本人刚开始看到这个库时也是一筹莫展，即使在我了解了这么多关于 zk-SNARK 背后的技术知识后。而后，寻得一个作者编写的简单<a href="https://github.com/ebfull/lightning_circuit">例子</a> ，才基本入了门。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/b6a14c472cc1?from=timeline">https://www.jianshu.com/p/b6a14c472cc1?from=timeline</a></p><p><a href="http://news.btc123.com/news/detail?id=8125">http://news.btc123.com/news/detail?id=8125</a></p><p><a href="https://blockchain.iethpay.com/zkSNARK-intro.html">https://blockchain.iethpay.com/zkSNARK-intro.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 零知识证明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记（二） 函数</title>
      <link href="/2018/05/21/javascript-xue-xi-bi-ji-er-han-shu/"/>
      <url>/2018/05/21/javascript-xue-xi-bi-ji-er-han-shu/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="1-定义函数"><a href="#1-定义函数" class="headerlink" title="1 定义函数"></a>1 定义函数</h3><p>在JavaScript中，第一种定义函数的凡事如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述<code>abs()</code>函数的含义如下：</p><ul><li><code>function</code>指出这是一个函数定义；</li><li><code>abs</code>是函数的名称；</li><li><code>(x)</code>括号内列出函数的参数，多个参数以<code>,</code>分隔；</li><li><code>{ ... }</code>之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。</li></ul><p>函数中如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>undefined</code>。</p><p>JavaScript中的函数也是一个对象，上边定义的函数可理解为函数名abs指向该函数。</p><p>因此，第二种定义函数的方式如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">abs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>function (x) { ... }</code>是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量<code>abs</code>，所以，通过变量<code>abs</code>就可以调用该函数。</p><p>上述两种定义_完全等价_，注意第二种方式按照完整语法需要在函数体末尾加一个<code>;</code>，表示赋值语句结束。</p><h3 id="2-调用函数"><a href="#2-调用函数" class="headerlink" title="2 调用函数"></a>2 调用函数</h3><p>调用函数时，按顺序传入参数即可：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回10</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回9</span></code></pre><p>由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'blablabla'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回10</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'haha'</span><span class="token punctuation">,</span> <span class="token string">'hehe'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回9</span></code></pre><p>传入的参数比定义的少也没有问题：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回NaN</span></code></pre><p>此时<code>abs(x)</code>函数的参数<code>x</code>将收到<code>undefined</code>，计算结果为<code>NaN</code>。</p><p>要避免收到<code>undefined</code>，可以对参数进行检查：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">!==</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token string">'Not a number'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-arguments"><a href="#3-arguments" class="headerlink" title="3 arguments"></a>3 arguments</h3><p>JavaScript还有一个免费赠送的关键字<code>arguments</code>，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<code>arguments</code>类似<code>Array</code>但它不是一个<code>Array</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x = '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arg '</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">' = '</span> <span class="token operator">+</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10, 20, 30</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果为：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">x <span class="token operator">=</span> <span class="token number">10</span>arg <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">10</span>arg <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">20</span>arg <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">30</span></code></pre><p>利用<code>arguments</code>，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span></code></pre><p>实际上<code>arguments</code>最常用于判断传入参数的个数。你可能会看到这样的写法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// foo(a[, b], c)</span><span class="token comment">// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 实际拿到的参数是a和b，c为undefined</span>        c <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">// 把b赋给c</span>        b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// b变为默认值</span>    <span class="token punctuation">}</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span></code></pre><p>要把中间的参数<code>b</code>变为“可选”参数，就只能通过<code>arguments</code>判断，然后重新调整参数并赋值。</p><h3 id="4-rest参数"><a href="#4-rest参数" class="headerlink" title="4 rest参数"></a>4 rest参数</h3><p>由于JavaScript函数允许接收任意个参数，于是我们就不得不用<code>arguments</code>来获取所有参数：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i<span class="token punctuation">,</span> rest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rest<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a = '</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b = '</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>为了获取除了已定义参数<code>a</code>、<code>b</code>之外的参数，我们不得不用<code>arguments</code>，并且循环要从索引<code>2</code>开始以便排除前两个参数，这种写法很别扭，只是为了获得额外的<code>rest</code>参数，有没有更好的方法？</p><p>ES6标准引入了<code>rest</code>参数，上面的函数可以改写为：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a = '</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b = '</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果:</span><span class="token comment">// a = 1</span><span class="token comment">// b = 2</span><span class="token comment">// Array [ 3, 4, 5 ]</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果:</span><span class="token comment">// a = 1</span><span class="token comment">// b = undefined</span><span class="token comment">// Array []</span></code></pre><p><code>rest</code>参数只能写在最后，前面用<code>...</code>标识，从运行结果可知，传入的参数先绑定<code>a</code>、<code>b</code>，多余的参数以数组形式交给变量<code>rest</code>，所以，不再需要<code>arguments</code>我们就获取了全部参数。</p><p>如果传入的参数连正常定义的参数都没填满，<code>rest</code>参数会接收一个空数组（注意不是<code>undefined</code>）。</p><h3 id="5-解构赋值"><a href="#5-解构赋值" class="headerlink" title="5 解构赋值"></a>5 解构赋值</h3><p>从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值。</p><p>什么是解构赋值？我们先看看传统的做法，如何把一个数组的元素分别赋值给几个变量：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> z <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>现在，在ES6中，可以使用解构赋值，直接对多个变量同时赋值：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token comment">// 如果浏览器支持解构赋值就不会报错:</span><span class="token keyword">var</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// x, y, z分别被赋值为数组对应元素:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x = '</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">', y = '</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">', z = '</span> <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果为：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">x <span class="token operator">=</span> hello<span class="token punctuation">,</span> y <span class="token operator">=</span> JavaScript<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token constant">ES6</span></code></pre><p>注意，对数组元素进行解构赋值时，多个变量要用<code>[...]</code>括起来。</p><p>如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> z<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x<span class="token punctuation">;</span> <span class="token comment">// 'hello'</span>y<span class="token punctuation">;</span> <span class="token comment">// 'JavaScript'</span>z<span class="token punctuation">;</span> <span class="token comment">// 'ES6'</span></code></pre><p>解构赋值还可以忽略某些元素：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 忽略前两个元素，只对z赋值第三个元素</span>z<span class="token punctuation">;</span> <span class="token comment">// 'ES6'</span></code></pre><p>如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>    <span class="token literal-property property">passport</span><span class="token operator">:</span> <span class="token string">'G-12345678'</span><span class="token punctuation">,</span>    <span class="token literal-property property">school</span><span class="token operator">:</span> <span class="token string">'No.4 middle school'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> passport<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span><span class="token comment">// name, age, passport分别被赋值为对应属性:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name = '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">', age = '</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">', passport = '</span> <span class="token operator">+</span> passport<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果为：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">name <span class="token operator">=</span> 小明<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> passport <span class="token operator">=</span> <span class="token constant">G</span><span class="token operator">-</span><span class="token number">12345678</span></code></pre><p>对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>    <span class="token literal-property property">passport</span><span class="token operator">:</span> <span class="token string">'G-12345678'</span><span class="token punctuation">,</span>    <span class="token literal-property property">school</span><span class="token operator">:</span> <span class="token string">'No.4 middle school'</span><span class="token punctuation">,</span>    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">,</span>        <span class="token literal-property property">street</span><span class="token operator">:</span> <span class="token string">'No.1 Road'</span><span class="token punctuation">,</span>        <span class="token literal-property property">zipcode</span><span class="token operator">:</span> <span class="token string">'100001'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>city<span class="token punctuation">,</span> zip<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>name<span class="token punctuation">;</span> <span class="token comment">// '小明'</span>city<span class="token punctuation">;</span> <span class="token comment">// 'Beijing'</span>zip<span class="token punctuation">;</span> <span class="token comment">// undefined, 因为属性名是zipcode而不是zip</span><span class="token comment">// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:</span>address<span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: address is not defined</span></code></pre><p>使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为<code>undefined</code>，这和引用一个不存在的属性获得<code>undefined</code>是一致的。如果要使用的变量名和属性名不一致，可以用下面的语法获取：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>    <span class="token literal-property property">passport</span><span class="token operator">:</span> <span class="token string">'G-12345678'</span><span class="token punctuation">,</span>    <span class="token literal-property property">school</span><span class="token operator">:</span> <span class="token string">'No.4 middle school'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 把passport属性赋值给变量id:</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> <span class="token literal-property property">passport</span><span class="token operator">:</span>id<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>name<span class="token punctuation">;</span> <span class="token comment">// '小明'</span>id<span class="token punctuation">;</span> <span class="token comment">// 'G-12345678'</span><span class="token comment">// 注意: passport不是变量，而是为了让变量id获得passport属性:</span>passport<span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: passport is not defined</span></code></pre><p>解构赋值还可以使用默认值，这样就避免了不存在的属性返回<code>undefined</code>的问题：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>    <span class="token literal-property property">passport</span><span class="token operator">:</span> <span class="token string">'G-12345678'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 如果person对象没有single属性，默认赋值为true:</span><span class="token keyword">var</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> single<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>name<span class="token punctuation">;</span> <span class="token comment">// '小明'</span>single<span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><p>有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明变量:</span><span class="token keyword">var</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token comment">// 解构赋值:</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 语法错误: Uncaught SyntaxError: Unexpected token =</span></code></pre><p>这是因为JavaScript引擎把<code>{&lt;!-- \--&gt;</code>开头的语句当作了块处理，于是<code>=</code>不再合法。解决方法是用小括号括起来：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-解构赋值的使用场景"><a href="#6-解构赋值的使用场景" class="headerlink" title="6 解构赋值的使用场景"></a>6 解构赋值的使用场景</h3><p>解构赋值在很多时候可以大大简化代码。例如，交换两个变量<code>x</code>和<code>y</code>的值，可以这么写，不再需要临时变量：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span></code></pre><p>快速获取当前页面的域名和路径：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">{</span><span class="token literal-property property">hostname</span><span class="token operator">:</span>domain<span class="token punctuation">,</span> <span class="token literal-property property">pathname</span><span class="token operator">:</span>path<span class="token punctuation">}</span> <span class="token operator">=</span> location<span class="token punctuation">;</span></code></pre><p>如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。例如，下面的函数可以快速创建一个<code>Date</code>对象：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">buildDate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">,</span> hour<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> minute <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>它的方便之处在于传入的对象只需要<code>year</code>、<code>month</code>和<code>day</code>这三个属性：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">buildDate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">2017</span><span class="token punctuation">,</span> <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">day</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Sun Jan 01 2017 00:00:00 GMT+0800 (CST)</span></code></pre><p>也可以传入<code>hour</code>、<code>minute</code>和<code>second</code>属性：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">buildDate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">2017</span><span class="token punctuation">,</span> <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">day</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">hour</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">minute</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Sun Jan 01 2017 20:15:00 GMT+0800 (CST)</span></code></pre><h3 id="7-方法"><a href="#7-方法" class="headerlink" title="7 方法"></a>7 方法</h3><p>在对象中绑定函数，称为这个对象的方法。</p><p>在JavaScript中，对象是这样定义的：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span>  <span class="token literal-property property">birth</span><span class="token operator">:</span><span class="token number">1990</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>如果我们给<code>xiaoming</code>绑定一个函数，比如，写个<code>age()</code>方法，返回<code>xiaoming</code>的年龄：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span>  <span class="token literal-property property">birth</span><span class="token operator">:</span><span class="token number">1990</span><span class="token punctuation">,</span>  <span class="token function-variable function">age</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> y<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xiaoming<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">//function xiaoming.age()</span>xiaoming<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果跟调用年份有关</span></code></pre><h4 id="7-1-apply"><a href="#7-1-apply" class="headerlink" title="7.1 apply"></a>7.1 apply</h4><p>虽然在一个独立的函数调用中，根据是否是strict模式，<code>this</code>指向<code>undefined</code>或<code>window</code>，不过，我们还是可以控制<code>this</code>的指向的！</p><p>要指定函数的<code>this</code>指向哪个对象，可以用函数本身的<code>apply</code>方法，它接收两个参数，第一个参数就是需要绑定的<code>this</code>变量，第二个参数是<code>Array</code>，表示函数本身的参数。</p><p>用<code>apply</code>修复<code>getAge()</code>调用：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> y <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>    <span class="token literal-property property">birth</span><span class="token operator">:</span> <span class="token number">1990</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> getAge<span class="token punctuation">}</span><span class="token punctuation">;</span>xiaoming<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span><span class="token function">getAge</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25, this指向xiaoming, 参数为空</span></code></pre><p>另一个与<code>apply()</code>类似的方法是<code>call()</code>，唯一区别是：</p><ul><li><code>apply()</code>把参数打包成<code>Array</code>再传入；</li><li><code>call()</code>把参数按顺序传入。</li></ul><p>比如调用<code>Math.max(3, 5, 4)</code>，分别用<code>apply()</code>和<code>call()</code>实现如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span></code></pre><p>对普通函数调用，我们通常把<code>this</code>绑定为<code>null</code>。</p><h4 id="7-2-装饰器"><a href="#7-2-装饰器" class="headerlink" title="7.2 装饰器"></a>7.2 装饰器</h4><p>利用<code>apply()</code>，我们还可以动态改变函数的行为。</p><p>JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。</p><p>现在假定我们想统计一下代码一共调用了多少次<code>parseInt()</code>，可以把所有的调用都找出来，然后手动加上<code>count += 1</code>，不过这样做太傻了。最佳方案是用我们自己的函数替换掉默认的<code>parseInt()</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> oldParseInt <span class="token operator">=</span> parseInt<span class="token punctuation">;</span> <span class="token comment">// 保存原函数</span>window<span class="token punctuation">.</span><span class="token function-variable function">parseInt</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">oldParseInt</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用原函数</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 测试:</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'count = '</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code></pre><h3 id="8-高阶函数-Higher-order-function"><a href="#8-高阶函数-Higher-order-function" class="headerlink" title="8 高阶函数(Higher-order function)"></a>8 高阶函数(Higher-order function)</h3><p>一个函数接收另一个函数作为参数，这个函数就是高阶函数。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//函数mul就是高阶函数</span><span class="token keyword">function</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>add</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="8-1-map-x2F-reduce"><a href="#8-1-map-x2F-reduce" class="headerlink" title="8.1 map/reduce"></a>8.1 map/reduce</h4><p>map/reduce的概念可参考Google论文：“<a href="http://research.google.com/archive/mapreduce.html">MapReduce: Simplified Data Processing on Large Clusters</a>”。</p><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>举例说明，比如我们有一个函数f(x)=x^2，要把这个函数作用在一个数组<code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>上，就可以用<code>map</code> 实现如下：</p><p>由于<code>map()</code>方法定义在JavaScript的<code>Array</code>中，我们调用<code>Array</code>的<code>map()</code>方法，传入我们自己的函数就得到了一个新的<code>Array</code>作为结果：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> results <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>pow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,4,9,16,25,36,49,64,81]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：<code>map()</code>传入的参数是<code>pow</code>，即函数对象本身。</p><p>我们还可以利用<code>map()</code>方法将<code>Array</code>的所有数字转换成字符串：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ['1', '2', '3', '4', '5', '6', '7', '8', '9']</span></code></pre><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><p>Array的<code>reduce()</code>把一个函数作用在这个<code>Array</code>的<code>[x1, x2, x3...]</code>上，有点类似于递归，这个函数必须接收两个参数，<code>reduce()</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">,</span> x4<span class="token punctuation">)</span></code></pre><p>比如说对一个<code>Array</code>求和，就可以用<code>reduce</code>实现：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//25</span></code></pre><p>要把<code>[1, 3, 5, 7, 9]</code>变换成整数13579，<code>reduce()</code>也能派上用场：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 13579</span></code></pre><p>参考链接：<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编译Openssl步骤</title>
      <link href="/2018/05/21/linux-xi-tong-bian-yi-openssl-bu-zou/"/>
      <url>/2018/05/21/linux-xi-tong-bian-yi-openssl-bu-zou/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="1-提前准备工作"><a href="#1-提前准备工作" class="headerlink" title="1.提前准备工作"></a>1.提前准备工作</h2><p>去<a href="https://link.jianshu.com/?t=https://www.openssl.org">https://www.openssl.org</a>网站下载openssl源码<br>或用git命令从github上下载<br>git clone&nbsp;<a href="https://link.jianshu.com/?t=https://github.com/openssl/openssl.git">https://github.com/openssl/openssl.git</a></p><p>解压openssl开发包文件</p><p>tar -xzf openssl-1.1.0c.tar.gz</p><h3 id="2-在终端下操作如下"><a href="#2-在终端下操作如下" class="headerlink" title="2.在终端下操作如下"></a>2.在终端下操作如下</h3><p>进入刚才解压的文件夹，如图所示</p><p><img src="https://upload-images.jianshu.io/upload_images/11383699-e4183288364f6e87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/502" alt="image"></p><p>设定Openssl 安装路径，(–prefix)参数为欲安装之目录，执行如下命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">./config --prefix<span class="token operator">=</span>/usr/local/openssl</code></pre><h3 id="3-执行命令-x2F-config-t"><a href="#3-执行命令-x2F-config-t" class="headerlink" title="3.执行命令./config -t"></a>3.执行命令./config -t</h3><h3 id="4-执行make命令，编译Openssl，编译需要等待一定的时间。"><a href="#4-执行make命令，编译Openssl，编译需要等待一定的时间。" class="headerlink" title="4.执行make命令，编译Openssl，编译需要等待一定的时间。"></a>4.执行make命令，编译Openssl，编译需要等待一定的时间。</h3><h3 id="5、执行make-install，安装-Openssl，安装也需要一定的时间。"><a href="#5、执行make-install，安装-Openssl，安装也需要一定的时间。" class="headerlink" title="5、执行make install，安装 Openssl，安装也需要一定的时间。"></a>5、执行make install，安装 Openssl，安装也需要一定的时间。</h3><p>安装完成后,openssl 会被安装到/usr/local/openssl 目录，包括头文件目录</p><p>进入lib后，libssl.a和libcrypto.a则为编译后的库文件</p><p>提示：若命令执行有问题，可能是权限不够，在命令前加上sudo重试</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openssl linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu如何使用openssl生成RSA密钥对</title>
      <link href="/2018/05/21/ubuntu-ru-he-shi-yong-openssl-sheng-cheng-rsa-mi-yao-dui/"/>
      <url>/2018/05/21/ubuntu-ru-he-shi-yong-openssl-sheng-cheng-rsa-mi-yao-dui/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一般情况下ubuntu和mac系统都会自带openssl，安装之前先测试一下，打开终端，输入openssl，如果出现以下画面，即已安装。"><a href="#一般情况下ubuntu和mac系统都会自带openssl，安装之前先测试一下，打开终端，输入openssl，如果出现以下画面，即已安装。" class="headerlink" title="一般情况下ubuntu和mac系统都会自带openssl，安装之前先测试一下，打开终端，输入openssl，如果出现以下画面，即已安装。"></a>一般情况下ubuntu和mac系统都会自带openssl，安装之前先测试一下，打开终端，输入openssl，如果出现以下画面，即已安装。</h2><pre class="language-bash" data-language="bash"><code class="language-bash">lbl@lbl:~$ opensslOpenSSL<span class="token operator">&gt;</span></code></pre><p>如果系统没有安装可执行以下命令进行安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssl</code></pre><p>安装完成之后既可以使用了</p><p>首先需要进入openssl交互界面，在终端输入openssl命令即可</p><h2 id="1-生成RSA私钥"><a href="#1-生成RSA私钥" class="headerlink" title="1.生成RSA私钥"></a>1.生成RSA私钥</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ genrsa -out rsa_private_key.pem <span class="token number">1024</span></code></pre><p>该命令会生成1024位的私钥，同时会在当前路径下生成rsa_private_key.pem文件，界面如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">OpenSSL<span class="token operator">&gt;</span> genrsa -out rsa_private_key.pem <span class="token number">1024</span>Generating RSA private key, <span class="token number">1024</span> bit long modulus<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.++++++<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.++++++e is <span class="token number">65537</span> <span class="token punctuation">(</span>0x010001<span class="token punctuation">)</span></code></pre><h2 id="2-把RSA私钥转换成PKCS8格式"><a href="#2-把RSA私钥转换成PKCS8格式" class="headerlink" title="2.把RSA私钥转换成PKCS8格式"></a>2.把RSA私钥转换成PKCS8格式</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM –nocrypt</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">pkcs8: Use -help <span class="token keyword">for</span> summary.error <span class="token keyword">in</span> pkcs8</code></pre><p>输入命令后如果出现上面报错情况可尝试去掉最后的 -nocrypt</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM</code></pre><p>如果出现输入加密密码的信息即为成功，输入两次加密密码就会出现秘钥信息，下面代码中从—–BEGIN ENCRYPTED PRIVATE KEY—–开始到—–END ENCRYPTED PRIVATE KEY—–为止都是秘钥内容。</p><p><img src="https://upload-images.jianshu.io/upload_images/11383699-068d2fe3a0aab050.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/658" alt="siyao.png"></p><h2 id="3-生成RSA公钥"><a href="#3-生成RSA公钥" class="headerlink" title="3.生成RSA公钥"></a>3.生成RSA公钥</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</code></pre><p>输入上面命令，若出现<em>writing RSA key</em>则公钥生成成功，如下图：</p><pre class="language-bash" data-language="bash"><code class="language-bash">OpenSSL<span class="token operator">&gt;</span> rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pemwriting RSA key</code></pre><p>此时在当前路径下会出现一个名为rsa_public_key.pem的文件，其内容就是公钥。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu openssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记（一） 基本语法</title>
      <link href="/2018/05/21/javascript-xue-xi-bi-ji-yi-ji-ben-yu-fa/"/>
      <url>/2018/05/21/javascript-xue-xi-bi-ji-yi-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>JavaScript严格区分大小写</p><p>每个语句以<code>;</code>结束，语句块用<code>{...}</code>，JavaScript不强制在语句末尾添加<code>;</code>，浏览器中负责执行JavaScript代码的引擎会自动在每个语句后面添加<code>;</code>，但是不添加;可能导致运行结果和期待结果不一致，所以建议都写上<code>;</code>。</p><h2 id="1-数据类型和变量"><a href="#1-数据类型和变量" class="headerlink" title="1 数据类型和变量"></a>1 数据类型和变量</h2><h3 id="1-1-Number"><a href="#1-1-Number" class="headerlink" title="1.1 Number"></a>1.1 Number</h3><p>JavaScript不区分证书和浮点数，统一用Number表示</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// 整数123</span><span class="token number">0.456</span><span class="token punctuation">;</span> <span class="token comment">// 浮点数0.456</span><span class="token number">1.2345e3</span><span class="token punctuation">;</span> <span class="token comment">// 科学计数法表示1.2345x1000，等同于1234.5</span><span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">;</span> <span class="token comment">// 负数</span><span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span><span class="token number">Infinity</span><span class="token punctuation">;</span> <span class="token comment">// Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinityr所能表示的最大值时，就表示为Infinity</span></code></pre><p>Number可以直接做四则运算，规则和数学一致</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 7.5</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token number">10.5</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 1.5</span></code></pre><h3 id="1-2-字符串"><a href="#1-2-字符串" class="headerlink" title="1.2 字符串"></a>1.2 字符串</h3><p>字符串是以单引号和双引号括起来的任意文本，和其他语言基本一致</p><p>ASCII字符可以以<code>\x##</code>形式的十六进制表示，例如：</p><p>‘\x41’; // 完全等同于 ‘A’</p><p>还可以用<code>\u####</code>表示一个Unicode字符：</p><p>‘\u4e2d \u6587’; // 完全等同于 ‘中文’</p><h4 id="1-2-1-多行字符串"><a href="#1-2-1-多行字符串" class="headerlink" title="1.2.1 多行字符串"></a>1.2.1 多行字符串</h4><p>在ES6标准中可以用反引号` … `(在键盘上ESC键下边)表示，与go语言中的反引号用法基本一致:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">这是一个多行字符串</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre><h4 id="1-2-2-模板字符串"><a href="#1-2-2-模板字符串" class="headerlink" title="1.2.2 模板字符串"></a>1.2.2 模板字符串</h4><p>一般情况下用+号连接多个字符串，但时在ES6标准中新增了模板字符串，模板字符串中使用<code>${变量名}</code>获取变量的值：</p><ul><li>一般方法连接多个字符串<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">'你好, '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">', 你今年'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'岁了!'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//你好，小明，你今年20岁了！</span></code></pre></li><li>模板字符串连接多个字符串<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你好, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, 你今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//你好，小明，你今年20岁了！</span></code></pre></li></ul><h4 id="1-2-3-操作字符串"><a href="#1-2-3-操作字符串" class="headerlink" title="1.2.3 操作字符串"></a>1.2.3 操作字符串</h4><p>获取字符串长度</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//11</span></code></pre><p>获取字符串中某个指定位置的字符，使用类似于Array下标操作：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//h</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment">//w</span>s<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token comment">//undefined 超出范围的索引不会报错，都会返回undefined</span></code></pre><p><em>注意</em>：字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是也没有任何效果：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//仍然会输出test</span></code></pre><p>JavaScript提供了一些操作字符串的常用方法，请注意，调用这些方法时不会改变原来字符串的内容，而是一个返回新字符串。</p><h5 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase"></a>toUpperCase</h5><p>toUpperCase()把一个字符串全部变成大写</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回'HELLO'</span></code></pre><h5 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase"></a>toLowerCase</h5><p>toLowerCase()把一个字符串全部变为小写</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token keyword">var</span> lower <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回'hello'并赋值给变量lower</span>lower<span class="token punctuation">;</span> <span class="token comment">// 'hello'</span></code></pre><h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h5><p>indexOf()会搜索指定字符串出现的位置：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'hello, world'</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回7</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有找到指定的子串，返回-1</span></code></pre><h5 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h5><p>substring()返回指定索引区间的字符串</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'hello, world'</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引0开始到5（不包括5），返回'hello'</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引7开始到结束，返回'world'</span></code></pre><h3 id="1-3-布尔值"><a href="#1-3-布尔值" class="headerlink" title="1.3 布尔值"></a>1.3 布尔值</h3><p>布尔值：<code>true</code>，<code>false</code></p><h3 id="1-4-null和undefined"><a href="#1-4-null和undefined" class="headerlink" title="1.4 null和undefined"></a>1.4 null和undefined</h3><p><code>null</code>表示一个“空”的值，它和<code>0</code>以及空字符串<code>' '</code>不同，<code>0</code>是一个数值，<code>' '</code>表示长度为0的字符串，是客观存在的，而<code>null</code>表示什么都没有。</p><p><code>undefined</code>表示“未定义”，仅仅在判断函数参数是否传递的情况下有用。</p><h3 id="1-5-数组"><a href="#1-5-数组" class="headerlink" title="1.5 数组"></a>1.5 数组</h3><p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型，数组用<code>[]</code>表示，元素之间用<code>,</code>隔开。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>另外一种创建数组的方法是通过<code>Array()</code>函数实现：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>数组的元素可以通过索引来访问，请注意所有计算机语言的索引都是熊<code>0</code>开始的：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//该数组的索引范围是\[0,5\]</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//返回索引为0的元素，即1</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//返回索引为3的元素，即hello</span>arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//索引超出范围，返回undefined</span></code></pre><p>要取得数组的长度，直接调用<code>length</code>属性：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 6</span></code></pre><p>如果直接给<code>Array</code>的<code>length</code>属性赋一个新的值会导致<code>Array</code>大小的变化：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 3</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr变为\[1, 2, 3, undefined, undefined, undefined\]</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr变为\[1, 2\]</span></code></pre><p><code>Array</code>可以通过索引把对应的元素修改为新的值，因此，对<code>Array</code>的索引进行赋值会直接修改这个<code>Array</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr现在变为\['A', 99, 'C'\]</span></code></pre><p>通过索引赋值时，如果索引超过了范围，同样会引起<code>Array</code>大小的变化：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr变为\[1, 2, 3, undefined, undefined, 'x'\]</span></code></pre><p>大多数编程语言不允许直接改变数组的大小，越界访问索引会报错，然而在JavaScript的<code>Array</code>却不会有任何错误。在实际运用中，不建议直接修改<code>Array</code>的大小，访问索引时要确保索引不会越界。</p><h5 id="indexOf-1"><a href="#indexOf-1" class="headerlink" title="indexOf"></a>indexOf</h5><p>与String类似，<code>Array</code>也可以通过<code>indexOf()</code>来搜索一个指定的元素的位置：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素10的索引为0</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素20的索引为1</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素30没有找到，返回-1</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素'30'的索引为2</span></code></pre><p>注意，数字<code>30</code>和字符串<code>'30'</code>是不同的元素。</p><h5 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h5><p><code>slice()</code>就是对应String的<code>substring()</code>版本，它截取<code>Array</code>的部分元素，然后返回一个新的<code>Array</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span></code></pre><p>注意到<code>slice()</code>的起止参数包括开始索引，不包括结束索引。</p><p>如果不给<code>slice()</code>传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个<code>Array</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> aCopy <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aCopy<span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 'C', 'D', 'E', 'F', 'G']</span>aCopy <span class="token operator">===</span> arr<span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre><h5 id="push和pop"><a href="#push和pop" class="headerlink" title="push和pop"></a>push和pop</h5><p><code>push()</code>向<code>Array</code>的末尾添加若干元素，<code>pop()</code>则把<code>Array</code>的最后一个元素删除掉：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回Array新的长度: 4</span>arr<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 'A', 'B']</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pop()返回'B'</span>arr<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 'A']</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连续pop 3次</span>arr<span class="token punctuation">;</span> <span class="token comment">// []</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空数组继续pop不会报错，而是返回undefined</span>arr<span class="token punctuation">;</span> <span class="token comment">// []</span></code></pre><h5 id="unshift和shift"><a href="#unshift和shift" class="headerlink" title="unshift和shift"></a>unshift和shift</h5><p>如果要往<code>Array</code>的头部添加若干元素，使用<code>unshift()</code>方法，<code>shift()</code>方法则把<code>Array</code>的第一个元素删掉：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回Array新的长度：4</span>arr<span class="token punctuation">;</span><span class="token comment">//['A','B',1,2]</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除A</span>arr<span class="token punctuation">;</span><span class="token comment">//['B',1,2]</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连续删除3次</span>arr<span class="token punctuation">;</span><span class="token comment">//[]</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空数组继续shift不会报错，而是返回undefined</span>arr<span class="token punctuation">;</span><span class="token comment">//[]</span></code></pre><h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><p><code>sort()</code>可以对当前<code>Array</code>进行排序，它会直接修改当前<code>Array</code>的元素位置，直接调用时，按照默认顺序排序：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span><span class="token comment">//['A','B','C']</span></code></pre><h5 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h5><p><code>reverse()</code>把整个<code>Array</code>的元素反转（即以数组中间的元素为基准，将其两边的元素对调）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span><span class="token comment">//['three','two','one']</span></code></pre><h5 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h5><p><code>splice()</code>方法是修改<code>Array</code>的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Microsoft'</span><span class="token punctuation">,</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Yahoo'</span><span class="token punctuation">,</span> <span class="token string">'AOL'</span><span class="token punctuation">,</span> <span class="token string">'Excite'</span><span class="token punctuation">,</span> <span class="token string">'Oracle'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从索引2开始删除3个元素，然后再添加两个元素</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Google'</span><span class="token punctuation">,</span><span class="token string">'FaceBook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回删除的元素['Yahoo','AOL','Excite']</span>arr<span class="token punctuation">;</span><span class="token comment">//['Microsoft','Apple','Google','FaceBook','Oracle']</span><span class="token comment">//只删除，不添加</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//删除['Google','FaceBook']</span>arr<span class="token punctuation">;</span><span class="token comment">//['Microsoft','Apple','Oracle']</span><span class="token comment">//只添加，不删除</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'Google'</span><span class="token punctuation">,</span><span class="token string">'FaceBook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回[]，因为没有删除任何元素</span>arr<span class="token punctuation">;</span><span class="token comment">//['Microsoft', 'Apple', 'Google', 'FaceBook', 'Oracle']</span></code></pre><h5 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h5><p><code>concat()</code>方法把当前的<code>Array</code>和另一个<code>Array</code>连接起来，并返回一个新的<code>Array</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> added <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>added<span class="token punctuation">;</span><span class="token comment">//['A','B','C',1,2,3]</span>arr<span class="token punctuation">;</span><span class="token comment">//['A','B','C']</span></code></pre><p>注意：<code>concat()</code>方法并没有修改当前<code>Array</code>，而是反悔了一个新的<code>Array</code>。</p><p>实际上，<code>concat()</code>方法可以接收任意个元素和<code>Array</code>，并且自动把<code>Array</code>拆开，然后全部添加到新的<code>Array</code>里：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span><span class="token comment">//['A','B','C',1,2,3,4]</span></code></pre><h5 id="join"><a href="#join" class="headerlink" title="join"></a>join</h5><p><code>join()</code>方法是一个非常实用的方法，它把当前<code>Array</code>的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//'A-B-C-1-2-3'</span></code></pre><h5 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h5><p>如果数组的某个元素又是一个Array，则可以形成多维数组，例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>上述<code>Array</code>包含3个元素，前两个元素本身也是<code>Array</code>。</p><h3 id="1-6-变量"><a href="#1-6-变量" class="headerlink" title="1.6 变量"></a>1.6 变量</h3><p>变量是由字母大小写、数字、<code>_</code>、和<code>$</code>的组合，且不能以数字开头，同时变量名不能是关键字。声明一个变量用关键字<code>var</code>，例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span> <span class="token comment">// 申明了变量a，此时a的值为undefined</span><span class="token keyword">var</span> $b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 申明了变量$b，同时给$b赋值，此时$b的值为1</span><span class="token keyword">var</span> s_007 <span class="token operator">=</span> <span class="token string">'007'</span><span class="token punctuation">;</span> <span class="token comment">// s_007是一个字符串</span><span class="token keyword">var</span> Answer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Answer是一个布尔值true</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// t的值是null</span></code></pre><p>变量名也可以是中文，但是强烈<code>不建议</code>使用。</p><p>在JavaScript中使用等号=对变量进行赋值，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，并且可以是不同类型的值，但是需要注意的是一个变量只能声明一次。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span><span class="token comment">//可以将已经存储了整数类型123的变量a重新赋值字符串类型的abc</span></code></pre><p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须制定变量类型，且不可以存储其他类型的值。例如java是静态语言：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">int a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//a是整数类型，用int声明</span>a <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span><span class="token comment">//错误：不能把字符串类型赋值给整型变量</span></code></pre><p>如果要显示变量内容，可以使用<code>alert()</code>或者<code>console.log()</code>，区别在于前者会弹出对话框，后者直接在控制台输出。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//控制台输出200</span><span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出对话框显示200</span></code></pre><h2 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2 比较运算符"></a>2 比较运算符</h2><p>JavaScript中的相等运算符有两种：</p><ul><li><p><code>==</code> 会自动转换数据类型再比较，相似的数据类型会出现相等的结果</p></li><li><p><code>===</code>不会进行数据类型转换，强烈要求两边数据类型一致，否则结果就是<code>false</code></p></li></ul><p>建议<code>不要</code>使用<code>==</code>号进行比较</p><p><code>NaN</code>这个特殊的Number与其他值都不相等，包括它自己：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">NaN</span><span class="token operator">===</span><span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">//false</span></code></pre><p>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><p>最后要注意浮点数的相等比较：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">===</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span></code></pre><p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.0000001</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><h2 id="3-对象"><a href="#3-对象" class="headerlink" title="3 对象"></a>3 对象</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>JavaScript的对象是一组由键值对组成的无序集合，例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">tags</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'web'</span><span class="token punctuation">,</span> <span class="token string">'mobile'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">,</span> <span class="token literal-property property">hasCar</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">zipcode</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。对象中的每个键又被称为对象的属性。</p><p>要获取一个对象的属性，我们用<code>对象变量.属性名</code>的方式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">person<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment">//'Bob'</span>person<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">//20</span></code></pre><h2 id="4-strict模式"><a href="#4-strict模式" class="headerlink" title="4 strict模式"></a>4 strict模式</h2><p>在JavaScript中，设计之初并不强制要求用<code>var</code>声明变量，但是如果一个变量没有通过<code>var</code>声明就被使用，那么该变量就自动声明为全局变量：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//声明了一个全局变量i，其值是20</span></code></pre><p>声明变量时使用<code>var</code>，那么其声明的变量范围将受函数控制。</p><p>为了弥补这一设计缺陷，ECMA(JavaScript标准)在后续规范中设计了<code>strict</code>模式，在运用了<code>strict</code>模式的代码中，强制要求通过<code>var</code>来声明变量，否则就会报错。</p><p>启用strict模式的方法是在JavaScript代码的第一行写上以下代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span></code></pre><p>这是一个字符串，支持strict模式的浏览器将开启<code>strict</code>模式运行JavaScript代码，不支持<code>strict</code>模式的浏览器会把它当做一个字符串执行。</p><h2 id="5-条件语句"><a href="#5-条件语句" class="headerlink" title="5 条件语句"></a>5 条件语句</h2><p>JavaScript使用<code>if(){...}else{...}</code>来进行条件判断</p><p>JavaScript把<code>nill</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code>和空字符串’ ‘视为<code>false</code>，其他值一概视为<code>true</code>。</p><h2 id="6-循环语句"><a href="#6-循环语句" class="headerlink" title="6 循环语句"></a>6 循环语句</h2><h3 id="6-1-for循环"><a href="#6-1-for循环" class="headerlink" title="6.1 for循环"></a>6.1 for循环</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//for循环</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> x <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span>x<span class="token punctuation">;</span> <span class="token comment">// 50005000</span></code></pre><p><code>for</code>循环的一个变体是<code>for ... in</code>循环，它可以把一个对象的所有属性依次循环出来：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//for...in循环</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'name', 'age', 'city'</span><span class="token punctuation">}</span></code></pre><p>要过滤掉对象继承的属性，用<code>hasOwnProperty()</code>来实现：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'name', 'age', 'city'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由于<code>Array</code>也是对象，而它的每个元素的索引被视为对象的属性，因此，<code>for ... in</code>循环可以直接循环出<code>Array</code>的索引：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '0', '1', '2'</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'A', 'B', 'C'</span><span class="token punctuation">}</span></code></pre><p>注意：<code>for...in</code>对<code>Array</code>的循环得到的是<code>string</code>而不是<code>Number</code>。</p><h3 id="6-2-while循环"><a href="#6-2-while循环" class="headerlink" title="6.2 while循环"></a>6.2 while循环</h3><p>条件满足则循环</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> x <span class="token operator">+</span> n<span class="token punctuation">;</span> n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>x<span class="token punctuation">;</span> <span class="token comment">// 2500</span></code></pre><h3 id="6-3-do-…-while"><a href="#6-3-do-…-while" class="headerlink" title="6.3 do … while"></a>6.3 do … while</h3><p>先执行，再判断</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span> n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token punctuation">;</span> <span class="token comment">// 100javas</span></code></pre><h2 id="7-Map和Set"><a href="#7-Map和Set" class="headerlink" title="7 Map和Set"></a>7 Map和Set</h2><p>JavaScript的默认对象表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组键值对。</p><p>但是JavaScript对象的键必须是字符串，实际上Number或者其他数据类型作为键也是非常合理的。</p><p>为了解决这个问题，ES6规范引入了新的数据类型<code>Map</code>。</p><h3 id="7-1-Map"><a href="#7-1-Map" class="headerlink" title="7.1 Map"></a>7.1 Map</h3><p><code>Map</code>是一组键值对的结构，具有极快的查找速度。</p><p>初始化<code>Map</code>需要一个二维数组，或者直接初始化一个空<code>Map</code>。<code>Map</code>具有以下方法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//二维数组形式初始化Map</span><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Tracy'</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化空Map</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Map的常用方法</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加新的key-value</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否存在key 'Adam': true</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 67</span>m<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除key 'Adam'</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></code></pre><h3 id="7-2-Set"><a href="#7-2-Set" class="headerlink" title="7.2 Set"></a>7.2 Set</h3><p><code>Set</code>和<code>Map</code>类似，但只存储<code>key</code>，不存储<code>value</code>，由于<code>key</code>不能重复，所以在<code>Set</code>中，没有重复的<code>key</code>。</p><p>要创建一个<code>Set</code>，需要提供一个<code>Array</code>作为输入，或者直接创建以个空<code>Set</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空Set</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 含1, 2, 3</span></code></pre><p>重复元素在<code>Set</code>中自动被过滤：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">;</span> <span class="token comment">// Set {1, 2, 3, "3"}</span></code></pre><p>通过<code>add(key)</code>方法可以添加元素到<code>Set</code>中，可以重复添加，但不会有效果：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">;</span> <span class="token comment">// Set {1, 2, 3, 4}</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">;</span> <span class="token comment">// 仍然是 Set {1, 2, 3, 4}</span></code></pre><p>通过<code>delete(key)</code>方法可以删除元素：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">;</span> <span class="token comment">// Set {1, 2, 3}</span>s<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">;</span> <span class="token comment">// Set {1, 2}</span></code></pre><h2 id="8-iterable"><a href="#8-iterable" class="headerlink" title="8 iterable"></a>8 iterable</h2><p>遍历<code>Array</code>可以采用下标循环，遍历<code>Map</code>和<code>Set</code>就无法使用下标。为了统一集合类型，ES6标准引入了新的<code>iterable</code>类型，<code>Array</code>、<code>Map</code>和<code>Set</code>都属于<code>iterable</code>类型。</p><p>具有<code>iterable</code>类型的集合可以通过新的<code>for ... of</code>循环来遍历。</p><p>用<code>for ... of</code>循环遍历集合，用法如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//遍历过程中的x为每个集合下的元素</span><span class="token comment">//Array--&gt;'A' Set--&gt;'A' Map--&gt;\[1,'x'\]</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历Array</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历Set</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历Map</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你可能会有疑问，<code>for ... of</code>循环和<code>for ... in</code>循环有何区别？</p><p><code>for ... in</code>循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个<code>Array</code>数组实际上也是一个对象，它的每个元素的索引被视为一个属性。</p><p>当我们手动给<code>Array</code>对象添加了额外的属性后，<code>for ... in</code>循环将带来意想不到的意外效果：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '0', '1', '2', 'name'</span><span class="token punctuation">}</span></code></pre><p><code>for ... in</code>循环将把<code>name</code>包括在内，但<code>Array</code>的<code>length</code>属性却不包括在内。</p><p><code>for ... of</code>循环则完全修复了这些问题，它只循环集合本身的元素：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'A', 'B', 'C'</span><span class="token punctuation">}</span></code></pre><p>这就是为什么要引入新的<code>for ... of</code> 循环。</p><p>然而，更好的方式是直接使用<code>iterable</code>内置的<code>forEach</code>方法，它接收一个函数，每次迭代就自动回调该函数。以<code>Array</code>为例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token comment">// element: 指向当前元素的值</span> <span class="token comment">// index: 指向当前索引</span> <span class="token comment">// array: 指向Array对象本身</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element <span class="token operator">+</span> <span class="token string">', index = '</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果为：</p><pre class="language-bash" data-language="bash"><code class="language-bash">A, index <span class="token punctuation">\</span><span class="token operator">=</span> <span class="token number">0</span>B, index <span class="token punctuation">\</span><span class="token operator">=</span> <span class="token number">1</span>C, index <span class="token punctuation">\</span><span class="token operator">=</span> <span class="token number">2</span></code></pre><p>注意 ，<code>forEach()</code>方法是ES5.1标准引入的，你需要测试浏览器是否支持。</p><p><code>Set</code>与<code>Array</code>类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> sameElement<span class="token punctuation">,</span> <span class="token keyword">set</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Map</code>的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得<code>Array</code>的<code>element</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参考教程：<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
